Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ELLIPSIS
    OMG
    OMGWTF
    TROOF
    WTF

Grammar

Rule 0     S' -> program
Rule 1     program -> HAI FLOAT NEWLINE statements KTHXBYE
Rule 2     statements -> statements statement
Rule 3     statements -> statement
Rule 4     statement -> command NEWLINE
Rule 5     statement -> command COMMA
Rule 6     command -> empty
Rule 7     command -> expr
Rule 8     command -> call
Rule 9     command -> cast
Rule 10    command -> decl
Rule 11    command -> assign_bukkit
Rule 12    command -> assign
Rule 13    command -> declare_bukkit_block
Rule 14    command -> if_else
Rule 15    command -> bukkit_function
Rule 16    command -> function
Rule 17    command -> return
Rule 18    command -> loop
Rule 19    command -> export
Rule 20    command -> import
Rule 21    loop -> IM IN YR variable operation YR variable condition expr NEWLINE statements IM OUTTA YR variable
Rule 22    operation -> UPPIN
Rule 23    operation -> NERFIN
Rule 24    condition -> TIL
Rule 25    condition -> WILE
Rule 26    import -> CAN HAS PATH QUESTION
Rule 27    export -> YOU CAN HAS sep_args MKAY
Rule 28    if_else -> O RLY QUESTION NEWLINE YA RLY NEWLINE statements NO WAI NEWLINE statements OIC
Rule 29    if_else -> O RLY QUESTION NEWLINE YA RLY NEWLINE statements OIC
Rule 30    if_else -> O RLY QUESTION NEWLINE YA RLY NEWLINE statements elifs NO WAI NEWLINE statements OIC
Rule 31    elifs -> elifs elif
Rule 32    elifs -> elif
Rule 33    elif -> MEBBE expr NEWLINE statements
Rule 34    decl -> I HAS A variable
Rule 35    decl -> I HAS A variable ITZ expr
Rule 36    decl -> I HAS A variable ITZ A type
Rule 37    declare_bukkit_block -> O HAI IM variable NEWLINE statements KTHX
Rule 38    assign_bukkit -> variable HAS A variable ITZ expr
Rule 39    assign -> variable R expr
Rule 40    expr -> variable APOSTROPHE_Z variable
Rule 41    cast -> variable IS NOW A type
Rule 42    cast -> variable R MAEK variable A type
Rule 43    cast -> variable R MAEK variable type
Rule 44    args -> args expr
Rule 45    args -> expr
Rule 46    sep_args -> sep_args AN expr
Rule 47    sep_args -> expr
Rule 48    sep_yr_args -> sep_yr_args AN YR expr
Rule 49    sep_yr_args -> expr
Rule 50    bukkit_function -> HOW IZ variable ID YR sep_yr_args NEWLINE statements IF U SAY SO
Rule 51    bukkit_function -> HOW IZ variable ID NEWLINE statements IF U SAY SO
Rule 52    function -> HOW IZ I ID YR sep_yr_args NEWLINE statements IF U SAY SO
Rule 53    function -> HOW IZ I ID NEWLINE statements IF U SAY SO
Rule 54    expr -> I IZ ID YR sep_yr_args MKAY
Rule 55    expr -> I IZ ID
Rule 56    expr -> variable IZ ID YR sep_yr_args MKAY
Rule 57    expr -> variable IZ ID
Rule 58    return -> FOUND YR expr
Rule 59    return -> GTFO
Rule 60    type -> YARN
Rule 61    type -> NUMBR
Rule 62    type -> NUMBAR
Rule 63    type -> NOOB
Rule 64    type -> BUKKIT
Rule 65    value -> STRING
Rule 66    value -> FLOAT
Rule 67    value -> INTEGER
Rule 68    value -> WIN
Rule 69    value -> FAIL
Rule 70    value -> DICT
Rule 71    call -> VISIBLE args
Rule 72    call -> VISIBLE args EXCLAMATION
Rule 73    call -> GIMMEH variable
Rule 74    expr -> SIZE OF expr
Rule 75    expr -> ABSLUT OF expr
Rule 76    expr -> value
Rule 77    expr -> variable
Rule 78    expr -> SUM OF expr AN expr
Rule 79    expr -> DIFF OF expr AN expr
Rule 80    expr -> PRODUKT OF expr AN expr
Rule 81    expr -> QUOSHUNT OF expr AN expr
Rule 82    expr -> MOD OF expr AN expr
Rule 83    expr -> BIGGR OF expr AN expr
Rule 84    expr -> SMALLR OF expr AN expr
Rule 85    expr -> BOTH OF expr AN expr
Rule 86    expr -> EITHER OF expr AN expr
Rule 87    expr -> WON OF expr AN expr
Rule 88    expr -> NOT expr
Rule 89    expr -> ALL OF sep_args MKAY
Rule 90    expr -> ANY OF sep_args MKAY
Rule 91    expr -> ALL OF args MKAY
Rule 92    expr -> ANY OF args MKAY
Rule 93    expr -> BOTH SAEM expr AN expr
Rule 94    expr -> DIFFRINT expr AN expr
Rule 95    expr -> SMOOSH sep_args MKAY
Rule 96    expr -> SMOOSH args MKAY
Rule 97    expr -> MAEK expr A type
Rule 98    expr -> MAEK expr type
Rule 99    variable -> ID
Rule 100   variable -> IT
Rule 101   program -> error
Rule 102   empty -> <empty>

Terminals, with rules where they appear

A                    : 34 35 36 36 38 41 42 97
ABSLUT               : 75
ALL                  : 89 91
AN                   : 46 48 78 79 80 81 82 83 84 85 86 87 93 94
ANY                  : 90 92
APOSTROPHE_Z         : 40
BIGGR                : 83
BOTH                 : 85 93
BUKKIT               : 64
CAN                  : 26 27
COMMA                : 5
DICT                 : 70
DIFF                 : 79
DIFFRINT             : 94
EITHER               : 86
ELLIPSIS             : 
EXCLAMATION          : 72
FAIL                 : 69
FLOAT                : 1 66
FOUND                : 58
GIMMEH               : 73
GTFO                 : 59
HAI                  : 1 37
HAS                  : 26 27 34 35 36 38
HOW                  : 50 51 52 53
I                    : 34 35 36 52 53 54 55
ID                   : 50 51 52 53 54 55 56 57 99
IF                   : 50 51 52 53
IM                   : 21 21 37
IN                   : 21
INTEGER              : 67
IS                   : 41
IT                   : 100
ITZ                  : 35 36 38
IZ                   : 50 51 52 53 54 55 56 57
KTHX                 : 37
KTHXBYE              : 1
MAEK                 : 42 43 97 98
MEBBE                : 33
MKAY                 : 27 54 56 89 90 91 92 95 96
MOD                  : 82
NERFIN               : 23
NEWLINE              : 1 4 21 28 28 28 29 29 30 30 30 33 37 50 51 52 53
NO                   : 28 30
NOOB                 : 63
NOT                  : 88
NOW                  : 41
NUMBAR               : 62
NUMBR                : 61
O                    : 28 29 30 37
OF                   : 74 75 78 79 80 81 82 83 84 85 86 87 89 90 91 92
OIC                  : 28 29 30
OMG                  : 
OMGWTF               : 
OUTTA                : 21
PATH                 : 26
PRODUKT              : 80
QUESTION             : 26 28 29 30
QUOSHUNT             : 81
R                    : 39 42 43
RLY                  : 28 28 29 29 30 30
SAEM                 : 93
SAY                  : 50 51 52 53
SIZE                 : 74
SMALLR               : 84
SMOOSH               : 95 96
SO                   : 50 51 52 53
STRING               : 65
SUM                  : 78
TIL                  : 24
TROOF                : 
U                    : 50 51 52 53
UPPIN                : 22
VISIBLE              : 71 72
WAI                  : 28 30
WILE                 : 25
WIN                  : 68
WON                  : 87
WTF                  : 
YA                   : 28 29 30
YARN                 : 60
YOU                  : 27
YR                   : 21 21 21 48 50 52 54 56 58
error                : 101

Nonterminals, with rules where they appear

args                 : 44 71 72 91 92 96
assign               : 12
assign_bukkit        : 11
bukkit_function      : 15
call                 : 8
cast                 : 9
command              : 4 5
condition            : 21
decl                 : 10
declare_bukkit_block : 13
elif                 : 31 32
elifs                : 30 31
empty                : 6
export               : 19
expr                 : 7 21 33 35 38 39 44 45 46 47 48 49 58 74 75 78 78 79 79 80 80 81 81 82 82 83 83 84 84 85 85 86 86 87 87 88 93 93 94 94 97 98
function             : 16
if_else              : 14
import               : 20
loop                 : 18
operation            : 21
program              : 0
return               : 17
sep_args             : 27 46 89 90 95
sep_yr_args          : 48 50 52 54 56
statement            : 2 3
statements           : 1 2 21 28 28 29 30 30 33 37 50 51 52 53
type                 : 36 41 42 43 97 98
value                : 76
variable             : 21 21 21 34 35 36 37 38 38 39 40 40 41 42 42 43 43 50 51 56 57 73 77

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . HAI FLOAT NEWLINE statements KTHXBYE
    (101) program -> . error

    HAI             shift and go to state 2
    error           shift and go to state 3

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> HAI . FLOAT NEWLINE statements KTHXBYE

    FLOAT           shift and go to state 4


state 3

    (101) program -> error .

    $end            reduce using rule 101 (program -> error .)


state 4

    (1) program -> HAI FLOAT . NEWLINE statements KTHXBYE

    NEWLINE         shift and go to state 5


state 5

    (1) program -> HAI FLOAT NEWLINE . statements KTHXBYE
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . command NEWLINE
    (5) statement -> . command COMMA
    (6) command -> . empty
    (7) command -> . expr
    (8) command -> . call
    (9) command -> . cast
    (10) command -> . decl
    (11) command -> . assign_bukkit
    (12) command -> . assign
    (13) command -> . declare_bukkit_block
    (14) command -> . if_else
    (15) command -> . bukkit_function
    (16) command -> . function
    (17) command -> . return
    (18) command -> . loop
    (19) command -> . export
    (20) command -> . import
    (102) empty -> .
    (40) expr -> . variable APOSTROPHE_Z variable
    (54) expr -> . I IZ ID YR sep_yr_args MKAY
    (55) expr -> . I IZ ID
    (56) expr -> . variable IZ ID YR sep_yr_args MKAY
    (57) expr -> . variable IZ ID
    (74) expr -> . SIZE OF expr
    (75) expr -> . ABSLUT OF expr
    (76) expr -> . value
    (77) expr -> . variable
    (78) expr -> . SUM OF expr AN expr
    (79) expr -> . DIFF OF expr AN expr
    (80) expr -> . PRODUKT OF expr AN expr
    (81) expr -> . QUOSHUNT OF expr AN expr
    (82) expr -> . MOD OF expr AN expr
    (83) expr -> . BIGGR OF expr AN expr
    (84) expr -> . SMALLR OF expr AN expr
    (85) expr -> . BOTH OF expr AN expr
    (86) expr -> . EITHER OF expr AN expr
    (87) expr -> . WON OF expr AN expr
    (88) expr -> . NOT expr
    (89) expr -> . ALL OF sep_args MKAY
    (90) expr -> . ANY OF sep_args MKAY
    (91) expr -> . ALL OF args MKAY
    (92) expr -> . ANY OF args MKAY
    (93) expr -> . BOTH SAEM expr AN expr
    (94) expr -> . DIFFRINT expr AN expr
    (95) expr -> . SMOOSH sep_args MKAY
    (96) expr -> . SMOOSH args MKAY
    (97) expr -> . MAEK expr A type
    (98) expr -> . MAEK expr type
    (71) call -> . VISIBLE args
    (72) call -> . VISIBLE args EXCLAMATION
    (73) call -> . GIMMEH variable
    (41) cast -> . variable IS NOW A type
    (42) cast -> . variable R MAEK variable A type
    (43) cast -> . variable R MAEK variable type
    (34) decl -> . I HAS A variable
    (35) decl -> . I HAS A variable ITZ expr
    (36) decl -> . I HAS A variable ITZ A type
    (38) assign_bukkit -> . variable HAS A variable ITZ expr
    (39) assign -> . variable R expr
    (37) declare_bukkit_block -> . O HAI IM variable NEWLINE statements KTHX
    (28) if_else -> . O RLY QUESTION NEWLINE YA RLY NEWLINE statements NO WAI NEWLINE statements OIC
    (29) if_else -> . O RLY QUESTION NEWLINE YA RLY NEWLINE statements OIC
    (30) if_else -> . O RLY QUESTION NEWLINE YA RLY NEWLINE statements elifs NO WAI NEWLINE statements OIC
    (50) bukkit_function -> . HOW IZ variable ID YR sep_yr_args NEWLINE statements IF U SAY SO
    (51) bukkit_function -> . HOW IZ variable ID NEWLINE statements IF U SAY SO
    (52) function -> . HOW IZ I ID YR sep_yr_args NEWLINE statements IF U SAY SO
    (53) function -> . HOW IZ I ID NEWLINE statements IF U SAY SO
    (58) return -> . FOUND YR expr
    (59) return -> . GTFO
    (21) loop -> . IM IN YR variable operation YR variable condition expr NEWLINE statements IM OUTTA YR variable
    (27) export -> . YOU CAN HAS sep_args MKAY
    (26) import -> . CAN HAS PATH QUESTION
    (99) variable -> . ID
    (100) variable -> . IT
    (65) value -> . STRING
    (66) value -> . FLOAT
    (67) value -> . INTEGER
    (68) value -> . WIN
    (69) value -> . FAIL
    (70) value -> . DICT

    NEWLINE         reduce using rule 102 (empty -> .)
    COMMA           reduce using rule 102 (empty -> .)
    I               shift and go to state 26
    SIZE            shift and go to state 28
    ABSLUT          shift and go to state 29
    SUM             shift and go to state 31
    DIFF            shift and go to state 32
    PRODUKT         shift and go to state 33
    QUOSHUNT        shift and go to state 34
    MOD             shift and go to state 35
    BIGGR           shift and go to state 36
    SMALLR          shift and go to state 37
    BOTH            shift and go to state 38
    EITHER          shift and go to state 39
    WON             shift and go to state 40
    NOT             shift and go to state 41
    ALL             shift and go to state 42
    ANY             shift and go to state 43
    DIFFRINT        shift and go to state 44
    SMOOSH          shift and go to state 45
    MAEK            shift and go to state 46
    VISIBLE         shift and go to state 47
    GIMMEH          shift and go to state 48
    O               shift and go to state 49
    HOW             shift and go to state 51
    FOUND           shift and go to state 52
    GTFO            shift and go to state 53
    IM              shift and go to state 50
    YOU             shift and go to state 54
    CAN             shift and go to state 55
    ID              shift and go to state 27
    IT              shift and go to state 56
    STRING          shift and go to state 57
    FLOAT           shift and go to state 6
    INTEGER         shift and go to state 58
    WIN             shift and go to state 59
    FAIL            shift and go to state 60
    DICT            shift and go to state 61

    statements                     shift and go to state 7
    statement                      shift and go to state 8
    command                        shift and go to state 9
    empty                          shift and go to state 10
    expr                           shift and go to state 11
    call                           shift and go to state 12
    cast                           shift and go to state 13
    decl                           shift and go to state 14
    assign_bukkit                  shift and go to state 15
    assign                         shift and go to state 16
    declare_bukkit_block           shift and go to state 17
    if_else                        shift and go to state 18
    bukkit_function                shift and go to state 19
    function                       shift and go to state 20
    return                         shift and go to state 21
    loop                           shift and go to state 22
    export                         shift and go to state 23
    import                         shift and go to state 24
    variable                       shift and go to state 25
    value                          shift and go to state 30

state 6

    (66) value -> FLOAT .

    NEWLINE         reduce using rule 66 (value -> FLOAT .)
    COMMA           reduce using rule 66 (value -> FLOAT .)
    AN              reduce using rule 66 (value -> FLOAT .)
    MKAY            reduce using rule 66 (value -> FLOAT .)
    I               reduce using rule 66 (value -> FLOAT .)
    SIZE            reduce using rule 66 (value -> FLOAT .)
    ABSLUT          reduce using rule 66 (value -> FLOAT .)
    SUM             reduce using rule 66 (value -> FLOAT .)
    DIFF            reduce using rule 66 (value -> FLOAT .)
    PRODUKT         reduce using rule 66 (value -> FLOAT .)
    QUOSHUNT        reduce using rule 66 (value -> FLOAT .)
    MOD             reduce using rule 66 (value -> FLOAT .)
    BIGGR           reduce using rule 66 (value -> FLOAT .)
    SMALLR          reduce using rule 66 (value -> FLOAT .)
    BOTH            reduce using rule 66 (value -> FLOAT .)
    EITHER          reduce using rule 66 (value -> FLOAT .)
    WON             reduce using rule 66 (value -> FLOAT .)
    NOT             reduce using rule 66 (value -> FLOAT .)
    ALL             reduce using rule 66 (value -> FLOAT .)
    ANY             reduce using rule 66 (value -> FLOAT .)
    DIFFRINT        reduce using rule 66 (value -> FLOAT .)
    SMOOSH          reduce using rule 66 (value -> FLOAT .)
    MAEK            reduce using rule 66 (value -> FLOAT .)
    ID              reduce using rule 66 (value -> FLOAT .)
    IT              reduce using rule 66 (value -> FLOAT .)
    STRING          reduce using rule 66 (value -> FLOAT .)
    FLOAT           reduce using rule 66 (value -> FLOAT .)
    INTEGER         reduce using rule 66 (value -> FLOAT .)
    WIN             reduce using rule 66 (value -> FLOAT .)
    FAIL            reduce using rule 66 (value -> FLOAT .)
    DICT            reduce using rule 66 (value -> FLOAT .)
    A               reduce using rule 66 (value -> FLOAT .)
    YARN            reduce using rule 66 (value -> FLOAT .)
    NUMBR           reduce using rule 66 (value -> FLOAT .)
    NUMBAR          reduce using rule 66 (value -> FLOAT .)
    NOOB            reduce using rule 66 (value -> FLOAT .)
    BUKKIT          reduce using rule 66 (value -> FLOAT .)
    EXCLAMATION     reduce using rule 66 (value -> FLOAT .)


state 7

    (1) program -> HAI FLOAT NEWLINE statements . KTHXBYE
    (2) statements -> statements . statement
    (4) statement -> . command NEWLINE
    (5) statement -> . command COMMA
    (6) command -> . empty
    (7) command -> . expr
    (8) command -> . call
    (9) command -> . cast
    (10) command -> . decl
    (11) command -> . assign_bukkit
    (12) command -> . assign
    (13) command -> . declare_bukkit_block
    (14) command -> . if_else
    (15) command -> . bukkit_function
    (16) command -> . function
    (17) command -> . return
    (18) command -> . loop
    (19) command -> . export
    (20) command -> . import
    (102) empty -> .
    (40) expr -> . variable APOSTROPHE_Z variable
    (54) expr -> . I IZ ID YR sep_yr_args MKAY
    (55) expr -> . I IZ ID
    (56) expr -> . variable IZ ID YR sep_yr_args MKAY
    (57) expr -> . variable IZ ID
    (74) expr -> . SIZE OF expr
    (75) expr -> . ABSLUT OF expr
    (76) expr -> . value
    (77) expr -> . variable
    (78) expr -> . SUM OF expr AN expr
    (79) expr -> . DIFF OF expr AN expr
    (80) expr -> . PRODUKT OF expr AN expr
    (81) expr -> . QUOSHUNT OF expr AN expr
    (82) expr -> . MOD OF expr AN expr
    (83) expr -> . BIGGR OF expr AN expr
    (84) expr -> . SMALLR OF expr AN expr
    (85) expr -> . BOTH OF expr AN expr
    (86) expr -> . EITHER OF expr AN expr
    (87) expr -> . WON OF expr AN expr
    (88) expr -> . NOT expr
    (89) expr -> . ALL OF sep_args MKAY
    (90) expr -> . ANY OF sep_args MKAY
    (91) expr -> . ALL OF args MKAY
    (92) expr -> . ANY OF args MKAY
    (93) expr -> . BOTH SAEM expr AN expr
    (94) expr -> . DIFFRINT expr AN expr
    (95) expr -> . SMOOSH sep_args MKAY
    (96) expr -> . SMOOSH args MKAY
    (97) expr -> . MAEK expr A type
    (98) expr -> . MAEK expr type
    (71) call -> . VISIBLE args
    (72) call -> . VISIBLE args EXCLAMATION
    (73) call -> . GIMMEH variable
    (41) cast -> . variable IS NOW A type
    (42) cast -> . variable R MAEK variable A type
    (43) cast -> . variable R MAEK variable type
    (34) decl -> . I HAS A variable
    (35) decl -> . I HAS A variable ITZ expr
    (36) decl -> . I HAS A variable ITZ A type
    (38) assign_bukkit -> . variable HAS A variable ITZ expr
    (39) assign -> . variable R expr
    (37) declare_bukkit_block -> . O HAI IM variable NEWLINE statements KTHX
    (28) if_else -> . O RLY QUESTION NEWLINE YA RLY NEWLINE statements NO WAI NEWLINE statements OIC
    (29) if_else -> . O RLY QUESTION NEWLINE YA RLY NEWLINE statements OIC
    (30) if_else -> . O RLY QUESTION NEWLINE YA RLY NEWLINE statements elifs NO WAI NEWLINE statements OIC
    (50) bukkit_function -> . HOW IZ variable ID YR sep_yr_args NEWLINE statements IF U SAY SO
    (51) bukkit_function -> . HOW IZ variable ID NEWLINE statements IF U SAY SO
    (52) function -> . HOW IZ I ID YR sep_yr_args NEWLINE statements IF U SAY SO
    (53) function -> . HOW IZ I ID NEWLINE statements IF U SAY SO
    (58) return -> . FOUND YR expr
    (59) return -> . GTFO
    (21) loop -> . IM IN YR variable operation YR variable condition expr NEWLINE statements IM OUTTA YR variable
    (27) export -> . YOU CAN HAS sep_args MKAY
    (26) import -> . CAN HAS PATH QUESTION
    (99) variable -> . ID
    (100) variable -> . IT
    (65) value -> . STRING
    (66) value -> . FLOAT
    (67) value -> . INTEGER
    (68) value -> . WIN
    (69) value -> . FAIL
    (70) value -> . DICT

    KTHXBYE         shift and go to state 62
    NEWLINE         reduce using rule 102 (empty -> .)
    COMMA           reduce using rule 102 (empty -> .)
    I               shift and go to state 26
    SIZE            shift and go to state 28
    ABSLUT          shift and go to state 29
    SUM             shift and go to state 31
    DIFF            shift and go to state 32
    PRODUKT         shift and go to state 33
    QUOSHUNT        shift and go to state 34
    MOD             shift and go to state 35
    BIGGR           shift and go to state 36
    SMALLR          shift and go to state 37
    BOTH            shift and go to state 38
    EITHER          shift and go to state 39
    WON             shift and go to state 40
    NOT             shift and go to state 41
    ALL             shift and go to state 42
    ANY             shift and go to state 43
    DIFFRINT        shift and go to state 44
    SMOOSH          shift and go to state 45
    MAEK            shift and go to state 46
    VISIBLE         shift and go to state 47
    GIMMEH          shift and go to state 48
    O               shift and go to state 49
    HOW             shift and go to state 51
    FOUND           shift and go to state 52
    GTFO            shift and go to state 53
    IM              shift and go to state 50
    YOU             shift and go to state 54
    CAN             shift and go to state 55
    ID              shift and go to state 27
    IT              shift and go to state 56
    STRING          shift and go to state 57
    FLOAT           shift and go to state 6
    INTEGER         shift and go to state 58
    WIN             shift and go to state 59
    FAIL            shift and go to state 60
    DICT            shift and go to state 61

    statement                      shift and go to state 63
    command                        shift and go to state 9
    empty                          shift and go to state 10
    expr                           shift and go to state 11
    call                           shift and go to state 12
    cast                           shift and go to state 13
    decl                           shift and go to state 14
    assign_bukkit                  shift and go to state 15
    assign                         shift and go to state 16
    declare_bukkit_block           shift and go to state 17
    if_else                        shift and go to state 18
    bukkit_function                shift and go to state 19
    function                       shift and go to state 20
    return                         shift and go to state 21
    loop                           shift and go to state 22
    export                         shift and go to state 23
    import                         shift and go to state 24
    variable                       shift and go to state 25
    value                          shift and go to state 30

state 8

    (3) statements -> statement .

    KTHXBYE         reduce using rule 3 (statements -> statement .)
    I               reduce using rule 3 (statements -> statement .)
    SIZE            reduce using rule 3 (statements -> statement .)
    ABSLUT          reduce using rule 3 (statements -> statement .)
    SUM             reduce using rule 3 (statements -> statement .)
    DIFF            reduce using rule 3 (statements -> statement .)
    PRODUKT         reduce using rule 3 (statements -> statement .)
    QUOSHUNT        reduce using rule 3 (statements -> statement .)
    MOD             reduce using rule 3 (statements -> statement .)
    BIGGR           reduce using rule 3 (statements -> statement .)
    SMALLR          reduce using rule 3 (statements -> statement .)
    BOTH            reduce using rule 3 (statements -> statement .)
    EITHER          reduce using rule 3 (statements -> statement .)
    WON             reduce using rule 3 (statements -> statement .)
    NOT             reduce using rule 3 (statements -> statement .)
    ALL             reduce using rule 3 (statements -> statement .)
    ANY             reduce using rule 3 (statements -> statement .)
    DIFFRINT        reduce using rule 3 (statements -> statement .)
    SMOOSH          reduce using rule 3 (statements -> statement .)
    MAEK            reduce using rule 3 (statements -> statement .)
    VISIBLE         reduce using rule 3 (statements -> statement .)
    GIMMEH          reduce using rule 3 (statements -> statement .)
    O               reduce using rule 3 (statements -> statement .)
    HOW             reduce using rule 3 (statements -> statement .)
    FOUND           reduce using rule 3 (statements -> statement .)
    GTFO            reduce using rule 3 (statements -> statement .)
    IM              reduce using rule 3 (statements -> statement .)
    YOU             reduce using rule 3 (statements -> statement .)
    CAN             reduce using rule 3 (statements -> statement .)
    ID              reduce using rule 3 (statements -> statement .)
    IT              reduce using rule 3 (statements -> statement .)
    STRING          reduce using rule 3 (statements -> statement .)
    FLOAT           reduce using rule 3 (statements -> statement .)
    INTEGER         reduce using rule 3 (statements -> statement .)
    WIN             reduce using rule 3 (statements -> statement .)
    FAIL            reduce using rule 3 (statements -> statement .)
    DICT            reduce using rule 3 (statements -> statement .)
    NEWLINE         reduce using rule 3 (statements -> statement .)
    COMMA           reduce using rule 3 (statements -> statement .)
    KTHX            reduce using rule 3 (statements -> statement .)
    IF              reduce using rule 3 (statements -> statement .)
    NO              reduce using rule 3 (statements -> statement .)
    OIC             reduce using rule 3 (statements -> statement .)
    MEBBE           reduce using rule 3 (statements -> statement .)


state 9

    (4) statement -> command . NEWLINE
    (5) statement -> command . COMMA

    NEWLINE         shift and go to state 64
    COMMA           shift and go to state 65


state 10

    (6) command -> empty .

    NEWLINE         reduce using rule 6 (command -> empty .)
    COMMA           reduce using rule 6 (command -> empty .)


state 11

    (7) command -> expr .

    NEWLINE         reduce using rule 7 (command -> expr .)
    COMMA           reduce using rule 7 (command -> expr .)


state 12

    (8) command -> call .

    NEWLINE         reduce using rule 8 (command -> call .)
    COMMA           reduce using rule 8 (command -> call .)


state 13

    (9) command -> cast .

    NEWLINE         reduce using rule 9 (command -> cast .)
    COMMA           reduce using rule 9 (command -> cast .)


state 14

    (10) command -> decl .

    NEWLINE         reduce using rule 10 (command -> decl .)
    COMMA           reduce using rule 10 (command -> decl .)


state 15

    (11) command -> assign_bukkit .

    NEWLINE         reduce using rule 11 (command -> assign_bukkit .)
    COMMA           reduce using rule 11 (command -> assign_bukkit .)


state 16

    (12) command -> assign .

    NEWLINE         reduce using rule 12 (command -> assign .)
    COMMA           reduce using rule 12 (command -> assign .)


state 17

    (13) command -> declare_bukkit_block .

    NEWLINE         reduce using rule 13 (command -> declare_bukkit_block .)
    COMMA           reduce using rule 13 (command -> declare_bukkit_block .)


state 18

    (14) command -> if_else .

    NEWLINE         reduce using rule 14 (command -> if_else .)
    COMMA           reduce using rule 14 (command -> if_else .)


state 19

    (15) command -> bukkit_function .

    NEWLINE         reduce using rule 15 (command -> bukkit_function .)
    COMMA           reduce using rule 15 (command -> bukkit_function .)


state 20

    (16) command -> function .

    NEWLINE         reduce using rule 16 (command -> function .)
    COMMA           reduce using rule 16 (command -> function .)


state 21

    (17) command -> return .

    NEWLINE         reduce using rule 17 (command -> return .)
    COMMA           reduce using rule 17 (command -> return .)


state 22

    (18) command -> loop .

    NEWLINE         reduce using rule 18 (command -> loop .)
    COMMA           reduce using rule 18 (command -> loop .)


state 23

    (19) command -> export .

    NEWLINE         reduce using rule 19 (command -> export .)
    COMMA           reduce using rule 19 (command -> export .)


state 24

    (20) command -> import .

    NEWLINE         reduce using rule 20 (command -> import .)
    COMMA           reduce using rule 20 (command -> import .)


state 25

    (40) expr -> variable . APOSTROPHE_Z variable
    (56) expr -> variable . IZ ID YR sep_yr_args MKAY
    (57) expr -> variable . IZ ID
    (77) expr -> variable .
    (41) cast -> variable . IS NOW A type
    (42) cast -> variable . R MAEK variable A type
    (43) cast -> variable . R MAEK variable type
    (38) assign_bukkit -> variable . HAS A variable ITZ expr
    (39) assign -> variable . R expr

    APOSTROPHE_Z    shift and go to state 66
    IZ              shift and go to state 67
    NEWLINE         reduce using rule 77 (expr -> variable .)
    COMMA           reduce using rule 77 (expr -> variable .)
    IS              shift and go to state 68
    R               shift and go to state 69
    HAS             shift and go to state 70


state 26

    (54) expr -> I . IZ ID YR sep_yr_args MKAY
    (55) expr -> I . IZ ID
    (34) decl -> I . HAS A variable
    (35) decl -> I . HAS A variable ITZ expr
    (36) decl -> I . HAS A variable ITZ A type

    IZ              shift and go to state 71
    HAS             shift and go to state 72


state 27

    (99) variable -> ID .

    APOSTROPHE_Z    reduce using rule 99 (variable -> ID .)
    IZ              reduce using rule 99 (variable -> ID .)
    IS              reduce using rule 99 (variable -> ID .)
    R               reduce using rule 99 (variable -> ID .)
    HAS             reduce using rule 99 (variable -> ID .)
    NEWLINE         reduce using rule 99 (variable -> ID .)
    COMMA           reduce using rule 99 (variable -> ID .)
    AN              reduce using rule 99 (variable -> ID .)
    MKAY            reduce using rule 99 (variable -> ID .)
    I               reduce using rule 99 (variable -> ID .)
    SIZE            reduce using rule 99 (variable -> ID .)
    ABSLUT          reduce using rule 99 (variable -> ID .)
    SUM             reduce using rule 99 (variable -> ID .)
    DIFF            reduce using rule 99 (variable -> ID .)
    PRODUKT         reduce using rule 99 (variable -> ID .)
    QUOSHUNT        reduce using rule 99 (variable -> ID .)
    MOD             reduce using rule 99 (variable -> ID .)
    BIGGR           reduce using rule 99 (variable -> ID .)
    SMALLR          reduce using rule 99 (variable -> ID .)
    BOTH            reduce using rule 99 (variable -> ID .)
    EITHER          reduce using rule 99 (variable -> ID .)
    WON             reduce using rule 99 (variable -> ID .)
    NOT             reduce using rule 99 (variable -> ID .)
    ALL             reduce using rule 99 (variable -> ID .)
    ANY             reduce using rule 99 (variable -> ID .)
    DIFFRINT        reduce using rule 99 (variable -> ID .)
    SMOOSH          reduce using rule 99 (variable -> ID .)
    MAEK            reduce using rule 99 (variable -> ID .)
    ID              reduce using rule 99 (variable -> ID .)
    IT              reduce using rule 99 (variable -> ID .)
    STRING          reduce using rule 99 (variable -> ID .)
    FLOAT           reduce using rule 99 (variable -> ID .)
    INTEGER         reduce using rule 99 (variable -> ID .)
    WIN             reduce using rule 99 (variable -> ID .)
    FAIL            reduce using rule 99 (variable -> ID .)
    DICT            reduce using rule 99 (variable -> ID .)
    A               reduce using rule 99 (variable -> ID .)
    YARN            reduce using rule 99 (variable -> ID .)
    NUMBR           reduce using rule 99 (variable -> ID .)
    NUMBAR          reduce using rule 99 (variable -> ID .)
    NOOB            reduce using rule 99 (variable -> ID .)
    BUKKIT          reduce using rule 99 (variable -> ID .)
    EXCLAMATION     reduce using rule 99 (variable -> ID .)
    ITZ             reduce using rule 99 (variable -> ID .)
    UPPIN           reduce using rule 99 (variable -> ID .)
    NERFIN          reduce using rule 99 (variable -> ID .)
    TIL             reduce using rule 99 (variable -> ID .)
    WILE            reduce using rule 99 (variable -> ID .)


state 28

    (74) expr -> SIZE . OF expr

    OF              shift and go to state 73


state 29

    (75) expr -> ABSLUT . OF expr

    OF              shift and go to state 74


state 30

    (76) expr -> value .

    NEWLINE         reduce using rule 76 (expr -> value .)
    COMMA           reduce using rule 76 (expr -> value .)
    AN              reduce using rule 76 (expr -> value .)
    MKAY            reduce using rule 76 (expr -> value .)
    I               reduce using rule 76 (expr -> value .)
    SIZE            reduce using rule 76 (expr -> value .)
    ABSLUT          reduce using rule 76 (expr -> value .)
    SUM             reduce using rule 76 (expr -> value .)
    DIFF            reduce using rule 76 (expr -> value .)
    PRODUKT         reduce using rule 76 (expr -> value .)
    QUOSHUNT        reduce using rule 76 (expr -> value .)
    MOD             reduce using rule 76 (expr -> value .)
    BIGGR           reduce using rule 76 (expr -> value .)
    SMALLR          reduce using rule 76 (expr -> value .)
    BOTH            reduce using rule 76 (expr -> value .)
    EITHER          reduce using rule 76 (expr -> value .)
    WON             reduce using rule 76 (expr -> value .)
    NOT             reduce using rule 76 (expr -> value .)
    ALL             reduce using rule 76 (expr -> value .)
    ANY             reduce using rule 76 (expr -> value .)
    DIFFRINT        reduce using rule 76 (expr -> value .)
    SMOOSH          reduce using rule 76 (expr -> value .)
    MAEK            reduce using rule 76 (expr -> value .)
    ID              reduce using rule 76 (expr -> value .)
    IT              reduce using rule 76 (expr -> value .)
    STRING          reduce using rule 76 (expr -> value .)
    FLOAT           reduce using rule 76 (expr -> value .)
    INTEGER         reduce using rule 76 (expr -> value .)
    WIN             reduce using rule 76 (expr -> value .)
    FAIL            reduce using rule 76 (expr -> value .)
    DICT            reduce using rule 76 (expr -> value .)
    A               reduce using rule 76 (expr -> value .)
    YARN            reduce using rule 76 (expr -> value .)
    NUMBR           reduce using rule 76 (expr -> value .)
    NUMBAR          reduce using rule 76 (expr -> value .)
    NOOB            reduce using rule 76 (expr -> value .)
    BUKKIT          reduce using rule 76 (expr -> value .)
    EXCLAMATION     reduce using rule 76 (expr -> value .)


state 31

    (78) expr -> SUM . OF expr AN expr

    OF              shift and go to state 75


state 32

    (79) expr -> DIFF . OF expr AN expr

    OF              shift and go to state 76


state 33

    (80) expr -> PRODUKT . OF expr AN expr

    OF              shift and go to state 77


state 34

    (81) expr -> QUOSHUNT . OF expr AN expr

    OF              shift and go to state 78


state 35

    (82) expr -> MOD . OF expr AN expr

    OF              shift and go to state 79


state 36

    (83) expr -> BIGGR . OF expr AN expr

    OF              shift and go to state 80


state 37

    (84) expr -> SMALLR . OF expr AN expr

    OF              shift and go to state 81


state 38

    (85) expr -> BOTH . OF expr AN expr
    (93) expr -> BOTH . SAEM expr AN expr

    OF              shift and go to state 82
    SAEM            shift and go to state 83


state 39

    (86) expr -> EITHER . OF expr AN expr

    OF              shift and go to state 84


state 40

    (87) expr -> WON . OF expr AN expr

    OF              shift and go to state 85


state 41

    (88) expr -> NOT . expr
    (40) expr -> . variable APOSTROPHE_Z variable
    (54) expr -> . I IZ ID YR sep_yr_args MKAY
    (55) expr -> . I IZ ID
    (56) expr -> . variable IZ ID YR sep_yr_args MKAY
    (57) expr -> . variable IZ ID
    (74) expr -> . SIZE OF expr
    (75) expr -> . ABSLUT OF expr
    (76) expr -> . value
    (77) expr -> . variable
    (78) expr -> . SUM OF expr AN expr
    (79) expr -> . DIFF OF expr AN expr
    (80) expr -> . PRODUKT OF expr AN expr
    (81) expr -> . QUOSHUNT OF expr AN expr
    (82) expr -> . MOD OF expr AN expr
    (83) expr -> . BIGGR OF expr AN expr
    (84) expr -> . SMALLR OF expr AN expr
    (85) expr -> . BOTH OF expr AN expr
    (86) expr -> . EITHER OF expr AN expr
    (87) expr -> . WON OF expr AN expr
    (88) expr -> . NOT expr
    (89) expr -> . ALL OF sep_args MKAY
    (90) expr -> . ANY OF sep_args MKAY
    (91) expr -> . ALL OF args MKAY
    (92) expr -> . ANY OF args MKAY
    (93) expr -> . BOTH SAEM expr AN expr
    (94) expr -> . DIFFRINT expr AN expr
    (95) expr -> . SMOOSH sep_args MKAY
    (96) expr -> . SMOOSH args MKAY
    (97) expr -> . MAEK expr A type
    (98) expr -> . MAEK expr type
    (99) variable -> . ID
    (100) variable -> . IT
    (65) value -> . STRING
    (66) value -> . FLOAT
    (67) value -> . INTEGER
    (68) value -> . WIN
    (69) value -> . FAIL
    (70) value -> . DICT

    I               shift and go to state 88
    SIZE            shift and go to state 28
    ABSLUT          shift and go to state 29
    SUM             shift and go to state 31
    DIFF            shift and go to state 32
    PRODUKT         shift and go to state 33
    QUOSHUNT        shift and go to state 34
    MOD             shift and go to state 35
    BIGGR           shift and go to state 36
    SMALLR          shift and go to state 37
    BOTH            shift and go to state 38
    EITHER          shift and go to state 39
    WON             shift and go to state 40
    NOT             shift and go to state 41
    ALL             shift and go to state 42
    ANY             shift and go to state 43
    DIFFRINT        shift and go to state 44
    SMOOSH          shift and go to state 45
    MAEK            shift and go to state 46
    ID              shift and go to state 27
    IT              shift and go to state 56
    STRING          shift and go to state 57
    FLOAT           shift and go to state 6
    INTEGER         shift and go to state 58
    WIN             shift and go to state 59
    FAIL            shift and go to state 60
    DICT            shift and go to state 61

    expr                           shift and go to state 86
    variable                       shift and go to state 87
    value                          shift and go to state 30

state 42

    (89) expr -> ALL . OF sep_args MKAY
    (91) expr -> ALL . OF args MKAY

    OF              shift and go to state 89


state 43

    (90) expr -> ANY . OF sep_args MKAY
    (92) expr -> ANY . OF args MKAY

    OF              shift and go to state 90


state 44

    (94) expr -> DIFFRINT . expr AN expr
    (40) expr -> . variable APOSTROPHE_Z variable
    (54) expr -> . I IZ ID YR sep_yr_args MKAY
    (55) expr -> . I IZ ID
    (56) expr -> . variable IZ ID YR sep_yr_args MKAY
    (57) expr -> . variable IZ ID
    (74) expr -> . SIZE OF expr
    (75) expr -> . ABSLUT OF expr
    (76) expr -> . value
    (77) expr -> . variable
    (78) expr -> . SUM OF expr AN expr
    (79) expr -> . DIFF OF expr AN expr
    (80) expr -> . PRODUKT OF expr AN expr
    (81) expr -> . QUOSHUNT OF expr AN expr
    (82) expr -> . MOD OF expr AN expr
    (83) expr -> . BIGGR OF expr AN expr
    (84) expr -> . SMALLR OF expr AN expr
    (85) expr -> . BOTH OF expr AN expr
    (86) expr -> . EITHER OF expr AN expr
    (87) expr -> . WON OF expr AN expr
    (88) expr -> . NOT expr
    (89) expr -> . ALL OF sep_args MKAY
    (90) expr -> . ANY OF sep_args MKAY
    (91) expr -> . ALL OF args MKAY
    (92) expr -> . ANY OF args MKAY
    (93) expr -> . BOTH SAEM expr AN expr
    (94) expr -> . DIFFRINT expr AN expr
    (95) expr -> . SMOOSH sep_args MKAY
    (96) expr -> . SMOOSH args MKAY
    (97) expr -> . MAEK expr A type
    (98) expr -> . MAEK expr type
    (99) variable -> . ID
    (100) variable -> . IT
    (65) value -> . STRING
    (66) value -> . FLOAT
    (67) value -> . INTEGER
    (68) value -> . WIN
    (69) value -> . FAIL
    (70) value -> . DICT

    I               shift and go to state 88
    SIZE            shift and go to state 28
    ABSLUT          shift and go to state 29
    SUM             shift and go to state 31
    DIFF            shift and go to state 32
    PRODUKT         shift and go to state 33
    QUOSHUNT        shift and go to state 34
    MOD             shift and go to state 35
    BIGGR           shift and go to state 36
    SMALLR          shift and go to state 37
    BOTH            shift and go to state 38
    EITHER          shift and go to state 39
    WON             shift and go to state 40
    NOT             shift and go to state 41
    ALL             shift and go to state 42
    ANY             shift and go to state 43
    DIFFRINT        shift and go to state 44
    SMOOSH          shift and go to state 45
    MAEK            shift and go to state 46
    ID              shift and go to state 27
    IT              shift and go to state 56
    STRING          shift and go to state 57
    FLOAT           shift and go to state 6
    INTEGER         shift and go to state 58
    WIN             shift and go to state 59
    FAIL            shift and go to state 60
    DICT            shift and go to state 61

    expr                           shift and go to state 91
    variable                       shift and go to state 87
    value                          shift and go to state 30

state 45

    (95) expr -> SMOOSH . sep_args MKAY
    (96) expr -> SMOOSH . args MKAY
    (46) sep_args -> . sep_args AN expr
    (47) sep_args -> . expr
    (44) args -> . args expr
    (45) args -> . expr
    (40) expr -> . variable APOSTROPHE_Z variable
    (54) expr -> . I IZ ID YR sep_yr_args MKAY
    (55) expr -> . I IZ ID
    (56) expr -> . variable IZ ID YR sep_yr_args MKAY
    (57) expr -> . variable IZ ID
    (74) expr -> . SIZE OF expr
    (75) expr -> . ABSLUT OF expr
    (76) expr -> . value
    (77) expr -> . variable
    (78) expr -> . SUM OF expr AN expr
    (79) expr -> . DIFF OF expr AN expr
    (80) expr -> . PRODUKT OF expr AN expr
    (81) expr -> . QUOSHUNT OF expr AN expr
    (82) expr -> . MOD OF expr AN expr
    (83) expr -> . BIGGR OF expr AN expr
    (84) expr -> . SMALLR OF expr AN expr
    (85) expr -> . BOTH OF expr AN expr
    (86) expr -> . EITHER OF expr AN expr
    (87) expr -> . WON OF expr AN expr
    (88) expr -> . NOT expr
    (89) expr -> . ALL OF sep_args MKAY
    (90) expr -> . ANY OF sep_args MKAY
    (91) expr -> . ALL OF args MKAY
    (92) expr -> . ANY OF args MKAY
    (93) expr -> . BOTH SAEM expr AN expr
    (94) expr -> . DIFFRINT expr AN expr
    (95) expr -> . SMOOSH sep_args MKAY
    (96) expr -> . SMOOSH args MKAY
    (97) expr -> . MAEK expr A type
    (98) expr -> . MAEK expr type
    (99) variable -> . ID
    (100) variable -> . IT
    (65) value -> . STRING
    (66) value -> . FLOAT
    (67) value -> . INTEGER
    (68) value -> . WIN
    (69) value -> . FAIL
    (70) value -> . DICT

    I               shift and go to state 88
    SIZE            shift and go to state 28
    ABSLUT          shift and go to state 29
    SUM             shift and go to state 31
    DIFF            shift and go to state 32
    PRODUKT         shift and go to state 33
    QUOSHUNT        shift and go to state 34
    MOD             shift and go to state 35
    BIGGR           shift and go to state 36
    SMALLR          shift and go to state 37
    BOTH            shift and go to state 38
    EITHER          shift and go to state 39
    WON             shift and go to state 40
    NOT             shift and go to state 41
    ALL             shift and go to state 42
    ANY             shift and go to state 43
    DIFFRINT        shift and go to state 44
    SMOOSH          shift and go to state 45
    MAEK            shift and go to state 46
    ID              shift and go to state 27
    IT              shift and go to state 56
    STRING          shift and go to state 57
    FLOAT           shift and go to state 6
    INTEGER         shift and go to state 58
    WIN             shift and go to state 59
    FAIL            shift and go to state 60
    DICT            shift and go to state 61

    sep_args                       shift and go to state 92
    args                           shift and go to state 93
    expr                           shift and go to state 94
    variable                       shift and go to state 87
    value                          shift and go to state 30

state 46

    (97) expr -> MAEK . expr A type
    (98) expr -> MAEK . expr type
    (40) expr -> . variable APOSTROPHE_Z variable
    (54) expr -> . I IZ ID YR sep_yr_args MKAY
    (55) expr -> . I IZ ID
    (56) expr -> . variable IZ ID YR sep_yr_args MKAY
    (57) expr -> . variable IZ ID
    (74) expr -> . SIZE OF expr
    (75) expr -> . ABSLUT OF expr
    (76) expr -> . value
    (77) expr -> . variable
    (78) expr -> . SUM OF expr AN expr
    (79) expr -> . DIFF OF expr AN expr
    (80) expr -> . PRODUKT OF expr AN expr
    (81) expr -> . QUOSHUNT OF expr AN expr
    (82) expr -> . MOD OF expr AN expr
    (83) expr -> . BIGGR OF expr AN expr
    (84) expr -> . SMALLR OF expr AN expr
    (85) expr -> . BOTH OF expr AN expr
    (86) expr -> . EITHER OF expr AN expr
    (87) expr -> . WON OF expr AN expr
    (88) expr -> . NOT expr
    (89) expr -> . ALL OF sep_args MKAY
    (90) expr -> . ANY OF sep_args MKAY
    (91) expr -> . ALL OF args MKAY
    (92) expr -> . ANY OF args MKAY
    (93) expr -> . BOTH SAEM expr AN expr
    (94) expr -> . DIFFRINT expr AN expr
    (95) expr -> . SMOOSH sep_args MKAY
    (96) expr -> . SMOOSH args MKAY
    (97) expr -> . MAEK expr A type
    (98) expr -> . MAEK expr type
    (99) variable -> . ID
    (100) variable -> . IT
    (65) value -> . STRING
    (66) value -> . FLOAT
    (67) value -> . INTEGER
    (68) value -> . WIN
    (69) value -> . FAIL
    (70) value -> . DICT

    I               shift and go to state 88
    SIZE            shift and go to state 28
    ABSLUT          shift and go to state 29
    SUM             shift and go to state 31
    DIFF            shift and go to state 32
    PRODUKT         shift and go to state 33
    QUOSHUNT        shift and go to state 34
    MOD             shift and go to state 35
    BIGGR           shift and go to state 36
    SMALLR          shift and go to state 37
    BOTH            shift and go to state 38
    EITHER          shift and go to state 39
    WON             shift and go to state 40
    NOT             shift and go to state 41
    ALL             shift and go to state 42
    ANY             shift and go to state 43
    DIFFRINT        shift and go to state 44
    SMOOSH          shift and go to state 45
    MAEK            shift and go to state 46
    ID              shift and go to state 27
    IT              shift and go to state 56
    STRING          shift and go to state 57
    FLOAT           shift and go to state 6
    INTEGER         shift and go to state 58
    WIN             shift and go to state 59
    FAIL            shift and go to state 60
    DICT            shift and go to state 61

    expr                           shift and go to state 95
    variable                       shift and go to state 87
    value                          shift and go to state 30

state 47

    (71) call -> VISIBLE . args
    (72) call -> VISIBLE . args EXCLAMATION
    (44) args -> . args expr
    (45) args -> . expr
    (40) expr -> . variable APOSTROPHE_Z variable
    (54) expr -> . I IZ ID YR sep_yr_args MKAY
    (55) expr -> . I IZ ID
    (56) expr -> . variable IZ ID YR sep_yr_args MKAY
    (57) expr -> . variable IZ ID
    (74) expr -> . SIZE OF expr
    (75) expr -> . ABSLUT OF expr
    (76) expr -> . value
    (77) expr -> . variable
    (78) expr -> . SUM OF expr AN expr
    (79) expr -> . DIFF OF expr AN expr
    (80) expr -> . PRODUKT OF expr AN expr
    (81) expr -> . QUOSHUNT OF expr AN expr
    (82) expr -> . MOD OF expr AN expr
    (83) expr -> . BIGGR OF expr AN expr
    (84) expr -> . SMALLR OF expr AN expr
    (85) expr -> . BOTH OF expr AN expr
    (86) expr -> . EITHER OF expr AN expr
    (87) expr -> . WON OF expr AN expr
    (88) expr -> . NOT expr
    (89) expr -> . ALL OF sep_args MKAY
    (90) expr -> . ANY OF sep_args MKAY
    (91) expr -> . ALL OF args MKAY
    (92) expr -> . ANY OF args MKAY
    (93) expr -> . BOTH SAEM expr AN expr
    (94) expr -> . DIFFRINT expr AN expr
    (95) expr -> . SMOOSH sep_args MKAY
    (96) expr -> . SMOOSH args MKAY
    (97) expr -> . MAEK expr A type
    (98) expr -> . MAEK expr type
    (99) variable -> . ID
    (100) variable -> . IT
    (65) value -> . STRING
    (66) value -> . FLOAT
    (67) value -> . INTEGER
    (68) value -> . WIN
    (69) value -> . FAIL
    (70) value -> . DICT

    I               shift and go to state 88
    SIZE            shift and go to state 28
    ABSLUT          shift and go to state 29
    SUM             shift and go to state 31
    DIFF            shift and go to state 32
    PRODUKT         shift and go to state 33
    QUOSHUNT        shift and go to state 34
    MOD             shift and go to state 35
    BIGGR           shift and go to state 36
    SMALLR          shift and go to state 37
    BOTH            shift and go to state 38
    EITHER          shift and go to state 39
    WON             shift and go to state 40
    NOT             shift and go to state 41
    ALL             shift and go to state 42
    ANY             shift and go to state 43
    DIFFRINT        shift and go to state 44
    SMOOSH          shift and go to state 45
    MAEK            shift and go to state 46
    ID              shift and go to state 27
    IT              shift and go to state 56
    STRING          shift and go to state 57
    FLOAT           shift and go to state 6
    INTEGER         shift and go to state 58
    WIN             shift and go to state 59
    FAIL            shift and go to state 60
    DICT            shift and go to state 61

    args                           shift and go to state 96
    expr                           shift and go to state 97
    variable                       shift and go to state 87
    value                          shift and go to state 30

state 48

    (73) call -> GIMMEH . variable
    (99) variable -> . ID
    (100) variable -> . IT

    ID              shift and go to state 27
    IT              shift and go to state 56

    variable                       shift and go to state 98

state 49

    (37) declare_bukkit_block -> O . HAI IM variable NEWLINE statements KTHX
    (28) if_else -> O . RLY QUESTION NEWLINE YA RLY NEWLINE statements NO WAI NEWLINE statements OIC
    (29) if_else -> O . RLY QUESTION NEWLINE YA RLY NEWLINE statements OIC
    (30) if_else -> O . RLY QUESTION NEWLINE YA RLY NEWLINE statements elifs NO WAI NEWLINE statements OIC

    HAI             shift and go to state 99
    RLY             shift and go to state 100


state 50

    (21) loop -> IM . IN YR variable operation YR variable condition expr NEWLINE statements IM OUTTA YR variable

    IN              shift and go to state 101


state 51

    (50) bukkit_function -> HOW . IZ variable ID YR sep_yr_args NEWLINE statements IF U SAY SO
    (51) bukkit_function -> HOW . IZ variable ID NEWLINE statements IF U SAY SO
    (52) function -> HOW . IZ I ID YR sep_yr_args NEWLINE statements IF U SAY SO
    (53) function -> HOW . IZ I ID NEWLINE statements IF U SAY SO

    IZ              shift and go to state 102


state 52

    (58) return -> FOUND . YR expr

    YR              shift and go to state 103


state 53

    (59) return -> GTFO .

    NEWLINE         reduce using rule 59 (return -> GTFO .)
    COMMA           reduce using rule 59 (return -> GTFO .)


state 54

    (27) export -> YOU . CAN HAS sep_args MKAY

    CAN             shift and go to state 104


state 55

    (26) import -> CAN . HAS PATH QUESTION

    HAS             shift and go to state 105


state 56

    (100) variable -> IT .

    APOSTROPHE_Z    reduce using rule 100 (variable -> IT .)
    IZ              reduce using rule 100 (variable -> IT .)
    IS              reduce using rule 100 (variable -> IT .)
    R               reduce using rule 100 (variable -> IT .)
    HAS             reduce using rule 100 (variable -> IT .)
    NEWLINE         reduce using rule 100 (variable -> IT .)
    COMMA           reduce using rule 100 (variable -> IT .)
    AN              reduce using rule 100 (variable -> IT .)
    MKAY            reduce using rule 100 (variable -> IT .)
    I               reduce using rule 100 (variable -> IT .)
    SIZE            reduce using rule 100 (variable -> IT .)
    ABSLUT          reduce using rule 100 (variable -> IT .)
    SUM             reduce using rule 100 (variable -> IT .)
    DIFF            reduce using rule 100 (variable -> IT .)
    PRODUKT         reduce using rule 100 (variable -> IT .)
    QUOSHUNT        reduce using rule 100 (variable -> IT .)
    MOD             reduce using rule 100 (variable -> IT .)
    BIGGR           reduce using rule 100 (variable -> IT .)
    SMALLR          reduce using rule 100 (variable -> IT .)
    BOTH            reduce using rule 100 (variable -> IT .)
    EITHER          reduce using rule 100 (variable -> IT .)
    WON             reduce using rule 100 (variable -> IT .)
    NOT             reduce using rule 100 (variable -> IT .)
    ALL             reduce using rule 100 (variable -> IT .)
    ANY             reduce using rule 100 (variable -> IT .)
    DIFFRINT        reduce using rule 100 (variable -> IT .)
    SMOOSH          reduce using rule 100 (variable -> IT .)
    MAEK            reduce using rule 100 (variable -> IT .)
    ID              reduce using rule 100 (variable -> IT .)
    IT              reduce using rule 100 (variable -> IT .)
    STRING          reduce using rule 100 (variable -> IT .)
    FLOAT           reduce using rule 100 (variable -> IT .)
    INTEGER         reduce using rule 100 (variable -> IT .)
    WIN             reduce using rule 100 (variable -> IT .)
    FAIL            reduce using rule 100 (variable -> IT .)
    DICT            reduce using rule 100 (variable -> IT .)
    A               reduce using rule 100 (variable -> IT .)
    YARN            reduce using rule 100 (variable -> IT .)
    NUMBR           reduce using rule 100 (variable -> IT .)
    NUMBAR          reduce using rule 100 (variable -> IT .)
    NOOB            reduce using rule 100 (variable -> IT .)
    BUKKIT          reduce using rule 100 (variable -> IT .)
    EXCLAMATION     reduce using rule 100 (variable -> IT .)
    ITZ             reduce using rule 100 (variable -> IT .)
    UPPIN           reduce using rule 100 (variable -> IT .)
    NERFIN          reduce using rule 100 (variable -> IT .)
    TIL             reduce using rule 100 (variable -> IT .)
    WILE            reduce using rule 100 (variable -> IT .)


state 57

    (65) value -> STRING .

    NEWLINE         reduce using rule 65 (value -> STRING .)
    COMMA           reduce using rule 65 (value -> STRING .)
    AN              reduce using rule 65 (value -> STRING .)
    MKAY            reduce using rule 65 (value -> STRING .)
    I               reduce using rule 65 (value -> STRING .)
    SIZE            reduce using rule 65 (value -> STRING .)
    ABSLUT          reduce using rule 65 (value -> STRING .)
    SUM             reduce using rule 65 (value -> STRING .)
    DIFF            reduce using rule 65 (value -> STRING .)
    PRODUKT         reduce using rule 65 (value -> STRING .)
    QUOSHUNT        reduce using rule 65 (value -> STRING .)
    MOD             reduce using rule 65 (value -> STRING .)
    BIGGR           reduce using rule 65 (value -> STRING .)
    SMALLR          reduce using rule 65 (value -> STRING .)
    BOTH            reduce using rule 65 (value -> STRING .)
    EITHER          reduce using rule 65 (value -> STRING .)
    WON             reduce using rule 65 (value -> STRING .)
    NOT             reduce using rule 65 (value -> STRING .)
    ALL             reduce using rule 65 (value -> STRING .)
    ANY             reduce using rule 65 (value -> STRING .)
    DIFFRINT        reduce using rule 65 (value -> STRING .)
    SMOOSH          reduce using rule 65 (value -> STRING .)
    MAEK            reduce using rule 65 (value -> STRING .)
    ID              reduce using rule 65 (value -> STRING .)
    IT              reduce using rule 65 (value -> STRING .)
    STRING          reduce using rule 65 (value -> STRING .)
    FLOAT           reduce using rule 65 (value -> STRING .)
    INTEGER         reduce using rule 65 (value -> STRING .)
    WIN             reduce using rule 65 (value -> STRING .)
    FAIL            reduce using rule 65 (value -> STRING .)
    DICT            reduce using rule 65 (value -> STRING .)
    A               reduce using rule 65 (value -> STRING .)
    YARN            reduce using rule 65 (value -> STRING .)
    NUMBR           reduce using rule 65 (value -> STRING .)
    NUMBAR          reduce using rule 65 (value -> STRING .)
    NOOB            reduce using rule 65 (value -> STRING .)
    BUKKIT          reduce using rule 65 (value -> STRING .)
    EXCLAMATION     reduce using rule 65 (value -> STRING .)


state 58

    (67) value -> INTEGER .

    NEWLINE         reduce using rule 67 (value -> INTEGER .)
    COMMA           reduce using rule 67 (value -> INTEGER .)
    AN              reduce using rule 67 (value -> INTEGER .)
    MKAY            reduce using rule 67 (value -> INTEGER .)
    I               reduce using rule 67 (value -> INTEGER .)
    SIZE            reduce using rule 67 (value -> INTEGER .)
    ABSLUT          reduce using rule 67 (value -> INTEGER .)
    SUM             reduce using rule 67 (value -> INTEGER .)
    DIFF            reduce using rule 67 (value -> INTEGER .)
    PRODUKT         reduce using rule 67 (value -> INTEGER .)
    QUOSHUNT        reduce using rule 67 (value -> INTEGER .)
    MOD             reduce using rule 67 (value -> INTEGER .)
    BIGGR           reduce using rule 67 (value -> INTEGER .)
    SMALLR          reduce using rule 67 (value -> INTEGER .)
    BOTH            reduce using rule 67 (value -> INTEGER .)
    EITHER          reduce using rule 67 (value -> INTEGER .)
    WON             reduce using rule 67 (value -> INTEGER .)
    NOT             reduce using rule 67 (value -> INTEGER .)
    ALL             reduce using rule 67 (value -> INTEGER .)
    ANY             reduce using rule 67 (value -> INTEGER .)
    DIFFRINT        reduce using rule 67 (value -> INTEGER .)
    SMOOSH          reduce using rule 67 (value -> INTEGER .)
    MAEK            reduce using rule 67 (value -> INTEGER .)
    ID              reduce using rule 67 (value -> INTEGER .)
    IT              reduce using rule 67 (value -> INTEGER .)
    STRING          reduce using rule 67 (value -> INTEGER .)
    FLOAT           reduce using rule 67 (value -> INTEGER .)
    INTEGER         reduce using rule 67 (value -> INTEGER .)
    WIN             reduce using rule 67 (value -> INTEGER .)
    FAIL            reduce using rule 67 (value -> INTEGER .)
    DICT            reduce using rule 67 (value -> INTEGER .)
    A               reduce using rule 67 (value -> INTEGER .)
    YARN            reduce using rule 67 (value -> INTEGER .)
    NUMBR           reduce using rule 67 (value -> INTEGER .)
    NUMBAR          reduce using rule 67 (value -> INTEGER .)
    NOOB            reduce using rule 67 (value -> INTEGER .)
    BUKKIT          reduce using rule 67 (value -> INTEGER .)
    EXCLAMATION     reduce using rule 67 (value -> INTEGER .)


state 59

    (68) value -> WIN .

    NEWLINE         reduce using rule 68 (value -> WIN .)
    COMMA           reduce using rule 68 (value -> WIN .)
    AN              reduce using rule 68 (value -> WIN .)
    MKAY            reduce using rule 68 (value -> WIN .)
    I               reduce using rule 68 (value -> WIN .)
    SIZE            reduce using rule 68 (value -> WIN .)
    ABSLUT          reduce using rule 68 (value -> WIN .)
    SUM             reduce using rule 68 (value -> WIN .)
    DIFF            reduce using rule 68 (value -> WIN .)
    PRODUKT         reduce using rule 68 (value -> WIN .)
    QUOSHUNT        reduce using rule 68 (value -> WIN .)
    MOD             reduce using rule 68 (value -> WIN .)
    BIGGR           reduce using rule 68 (value -> WIN .)
    SMALLR          reduce using rule 68 (value -> WIN .)
    BOTH            reduce using rule 68 (value -> WIN .)
    EITHER          reduce using rule 68 (value -> WIN .)
    WON             reduce using rule 68 (value -> WIN .)
    NOT             reduce using rule 68 (value -> WIN .)
    ALL             reduce using rule 68 (value -> WIN .)
    ANY             reduce using rule 68 (value -> WIN .)
    DIFFRINT        reduce using rule 68 (value -> WIN .)
    SMOOSH          reduce using rule 68 (value -> WIN .)
    MAEK            reduce using rule 68 (value -> WIN .)
    ID              reduce using rule 68 (value -> WIN .)
    IT              reduce using rule 68 (value -> WIN .)
    STRING          reduce using rule 68 (value -> WIN .)
    FLOAT           reduce using rule 68 (value -> WIN .)
    INTEGER         reduce using rule 68 (value -> WIN .)
    WIN             reduce using rule 68 (value -> WIN .)
    FAIL            reduce using rule 68 (value -> WIN .)
    DICT            reduce using rule 68 (value -> WIN .)
    A               reduce using rule 68 (value -> WIN .)
    YARN            reduce using rule 68 (value -> WIN .)
    NUMBR           reduce using rule 68 (value -> WIN .)
    NUMBAR          reduce using rule 68 (value -> WIN .)
    NOOB            reduce using rule 68 (value -> WIN .)
    BUKKIT          reduce using rule 68 (value -> WIN .)
    EXCLAMATION     reduce using rule 68 (value -> WIN .)


state 60

    (69) value -> FAIL .

    NEWLINE         reduce using rule 69 (value -> FAIL .)
    COMMA           reduce using rule 69 (value -> FAIL .)
    AN              reduce using rule 69 (value -> FAIL .)
    MKAY            reduce using rule 69 (value -> FAIL .)
    I               reduce using rule 69 (value -> FAIL .)
    SIZE            reduce using rule 69 (value -> FAIL .)
    ABSLUT          reduce using rule 69 (value -> FAIL .)
    SUM             reduce using rule 69 (value -> FAIL .)
    DIFF            reduce using rule 69 (value -> FAIL .)
    PRODUKT         reduce using rule 69 (value -> FAIL .)
    QUOSHUNT        reduce using rule 69 (value -> FAIL .)
    MOD             reduce using rule 69 (value -> FAIL .)
    BIGGR           reduce using rule 69 (value -> FAIL .)
    SMALLR          reduce using rule 69 (value -> FAIL .)
    BOTH            reduce using rule 69 (value -> FAIL .)
    EITHER          reduce using rule 69 (value -> FAIL .)
    WON             reduce using rule 69 (value -> FAIL .)
    NOT             reduce using rule 69 (value -> FAIL .)
    ALL             reduce using rule 69 (value -> FAIL .)
    ANY             reduce using rule 69 (value -> FAIL .)
    DIFFRINT        reduce using rule 69 (value -> FAIL .)
    SMOOSH          reduce using rule 69 (value -> FAIL .)
    MAEK            reduce using rule 69 (value -> FAIL .)
    ID              reduce using rule 69 (value -> FAIL .)
    IT              reduce using rule 69 (value -> FAIL .)
    STRING          reduce using rule 69 (value -> FAIL .)
    FLOAT           reduce using rule 69 (value -> FAIL .)
    INTEGER         reduce using rule 69 (value -> FAIL .)
    WIN             reduce using rule 69 (value -> FAIL .)
    FAIL            reduce using rule 69 (value -> FAIL .)
    DICT            reduce using rule 69 (value -> FAIL .)
    A               reduce using rule 69 (value -> FAIL .)
    YARN            reduce using rule 69 (value -> FAIL .)
    NUMBR           reduce using rule 69 (value -> FAIL .)
    NUMBAR          reduce using rule 69 (value -> FAIL .)
    NOOB            reduce using rule 69 (value -> FAIL .)
    BUKKIT          reduce using rule 69 (value -> FAIL .)
    EXCLAMATION     reduce using rule 69 (value -> FAIL .)


state 61

    (70) value -> DICT .

    NEWLINE         reduce using rule 70 (value -> DICT .)
    COMMA           reduce using rule 70 (value -> DICT .)
    AN              reduce using rule 70 (value -> DICT .)
    MKAY            reduce using rule 70 (value -> DICT .)
    I               reduce using rule 70 (value -> DICT .)
    SIZE            reduce using rule 70 (value -> DICT .)
    ABSLUT          reduce using rule 70 (value -> DICT .)
    SUM             reduce using rule 70 (value -> DICT .)
    DIFF            reduce using rule 70 (value -> DICT .)
    PRODUKT         reduce using rule 70 (value -> DICT .)
    QUOSHUNT        reduce using rule 70 (value -> DICT .)
    MOD             reduce using rule 70 (value -> DICT .)
    BIGGR           reduce using rule 70 (value -> DICT .)
    SMALLR          reduce using rule 70 (value -> DICT .)
    BOTH            reduce using rule 70 (value -> DICT .)
    EITHER          reduce using rule 70 (value -> DICT .)
    WON             reduce using rule 70 (value -> DICT .)
    NOT             reduce using rule 70 (value -> DICT .)
    ALL             reduce using rule 70 (value -> DICT .)
    ANY             reduce using rule 70 (value -> DICT .)
    DIFFRINT        reduce using rule 70 (value -> DICT .)
    SMOOSH          reduce using rule 70 (value -> DICT .)
    MAEK            reduce using rule 70 (value -> DICT .)
    ID              reduce using rule 70 (value -> DICT .)
    IT              reduce using rule 70 (value -> DICT .)
    STRING          reduce using rule 70 (value -> DICT .)
    FLOAT           reduce using rule 70 (value -> DICT .)
    INTEGER         reduce using rule 70 (value -> DICT .)
    WIN             reduce using rule 70 (value -> DICT .)
    FAIL            reduce using rule 70 (value -> DICT .)
    DICT            reduce using rule 70 (value -> DICT .)
    A               reduce using rule 70 (value -> DICT .)
    YARN            reduce using rule 70 (value -> DICT .)
    NUMBR           reduce using rule 70 (value -> DICT .)
    NUMBAR          reduce using rule 70 (value -> DICT .)
    NOOB            reduce using rule 70 (value -> DICT .)
    BUKKIT          reduce using rule 70 (value -> DICT .)
    EXCLAMATION     reduce using rule 70 (value -> DICT .)


state 62

    (1) program -> HAI FLOAT NEWLINE statements KTHXBYE .

    $end            reduce using rule 1 (program -> HAI FLOAT NEWLINE statements KTHXBYE .)


state 63

    (2) statements -> statements statement .

    KTHXBYE         reduce using rule 2 (statements -> statements statement .)
    I               reduce using rule 2 (statements -> statements statement .)
    SIZE            reduce using rule 2 (statements -> statements statement .)
    ABSLUT          reduce using rule 2 (statements -> statements statement .)
    SUM             reduce using rule 2 (statements -> statements statement .)
    DIFF            reduce using rule 2 (statements -> statements statement .)
    PRODUKT         reduce using rule 2 (statements -> statements statement .)
    QUOSHUNT        reduce using rule 2 (statements -> statements statement .)
    MOD             reduce using rule 2 (statements -> statements statement .)
    BIGGR           reduce using rule 2 (statements -> statements statement .)
    SMALLR          reduce using rule 2 (statements -> statements statement .)
    BOTH            reduce using rule 2 (statements -> statements statement .)
    EITHER          reduce using rule 2 (statements -> statements statement .)
    WON             reduce using rule 2 (statements -> statements statement .)
    NOT             reduce using rule 2 (statements -> statements statement .)
    ALL             reduce using rule 2 (statements -> statements statement .)
    ANY             reduce using rule 2 (statements -> statements statement .)
    DIFFRINT        reduce using rule 2 (statements -> statements statement .)
    SMOOSH          reduce using rule 2 (statements -> statements statement .)
    MAEK            reduce using rule 2 (statements -> statements statement .)
    VISIBLE         reduce using rule 2 (statements -> statements statement .)
    GIMMEH          reduce using rule 2 (statements -> statements statement .)
    O               reduce using rule 2 (statements -> statements statement .)
    HOW             reduce using rule 2 (statements -> statements statement .)
    FOUND           reduce using rule 2 (statements -> statements statement .)
    GTFO            reduce using rule 2 (statements -> statements statement .)
    IM              reduce using rule 2 (statements -> statements statement .)
    YOU             reduce using rule 2 (statements -> statements statement .)
    CAN             reduce using rule 2 (statements -> statements statement .)
    ID              reduce using rule 2 (statements -> statements statement .)
    IT              reduce using rule 2 (statements -> statements statement .)
    STRING          reduce using rule 2 (statements -> statements statement .)
    FLOAT           reduce using rule 2 (statements -> statements statement .)
    INTEGER         reduce using rule 2 (statements -> statements statement .)
    WIN             reduce using rule 2 (statements -> statements statement .)
    FAIL            reduce using rule 2 (statements -> statements statement .)
    DICT            reduce using rule 2 (statements -> statements statement .)
    NEWLINE         reduce using rule 2 (statements -> statements statement .)
    COMMA           reduce using rule 2 (statements -> statements statement .)
    KTHX            reduce using rule 2 (statements -> statements statement .)
    IF              reduce using rule 2 (statements -> statements statement .)
    NO              reduce using rule 2 (statements -> statements statement .)
    OIC             reduce using rule 2 (statements -> statements statement .)
    MEBBE           reduce using rule 2 (statements -> statements statement .)


state 64

    (4) statement -> command NEWLINE .

    KTHXBYE         reduce using rule 4 (statement -> command NEWLINE .)
    I               reduce using rule 4 (statement -> command NEWLINE .)
    SIZE            reduce using rule 4 (statement -> command NEWLINE .)
    ABSLUT          reduce using rule 4 (statement -> command NEWLINE .)
    SUM             reduce using rule 4 (statement -> command NEWLINE .)
    DIFF            reduce using rule 4 (statement -> command NEWLINE .)
    PRODUKT         reduce using rule 4 (statement -> command NEWLINE .)
    QUOSHUNT        reduce using rule 4 (statement -> command NEWLINE .)
    MOD             reduce using rule 4 (statement -> command NEWLINE .)
    BIGGR           reduce using rule 4 (statement -> command NEWLINE .)
    SMALLR          reduce using rule 4 (statement -> command NEWLINE .)
    BOTH            reduce using rule 4 (statement -> command NEWLINE .)
    EITHER          reduce using rule 4 (statement -> command NEWLINE .)
    WON             reduce using rule 4 (statement -> command NEWLINE .)
    NOT             reduce using rule 4 (statement -> command NEWLINE .)
    ALL             reduce using rule 4 (statement -> command NEWLINE .)
    ANY             reduce using rule 4 (statement -> command NEWLINE .)
    DIFFRINT        reduce using rule 4 (statement -> command NEWLINE .)
    SMOOSH          reduce using rule 4 (statement -> command NEWLINE .)
    MAEK            reduce using rule 4 (statement -> command NEWLINE .)
    VISIBLE         reduce using rule 4 (statement -> command NEWLINE .)
    GIMMEH          reduce using rule 4 (statement -> command NEWLINE .)
    O               reduce using rule 4 (statement -> command NEWLINE .)
    HOW             reduce using rule 4 (statement -> command NEWLINE .)
    FOUND           reduce using rule 4 (statement -> command NEWLINE .)
    GTFO            reduce using rule 4 (statement -> command NEWLINE .)
    IM              reduce using rule 4 (statement -> command NEWLINE .)
    YOU             reduce using rule 4 (statement -> command NEWLINE .)
    CAN             reduce using rule 4 (statement -> command NEWLINE .)
    ID              reduce using rule 4 (statement -> command NEWLINE .)
    IT              reduce using rule 4 (statement -> command NEWLINE .)
    STRING          reduce using rule 4 (statement -> command NEWLINE .)
    FLOAT           reduce using rule 4 (statement -> command NEWLINE .)
    INTEGER         reduce using rule 4 (statement -> command NEWLINE .)
    WIN             reduce using rule 4 (statement -> command NEWLINE .)
    FAIL            reduce using rule 4 (statement -> command NEWLINE .)
    DICT            reduce using rule 4 (statement -> command NEWLINE .)
    NEWLINE         reduce using rule 4 (statement -> command NEWLINE .)
    COMMA           reduce using rule 4 (statement -> command NEWLINE .)
    KTHX            reduce using rule 4 (statement -> command NEWLINE .)
    IF              reduce using rule 4 (statement -> command NEWLINE .)
    NO              reduce using rule 4 (statement -> command NEWLINE .)
    OIC             reduce using rule 4 (statement -> command NEWLINE .)
    MEBBE           reduce using rule 4 (statement -> command NEWLINE .)


state 65

    (5) statement -> command COMMA .

    KTHXBYE         reduce using rule 5 (statement -> command COMMA .)
    I               reduce using rule 5 (statement -> command COMMA .)
    SIZE            reduce using rule 5 (statement -> command COMMA .)
    ABSLUT          reduce using rule 5 (statement -> command COMMA .)
    SUM             reduce using rule 5 (statement -> command COMMA .)
    DIFF            reduce using rule 5 (statement -> command COMMA .)
    PRODUKT         reduce using rule 5 (statement -> command COMMA .)
    QUOSHUNT        reduce using rule 5 (statement -> command COMMA .)
    MOD             reduce using rule 5 (statement -> command COMMA .)
    BIGGR           reduce using rule 5 (statement -> command COMMA .)
    SMALLR          reduce using rule 5 (statement -> command COMMA .)
    BOTH            reduce using rule 5 (statement -> command COMMA .)
    EITHER          reduce using rule 5 (statement -> command COMMA .)
    WON             reduce using rule 5 (statement -> command COMMA .)
    NOT             reduce using rule 5 (statement -> command COMMA .)
    ALL             reduce using rule 5 (statement -> command COMMA .)
    ANY             reduce using rule 5 (statement -> command COMMA .)
    DIFFRINT        reduce using rule 5 (statement -> command COMMA .)
    SMOOSH          reduce using rule 5 (statement -> command COMMA .)
    MAEK            reduce using rule 5 (statement -> command COMMA .)
    VISIBLE         reduce using rule 5 (statement -> command COMMA .)
    GIMMEH          reduce using rule 5 (statement -> command COMMA .)
    O               reduce using rule 5 (statement -> command COMMA .)
    HOW             reduce using rule 5 (statement -> command COMMA .)
    FOUND           reduce using rule 5 (statement -> command COMMA .)
    GTFO            reduce using rule 5 (statement -> command COMMA .)
    IM              reduce using rule 5 (statement -> command COMMA .)
    YOU             reduce using rule 5 (statement -> command COMMA .)
    CAN             reduce using rule 5 (statement -> command COMMA .)
    ID              reduce using rule 5 (statement -> command COMMA .)
    IT              reduce using rule 5 (statement -> command COMMA .)
    STRING          reduce using rule 5 (statement -> command COMMA .)
    FLOAT           reduce using rule 5 (statement -> command COMMA .)
    INTEGER         reduce using rule 5 (statement -> command COMMA .)
    WIN             reduce using rule 5 (statement -> command COMMA .)
    FAIL            reduce using rule 5 (statement -> command COMMA .)
    DICT            reduce using rule 5 (statement -> command COMMA .)
    NEWLINE         reduce using rule 5 (statement -> command COMMA .)
    COMMA           reduce using rule 5 (statement -> command COMMA .)
    KTHX            reduce using rule 5 (statement -> command COMMA .)
    IF              reduce using rule 5 (statement -> command COMMA .)
    NO              reduce using rule 5 (statement -> command COMMA .)
    OIC             reduce using rule 5 (statement -> command COMMA .)
    MEBBE           reduce using rule 5 (statement -> command COMMA .)


state 66

    (40) expr -> variable APOSTROPHE_Z . variable
    (99) variable -> . ID
    (100) variable -> . IT

    ID              shift and go to state 27
    IT              shift and go to state 56

    variable                       shift and go to state 106

state 67

    (56) expr -> variable IZ . ID YR sep_yr_args MKAY
    (57) expr -> variable IZ . ID

    ID              shift and go to state 107


state 68

    (41) cast -> variable IS . NOW A type

    NOW             shift and go to state 108


state 69

    (42) cast -> variable R . MAEK variable A type
    (43) cast -> variable R . MAEK variable type
    (39) assign -> variable R . expr
    (40) expr -> . variable APOSTROPHE_Z variable
    (54) expr -> . I IZ ID YR sep_yr_args MKAY
    (55) expr -> . I IZ ID
    (56) expr -> . variable IZ ID YR sep_yr_args MKAY
    (57) expr -> . variable IZ ID
    (74) expr -> . SIZE OF expr
    (75) expr -> . ABSLUT OF expr
    (76) expr -> . value
    (77) expr -> . variable
    (78) expr -> . SUM OF expr AN expr
    (79) expr -> . DIFF OF expr AN expr
    (80) expr -> . PRODUKT OF expr AN expr
    (81) expr -> . QUOSHUNT OF expr AN expr
    (82) expr -> . MOD OF expr AN expr
    (83) expr -> . BIGGR OF expr AN expr
    (84) expr -> . SMALLR OF expr AN expr
    (85) expr -> . BOTH OF expr AN expr
    (86) expr -> . EITHER OF expr AN expr
    (87) expr -> . WON OF expr AN expr
    (88) expr -> . NOT expr
    (89) expr -> . ALL OF sep_args MKAY
    (90) expr -> . ANY OF sep_args MKAY
    (91) expr -> . ALL OF args MKAY
    (92) expr -> . ANY OF args MKAY
    (93) expr -> . BOTH SAEM expr AN expr
    (94) expr -> . DIFFRINT expr AN expr
    (95) expr -> . SMOOSH sep_args MKAY
    (96) expr -> . SMOOSH args MKAY
    (97) expr -> . MAEK expr A type
    (98) expr -> . MAEK expr type
    (99) variable -> . ID
    (100) variable -> . IT
    (65) value -> . STRING
    (66) value -> . FLOAT
    (67) value -> . INTEGER
    (68) value -> . WIN
    (69) value -> . FAIL
    (70) value -> . DICT

    MAEK            shift and go to state 109
    I               shift and go to state 88
    SIZE            shift and go to state 28
    ABSLUT          shift and go to state 29
    SUM             shift and go to state 31
    DIFF            shift and go to state 32
    PRODUKT         shift and go to state 33
    QUOSHUNT        shift and go to state 34
    MOD             shift and go to state 35
    BIGGR           shift and go to state 36
    SMALLR          shift and go to state 37
    BOTH            shift and go to state 38
    EITHER          shift and go to state 39
    WON             shift and go to state 40
    NOT             shift and go to state 41
    ALL             shift and go to state 42
    ANY             shift and go to state 43
    DIFFRINT        shift and go to state 44
    SMOOSH          shift and go to state 45
    ID              shift and go to state 27
    IT              shift and go to state 56
    STRING          shift and go to state 57
    FLOAT           shift and go to state 6
    INTEGER         shift and go to state 58
    WIN             shift and go to state 59
    FAIL            shift and go to state 60
    DICT            shift and go to state 61

    variable                       shift and go to state 87
    expr                           shift and go to state 110
    value                          shift and go to state 30

state 70

    (38) assign_bukkit -> variable HAS . A variable ITZ expr

    A               shift and go to state 111


state 71

    (54) expr -> I IZ . ID YR sep_yr_args MKAY
    (55) expr -> I IZ . ID

    ID              shift and go to state 112


state 72

    (34) decl -> I HAS . A variable
    (35) decl -> I HAS . A variable ITZ expr
    (36) decl -> I HAS . A variable ITZ A type

    A               shift and go to state 113


state 73

    (74) expr -> SIZE OF . expr
    (40) expr -> . variable APOSTROPHE_Z variable
    (54) expr -> . I IZ ID YR sep_yr_args MKAY
    (55) expr -> . I IZ ID
    (56) expr -> . variable IZ ID YR sep_yr_args MKAY
    (57) expr -> . variable IZ ID
    (74) expr -> . SIZE OF expr
    (75) expr -> . ABSLUT OF expr
    (76) expr -> . value
    (77) expr -> . variable
    (78) expr -> . SUM OF expr AN expr
    (79) expr -> . DIFF OF expr AN expr
    (80) expr -> . PRODUKT OF expr AN expr
    (81) expr -> . QUOSHUNT OF expr AN expr
    (82) expr -> . MOD OF expr AN expr
    (83) expr -> . BIGGR OF expr AN expr
    (84) expr -> . SMALLR OF expr AN expr
    (85) expr -> . BOTH OF expr AN expr
    (86) expr -> . EITHER OF expr AN expr
    (87) expr -> . WON OF expr AN expr
    (88) expr -> . NOT expr
    (89) expr -> . ALL OF sep_args MKAY
    (90) expr -> . ANY OF sep_args MKAY
    (91) expr -> . ALL OF args MKAY
    (92) expr -> . ANY OF args MKAY
    (93) expr -> . BOTH SAEM expr AN expr
    (94) expr -> . DIFFRINT expr AN expr
    (95) expr -> . SMOOSH sep_args MKAY
    (96) expr -> . SMOOSH args MKAY
    (97) expr -> . MAEK expr A type
    (98) expr -> . MAEK expr type
    (99) variable -> . ID
    (100) variable -> . IT
    (65) value -> . STRING
    (66) value -> . FLOAT
    (67) value -> . INTEGER
    (68) value -> . WIN
    (69) value -> . FAIL
    (70) value -> . DICT

    I               shift and go to state 88
    SIZE            shift and go to state 28
    ABSLUT          shift and go to state 29
    SUM             shift and go to state 31
    DIFF            shift and go to state 32
    PRODUKT         shift and go to state 33
    QUOSHUNT        shift and go to state 34
    MOD             shift and go to state 35
    BIGGR           shift and go to state 36
    SMALLR          shift and go to state 37
    BOTH            shift and go to state 38
    EITHER          shift and go to state 39
    WON             shift and go to state 40
    NOT             shift and go to state 41
    ALL             shift and go to state 42
    ANY             shift and go to state 43
    DIFFRINT        shift and go to state 44
    SMOOSH          shift and go to state 45
    MAEK            shift and go to state 46
    ID              shift and go to state 27
    IT              shift and go to state 56
    STRING          shift and go to state 57
    FLOAT           shift and go to state 6
    INTEGER         shift and go to state 58
    WIN             shift and go to state 59
    FAIL            shift and go to state 60
    DICT            shift and go to state 61

    expr                           shift and go to state 114
    variable                       shift and go to state 87
    value                          shift and go to state 30

state 74

    (75) expr -> ABSLUT OF . expr
    (40) expr -> . variable APOSTROPHE_Z variable
    (54) expr -> . I IZ ID YR sep_yr_args MKAY
    (55) expr -> . I IZ ID
    (56) expr -> . variable IZ ID YR sep_yr_args MKAY
    (57) expr -> . variable IZ ID
    (74) expr -> . SIZE OF expr
    (75) expr -> . ABSLUT OF expr
    (76) expr -> . value
    (77) expr -> . variable
    (78) expr -> . SUM OF expr AN expr
    (79) expr -> . DIFF OF expr AN expr
    (80) expr -> . PRODUKT OF expr AN expr
    (81) expr -> . QUOSHUNT OF expr AN expr
    (82) expr -> . MOD OF expr AN expr
    (83) expr -> . BIGGR OF expr AN expr
    (84) expr -> . SMALLR OF expr AN expr
    (85) expr -> . BOTH OF expr AN expr
    (86) expr -> . EITHER OF expr AN expr
    (87) expr -> . WON OF expr AN expr
    (88) expr -> . NOT expr
    (89) expr -> . ALL OF sep_args MKAY
    (90) expr -> . ANY OF sep_args MKAY
    (91) expr -> . ALL OF args MKAY
    (92) expr -> . ANY OF args MKAY
    (93) expr -> . BOTH SAEM expr AN expr
    (94) expr -> . DIFFRINT expr AN expr
    (95) expr -> . SMOOSH sep_args MKAY
    (96) expr -> . SMOOSH args MKAY
    (97) expr -> . MAEK expr A type
    (98) expr -> . MAEK expr type
    (99) variable -> . ID
    (100) variable -> . IT
    (65) value -> . STRING
    (66) value -> . FLOAT
    (67) value -> . INTEGER
    (68) value -> . WIN
    (69) value -> . FAIL
    (70) value -> . DICT

    I               shift and go to state 88
    SIZE            shift and go to state 28
    ABSLUT          shift and go to state 29
    SUM             shift and go to state 31
    DIFF            shift and go to state 32
    PRODUKT         shift and go to state 33
    QUOSHUNT        shift and go to state 34
    MOD             shift and go to state 35
    BIGGR           shift and go to state 36
    SMALLR          shift and go to state 37
    BOTH            shift and go to state 38
    EITHER          shift and go to state 39
    WON             shift and go to state 40
    NOT             shift and go to state 41
    ALL             shift and go to state 42
    ANY             shift and go to state 43
    DIFFRINT        shift and go to state 44
    SMOOSH          shift and go to state 45
    MAEK            shift and go to state 46
    ID              shift and go to state 27
    IT              shift and go to state 56
    STRING          shift and go to state 57
    FLOAT           shift and go to state 6
    INTEGER         shift and go to state 58
    WIN             shift and go to state 59
    FAIL            shift and go to state 60
    DICT            shift and go to state 61

    expr                           shift and go to state 115
    variable                       shift and go to state 87
    value                          shift and go to state 30

state 75

    (78) expr -> SUM OF . expr AN expr
    (40) expr -> . variable APOSTROPHE_Z variable
    (54) expr -> . I IZ ID YR sep_yr_args MKAY
    (55) expr -> . I IZ ID
    (56) expr -> . variable IZ ID YR sep_yr_args MKAY
    (57) expr -> . variable IZ ID
    (74) expr -> . SIZE OF expr
    (75) expr -> . ABSLUT OF expr
    (76) expr -> . value
    (77) expr -> . variable
    (78) expr -> . SUM OF expr AN expr
    (79) expr -> . DIFF OF expr AN expr
    (80) expr -> . PRODUKT OF expr AN expr
    (81) expr -> . QUOSHUNT OF expr AN expr
    (82) expr -> . MOD OF expr AN expr
    (83) expr -> . BIGGR OF expr AN expr
    (84) expr -> . SMALLR OF expr AN expr
    (85) expr -> . BOTH OF expr AN expr
    (86) expr -> . EITHER OF expr AN expr
    (87) expr -> . WON OF expr AN expr
    (88) expr -> . NOT expr
    (89) expr -> . ALL OF sep_args MKAY
    (90) expr -> . ANY OF sep_args MKAY
    (91) expr -> . ALL OF args MKAY
    (92) expr -> . ANY OF args MKAY
    (93) expr -> . BOTH SAEM expr AN expr
    (94) expr -> . DIFFRINT expr AN expr
    (95) expr -> . SMOOSH sep_args MKAY
    (96) expr -> . SMOOSH args MKAY
    (97) expr -> . MAEK expr A type
    (98) expr -> . MAEK expr type
    (99) variable -> . ID
    (100) variable -> . IT
    (65) value -> . STRING
    (66) value -> . FLOAT
    (67) value -> . INTEGER
    (68) value -> . WIN
    (69) value -> . FAIL
    (70) value -> . DICT

    I               shift and go to state 88
    SIZE            shift and go to state 28
    ABSLUT          shift and go to state 29
    SUM             shift and go to state 31
    DIFF            shift and go to state 32
    PRODUKT         shift and go to state 33
    QUOSHUNT        shift and go to state 34
    MOD             shift and go to state 35
    BIGGR           shift and go to state 36
    SMALLR          shift and go to state 37
    BOTH            shift and go to state 38
    EITHER          shift and go to state 39
    WON             shift and go to state 40
    NOT             shift and go to state 41
    ALL             shift and go to state 42
    ANY             shift and go to state 43
    DIFFRINT        shift and go to state 44
    SMOOSH          shift and go to state 45
    MAEK            shift and go to state 46
    ID              shift and go to state 27
    IT              shift and go to state 56
    STRING          shift and go to state 57
    FLOAT           shift and go to state 6
    INTEGER         shift and go to state 58
    WIN             shift and go to state 59
    FAIL            shift and go to state 60
    DICT            shift and go to state 61

    expr                           shift and go to state 116
    variable                       shift and go to state 87
    value                          shift and go to state 30

state 76

    (79) expr -> DIFF OF . expr AN expr
    (40) expr -> . variable APOSTROPHE_Z variable
    (54) expr -> . I IZ ID YR sep_yr_args MKAY
    (55) expr -> . I IZ ID
    (56) expr -> . variable IZ ID YR sep_yr_args MKAY
    (57) expr -> . variable IZ ID
    (74) expr -> . SIZE OF expr
    (75) expr -> . ABSLUT OF expr
    (76) expr -> . value
    (77) expr -> . variable
    (78) expr -> . SUM OF expr AN expr
    (79) expr -> . DIFF OF expr AN expr
    (80) expr -> . PRODUKT OF expr AN expr
    (81) expr -> . QUOSHUNT OF expr AN expr
    (82) expr -> . MOD OF expr AN expr
    (83) expr -> . BIGGR OF expr AN expr
    (84) expr -> . SMALLR OF expr AN expr
    (85) expr -> . BOTH OF expr AN expr
    (86) expr -> . EITHER OF expr AN expr
    (87) expr -> . WON OF expr AN expr
    (88) expr -> . NOT expr
    (89) expr -> . ALL OF sep_args MKAY
    (90) expr -> . ANY OF sep_args MKAY
    (91) expr -> . ALL OF args MKAY
    (92) expr -> . ANY OF args MKAY
    (93) expr -> . BOTH SAEM expr AN expr
    (94) expr -> . DIFFRINT expr AN expr
    (95) expr -> . SMOOSH sep_args MKAY
    (96) expr -> . SMOOSH args MKAY
    (97) expr -> . MAEK expr A type
    (98) expr -> . MAEK expr type
    (99) variable -> . ID
    (100) variable -> . IT
    (65) value -> . STRING
    (66) value -> . FLOAT
    (67) value -> . INTEGER
    (68) value -> . WIN
    (69) value -> . FAIL
    (70) value -> . DICT

    I               shift and go to state 88
    SIZE            shift and go to state 28
    ABSLUT          shift and go to state 29
    SUM             shift and go to state 31
    DIFF            shift and go to state 32
    PRODUKT         shift and go to state 33
    QUOSHUNT        shift and go to state 34
    MOD             shift and go to state 35
    BIGGR           shift and go to state 36
    SMALLR          shift and go to state 37
    BOTH            shift and go to state 38
    EITHER          shift and go to state 39
    WON             shift and go to state 40
    NOT             shift and go to state 41
    ALL             shift and go to state 42
    ANY             shift and go to state 43
    DIFFRINT        shift and go to state 44
    SMOOSH          shift and go to state 45
    MAEK            shift and go to state 46
    ID              shift and go to state 27
    IT              shift and go to state 56
    STRING          shift and go to state 57
    FLOAT           shift and go to state 6
    INTEGER         shift and go to state 58
    WIN             shift and go to state 59
    FAIL            shift and go to state 60
    DICT            shift and go to state 61

    expr                           shift and go to state 117
    variable                       shift and go to state 87
    value                          shift and go to state 30

state 77

    (80) expr -> PRODUKT OF . expr AN expr
    (40) expr -> . variable APOSTROPHE_Z variable
    (54) expr -> . I IZ ID YR sep_yr_args MKAY
    (55) expr -> . I IZ ID
    (56) expr -> . variable IZ ID YR sep_yr_args MKAY
    (57) expr -> . variable IZ ID
    (74) expr -> . SIZE OF expr
    (75) expr -> . ABSLUT OF expr
    (76) expr -> . value
    (77) expr -> . variable
    (78) expr -> . SUM OF expr AN expr
    (79) expr -> . DIFF OF expr AN expr
    (80) expr -> . PRODUKT OF expr AN expr
    (81) expr -> . QUOSHUNT OF expr AN expr
    (82) expr -> . MOD OF expr AN expr
    (83) expr -> . BIGGR OF expr AN expr
    (84) expr -> . SMALLR OF expr AN expr
    (85) expr -> . BOTH OF expr AN expr
    (86) expr -> . EITHER OF expr AN expr
    (87) expr -> . WON OF expr AN expr
    (88) expr -> . NOT expr
    (89) expr -> . ALL OF sep_args MKAY
    (90) expr -> . ANY OF sep_args MKAY
    (91) expr -> . ALL OF args MKAY
    (92) expr -> . ANY OF args MKAY
    (93) expr -> . BOTH SAEM expr AN expr
    (94) expr -> . DIFFRINT expr AN expr
    (95) expr -> . SMOOSH sep_args MKAY
    (96) expr -> . SMOOSH args MKAY
    (97) expr -> . MAEK expr A type
    (98) expr -> . MAEK expr type
    (99) variable -> . ID
    (100) variable -> . IT
    (65) value -> . STRING
    (66) value -> . FLOAT
    (67) value -> . INTEGER
    (68) value -> . WIN
    (69) value -> . FAIL
    (70) value -> . DICT

    I               shift and go to state 88
    SIZE            shift and go to state 28
    ABSLUT          shift and go to state 29
    SUM             shift and go to state 31
    DIFF            shift and go to state 32
    PRODUKT         shift and go to state 33
    QUOSHUNT        shift and go to state 34
    MOD             shift and go to state 35
    BIGGR           shift and go to state 36
    SMALLR          shift and go to state 37
    BOTH            shift and go to state 38
    EITHER          shift and go to state 39
    WON             shift and go to state 40
    NOT             shift and go to state 41
    ALL             shift and go to state 42
    ANY             shift and go to state 43
    DIFFRINT        shift and go to state 44
    SMOOSH          shift and go to state 45
    MAEK            shift and go to state 46
    ID              shift and go to state 27
    IT              shift and go to state 56
    STRING          shift and go to state 57
    FLOAT           shift and go to state 6
    INTEGER         shift and go to state 58
    WIN             shift and go to state 59
    FAIL            shift and go to state 60
    DICT            shift and go to state 61

    expr                           shift and go to state 118
    variable                       shift and go to state 87
    value                          shift and go to state 30

state 78

    (81) expr -> QUOSHUNT OF . expr AN expr
    (40) expr -> . variable APOSTROPHE_Z variable
    (54) expr -> . I IZ ID YR sep_yr_args MKAY
    (55) expr -> . I IZ ID
    (56) expr -> . variable IZ ID YR sep_yr_args MKAY
    (57) expr -> . variable IZ ID
    (74) expr -> . SIZE OF expr
    (75) expr -> . ABSLUT OF expr
    (76) expr -> . value
    (77) expr -> . variable
    (78) expr -> . SUM OF expr AN expr
    (79) expr -> . DIFF OF expr AN expr
    (80) expr -> . PRODUKT OF expr AN expr
    (81) expr -> . QUOSHUNT OF expr AN expr
    (82) expr -> . MOD OF expr AN expr
    (83) expr -> . BIGGR OF expr AN expr
    (84) expr -> . SMALLR OF expr AN expr
    (85) expr -> . BOTH OF expr AN expr
    (86) expr -> . EITHER OF expr AN expr
    (87) expr -> . WON OF expr AN expr
    (88) expr -> . NOT expr
    (89) expr -> . ALL OF sep_args MKAY
    (90) expr -> . ANY OF sep_args MKAY
    (91) expr -> . ALL OF args MKAY
    (92) expr -> . ANY OF args MKAY
    (93) expr -> . BOTH SAEM expr AN expr
    (94) expr -> . DIFFRINT expr AN expr
    (95) expr -> . SMOOSH sep_args MKAY
    (96) expr -> . SMOOSH args MKAY
    (97) expr -> . MAEK expr A type
    (98) expr -> . MAEK expr type
    (99) variable -> . ID
    (100) variable -> . IT
    (65) value -> . STRING
    (66) value -> . FLOAT
    (67) value -> . INTEGER
    (68) value -> . WIN
    (69) value -> . FAIL
    (70) value -> . DICT

    I               shift and go to state 88
    SIZE            shift and go to state 28
    ABSLUT          shift and go to state 29
    SUM             shift and go to state 31
    DIFF            shift and go to state 32
    PRODUKT         shift and go to state 33
    QUOSHUNT        shift and go to state 34
    MOD             shift and go to state 35
    BIGGR           shift and go to state 36
    SMALLR          shift and go to state 37
    BOTH            shift and go to state 38
    EITHER          shift and go to state 39
    WON             shift and go to state 40
    NOT             shift and go to state 41
    ALL             shift and go to state 42
    ANY             shift and go to state 43
    DIFFRINT        shift and go to state 44
    SMOOSH          shift and go to state 45
    MAEK            shift and go to state 46
    ID              shift and go to state 27
    IT              shift and go to state 56
    STRING          shift and go to state 57
    FLOAT           shift and go to state 6
    INTEGER         shift and go to state 58
    WIN             shift and go to state 59
    FAIL            shift and go to state 60
    DICT            shift and go to state 61

    expr                           shift and go to state 119
    variable                       shift and go to state 87
    value                          shift and go to state 30

state 79

    (82) expr -> MOD OF . expr AN expr
    (40) expr -> . variable APOSTROPHE_Z variable
    (54) expr -> . I IZ ID YR sep_yr_args MKAY
    (55) expr -> . I IZ ID
    (56) expr -> . variable IZ ID YR sep_yr_args MKAY
    (57) expr -> . variable IZ ID
    (74) expr -> . SIZE OF expr
    (75) expr -> . ABSLUT OF expr
    (76) expr -> . value
    (77) expr -> . variable
    (78) expr -> . SUM OF expr AN expr
    (79) expr -> . DIFF OF expr AN expr
    (80) expr -> . PRODUKT OF expr AN expr
    (81) expr -> . QUOSHUNT OF expr AN expr
    (82) expr -> . MOD OF expr AN expr
    (83) expr -> . BIGGR OF expr AN expr
    (84) expr -> . SMALLR OF expr AN expr
    (85) expr -> . BOTH OF expr AN expr
    (86) expr -> . EITHER OF expr AN expr
    (87) expr -> . WON OF expr AN expr
    (88) expr -> . NOT expr
    (89) expr -> . ALL OF sep_args MKAY
    (90) expr -> . ANY OF sep_args MKAY
    (91) expr -> . ALL OF args MKAY
    (92) expr -> . ANY OF args MKAY
    (93) expr -> . BOTH SAEM expr AN expr
    (94) expr -> . DIFFRINT expr AN expr
    (95) expr -> . SMOOSH sep_args MKAY
    (96) expr -> . SMOOSH args MKAY
    (97) expr -> . MAEK expr A type
    (98) expr -> . MAEK expr type
    (99) variable -> . ID
    (100) variable -> . IT
    (65) value -> . STRING
    (66) value -> . FLOAT
    (67) value -> . INTEGER
    (68) value -> . WIN
    (69) value -> . FAIL
    (70) value -> . DICT

    I               shift and go to state 88
    SIZE            shift and go to state 28
    ABSLUT          shift and go to state 29
    SUM             shift and go to state 31
    DIFF            shift and go to state 32
    PRODUKT         shift and go to state 33
    QUOSHUNT        shift and go to state 34
    MOD             shift and go to state 35
    BIGGR           shift and go to state 36
    SMALLR          shift and go to state 37
    BOTH            shift and go to state 38
    EITHER          shift and go to state 39
    WON             shift and go to state 40
    NOT             shift and go to state 41
    ALL             shift and go to state 42
    ANY             shift and go to state 43
    DIFFRINT        shift and go to state 44
    SMOOSH          shift and go to state 45
    MAEK            shift and go to state 46
    ID              shift and go to state 27
    IT              shift and go to state 56
    STRING          shift and go to state 57
    FLOAT           shift and go to state 6
    INTEGER         shift and go to state 58
    WIN             shift and go to state 59
    FAIL            shift and go to state 60
    DICT            shift and go to state 61

    expr                           shift and go to state 120
    variable                       shift and go to state 87
    value                          shift and go to state 30

state 80

    (83) expr -> BIGGR OF . expr AN expr
    (40) expr -> . variable APOSTROPHE_Z variable
    (54) expr -> . I IZ ID YR sep_yr_args MKAY
    (55) expr -> . I IZ ID
    (56) expr -> . variable IZ ID YR sep_yr_args MKAY
    (57) expr -> . variable IZ ID
    (74) expr -> . SIZE OF expr
    (75) expr -> . ABSLUT OF expr
    (76) expr -> . value
    (77) expr -> . variable
    (78) expr -> . SUM OF expr AN expr
    (79) expr -> . DIFF OF expr AN expr
    (80) expr -> . PRODUKT OF expr AN expr
    (81) expr -> . QUOSHUNT OF expr AN expr
    (82) expr -> . MOD OF expr AN expr
    (83) expr -> . BIGGR OF expr AN expr
    (84) expr -> . SMALLR OF expr AN expr
    (85) expr -> . BOTH OF expr AN expr
    (86) expr -> . EITHER OF expr AN expr
    (87) expr -> . WON OF expr AN expr
    (88) expr -> . NOT expr
    (89) expr -> . ALL OF sep_args MKAY
    (90) expr -> . ANY OF sep_args MKAY
    (91) expr -> . ALL OF args MKAY
    (92) expr -> . ANY OF args MKAY
    (93) expr -> . BOTH SAEM expr AN expr
    (94) expr -> . DIFFRINT expr AN expr
    (95) expr -> . SMOOSH sep_args MKAY
    (96) expr -> . SMOOSH args MKAY
    (97) expr -> . MAEK expr A type
    (98) expr -> . MAEK expr type
    (99) variable -> . ID
    (100) variable -> . IT
    (65) value -> . STRING
    (66) value -> . FLOAT
    (67) value -> . INTEGER
    (68) value -> . WIN
    (69) value -> . FAIL
    (70) value -> . DICT

    I               shift and go to state 88
    SIZE            shift and go to state 28
    ABSLUT          shift and go to state 29
    SUM             shift and go to state 31
    DIFF            shift and go to state 32
    PRODUKT         shift and go to state 33
    QUOSHUNT        shift and go to state 34
    MOD             shift and go to state 35
    BIGGR           shift and go to state 36
    SMALLR          shift and go to state 37
    BOTH            shift and go to state 38
    EITHER          shift and go to state 39
    WON             shift and go to state 40
    NOT             shift and go to state 41
    ALL             shift and go to state 42
    ANY             shift and go to state 43
    DIFFRINT        shift and go to state 44
    SMOOSH          shift and go to state 45
    MAEK            shift and go to state 46
    ID              shift and go to state 27
    IT              shift and go to state 56
    STRING          shift and go to state 57
    FLOAT           shift and go to state 6
    INTEGER         shift and go to state 58
    WIN             shift and go to state 59
    FAIL            shift and go to state 60
    DICT            shift and go to state 61

    expr                           shift and go to state 121
    variable                       shift and go to state 87
    value                          shift and go to state 30

state 81

    (84) expr -> SMALLR OF . expr AN expr
    (40) expr -> . variable APOSTROPHE_Z variable
    (54) expr -> . I IZ ID YR sep_yr_args MKAY
    (55) expr -> . I IZ ID
    (56) expr -> . variable IZ ID YR sep_yr_args MKAY
    (57) expr -> . variable IZ ID
    (74) expr -> . SIZE OF expr
    (75) expr -> . ABSLUT OF expr
    (76) expr -> . value
    (77) expr -> . variable
    (78) expr -> . SUM OF expr AN expr
    (79) expr -> . DIFF OF expr AN expr
    (80) expr -> . PRODUKT OF expr AN expr
    (81) expr -> . QUOSHUNT OF expr AN expr
    (82) expr -> . MOD OF expr AN expr
    (83) expr -> . BIGGR OF expr AN expr
    (84) expr -> . SMALLR OF expr AN expr
    (85) expr -> . BOTH OF expr AN expr
    (86) expr -> . EITHER OF expr AN expr
    (87) expr -> . WON OF expr AN expr
    (88) expr -> . NOT expr
    (89) expr -> . ALL OF sep_args MKAY
    (90) expr -> . ANY OF sep_args MKAY
    (91) expr -> . ALL OF args MKAY
    (92) expr -> . ANY OF args MKAY
    (93) expr -> . BOTH SAEM expr AN expr
    (94) expr -> . DIFFRINT expr AN expr
    (95) expr -> . SMOOSH sep_args MKAY
    (96) expr -> . SMOOSH args MKAY
    (97) expr -> . MAEK expr A type
    (98) expr -> . MAEK expr type
    (99) variable -> . ID
    (100) variable -> . IT
    (65) value -> . STRING
    (66) value -> . FLOAT
    (67) value -> . INTEGER
    (68) value -> . WIN
    (69) value -> . FAIL
    (70) value -> . DICT

    I               shift and go to state 88
    SIZE            shift and go to state 28
    ABSLUT          shift and go to state 29
    SUM             shift and go to state 31
    DIFF            shift and go to state 32
    PRODUKT         shift and go to state 33
    QUOSHUNT        shift and go to state 34
    MOD             shift and go to state 35
    BIGGR           shift and go to state 36
    SMALLR          shift and go to state 37
    BOTH            shift and go to state 38
    EITHER          shift and go to state 39
    WON             shift and go to state 40
    NOT             shift and go to state 41
    ALL             shift and go to state 42
    ANY             shift and go to state 43
    DIFFRINT        shift and go to state 44
    SMOOSH          shift and go to state 45
    MAEK            shift and go to state 46
    ID              shift and go to state 27
    IT              shift and go to state 56
    STRING          shift and go to state 57
    FLOAT           shift and go to state 6
    INTEGER         shift and go to state 58
    WIN             shift and go to state 59
    FAIL            shift and go to state 60
    DICT            shift and go to state 61

    expr                           shift and go to state 122
    variable                       shift and go to state 87
    value                          shift and go to state 30

state 82

    (85) expr -> BOTH OF . expr AN expr
    (40) expr -> . variable APOSTROPHE_Z variable
    (54) expr -> . I IZ ID YR sep_yr_args MKAY
    (55) expr -> . I IZ ID
    (56) expr -> . variable IZ ID YR sep_yr_args MKAY
    (57) expr -> . variable IZ ID
    (74) expr -> . SIZE OF expr
    (75) expr -> . ABSLUT OF expr
    (76) expr -> . value
    (77) expr -> . variable
    (78) expr -> . SUM OF expr AN expr
    (79) expr -> . DIFF OF expr AN expr
    (80) expr -> . PRODUKT OF expr AN expr
    (81) expr -> . QUOSHUNT OF expr AN expr
    (82) expr -> . MOD OF expr AN expr
    (83) expr -> . BIGGR OF expr AN expr
    (84) expr -> . SMALLR OF expr AN expr
    (85) expr -> . BOTH OF expr AN expr
    (86) expr -> . EITHER OF expr AN expr
    (87) expr -> . WON OF expr AN expr
    (88) expr -> . NOT expr
    (89) expr -> . ALL OF sep_args MKAY
    (90) expr -> . ANY OF sep_args MKAY
    (91) expr -> . ALL OF args MKAY
    (92) expr -> . ANY OF args MKAY
    (93) expr -> . BOTH SAEM expr AN expr
    (94) expr -> . DIFFRINT expr AN expr
    (95) expr -> . SMOOSH sep_args MKAY
    (96) expr -> . SMOOSH args MKAY
    (97) expr -> . MAEK expr A type
    (98) expr -> . MAEK expr type
    (99) variable -> . ID
    (100) variable -> . IT
    (65) value -> . STRING
    (66) value -> . FLOAT
    (67) value -> . INTEGER
    (68) value -> . WIN
    (69) value -> . FAIL
    (70) value -> . DICT

    I               shift and go to state 88
    SIZE            shift and go to state 28
    ABSLUT          shift and go to state 29
    SUM             shift and go to state 31
    DIFF            shift and go to state 32
    PRODUKT         shift and go to state 33
    QUOSHUNT        shift and go to state 34
    MOD             shift and go to state 35
    BIGGR           shift and go to state 36
    SMALLR          shift and go to state 37
    BOTH            shift and go to state 38
    EITHER          shift and go to state 39
    WON             shift and go to state 40
    NOT             shift and go to state 41
    ALL             shift and go to state 42
    ANY             shift and go to state 43
    DIFFRINT        shift and go to state 44
    SMOOSH          shift and go to state 45
    MAEK            shift and go to state 46
    ID              shift and go to state 27
    IT              shift and go to state 56
    STRING          shift and go to state 57
    FLOAT           shift and go to state 6
    INTEGER         shift and go to state 58
    WIN             shift and go to state 59
    FAIL            shift and go to state 60
    DICT            shift and go to state 61

    expr                           shift and go to state 123
    variable                       shift and go to state 87
    value                          shift and go to state 30

state 83

    (93) expr -> BOTH SAEM . expr AN expr
    (40) expr -> . variable APOSTROPHE_Z variable
    (54) expr -> . I IZ ID YR sep_yr_args MKAY
    (55) expr -> . I IZ ID
    (56) expr -> . variable IZ ID YR sep_yr_args MKAY
    (57) expr -> . variable IZ ID
    (74) expr -> . SIZE OF expr
    (75) expr -> . ABSLUT OF expr
    (76) expr -> . value
    (77) expr -> . variable
    (78) expr -> . SUM OF expr AN expr
    (79) expr -> . DIFF OF expr AN expr
    (80) expr -> . PRODUKT OF expr AN expr
    (81) expr -> . QUOSHUNT OF expr AN expr
    (82) expr -> . MOD OF expr AN expr
    (83) expr -> . BIGGR OF expr AN expr
    (84) expr -> . SMALLR OF expr AN expr
    (85) expr -> . BOTH OF expr AN expr
    (86) expr -> . EITHER OF expr AN expr
    (87) expr -> . WON OF expr AN expr
    (88) expr -> . NOT expr
    (89) expr -> . ALL OF sep_args MKAY
    (90) expr -> . ANY OF sep_args MKAY
    (91) expr -> . ALL OF args MKAY
    (92) expr -> . ANY OF args MKAY
    (93) expr -> . BOTH SAEM expr AN expr
    (94) expr -> . DIFFRINT expr AN expr
    (95) expr -> . SMOOSH sep_args MKAY
    (96) expr -> . SMOOSH args MKAY
    (97) expr -> . MAEK expr A type
    (98) expr -> . MAEK expr type
    (99) variable -> . ID
    (100) variable -> . IT
    (65) value -> . STRING
    (66) value -> . FLOAT
    (67) value -> . INTEGER
    (68) value -> . WIN
    (69) value -> . FAIL
    (70) value -> . DICT

    I               shift and go to state 88
    SIZE            shift and go to state 28
    ABSLUT          shift and go to state 29
    SUM             shift and go to state 31
    DIFF            shift and go to state 32
    PRODUKT         shift and go to state 33
    QUOSHUNT        shift and go to state 34
    MOD             shift and go to state 35
    BIGGR           shift and go to state 36
    SMALLR          shift and go to state 37
    BOTH            shift and go to state 38
    EITHER          shift and go to state 39
    WON             shift and go to state 40
    NOT             shift and go to state 41
    ALL             shift and go to state 42
    ANY             shift and go to state 43
    DIFFRINT        shift and go to state 44
    SMOOSH          shift and go to state 45
    MAEK            shift and go to state 46
    ID              shift and go to state 27
    IT              shift and go to state 56
    STRING          shift and go to state 57
    FLOAT           shift and go to state 6
    INTEGER         shift and go to state 58
    WIN             shift and go to state 59
    FAIL            shift and go to state 60
    DICT            shift and go to state 61

    expr                           shift and go to state 124
    variable                       shift and go to state 87
    value                          shift and go to state 30

state 84

    (86) expr -> EITHER OF . expr AN expr
    (40) expr -> . variable APOSTROPHE_Z variable
    (54) expr -> . I IZ ID YR sep_yr_args MKAY
    (55) expr -> . I IZ ID
    (56) expr -> . variable IZ ID YR sep_yr_args MKAY
    (57) expr -> . variable IZ ID
    (74) expr -> . SIZE OF expr
    (75) expr -> . ABSLUT OF expr
    (76) expr -> . value
    (77) expr -> . variable
    (78) expr -> . SUM OF expr AN expr
    (79) expr -> . DIFF OF expr AN expr
    (80) expr -> . PRODUKT OF expr AN expr
    (81) expr -> . QUOSHUNT OF expr AN expr
    (82) expr -> . MOD OF expr AN expr
    (83) expr -> . BIGGR OF expr AN expr
    (84) expr -> . SMALLR OF expr AN expr
    (85) expr -> . BOTH OF expr AN expr
    (86) expr -> . EITHER OF expr AN expr
    (87) expr -> . WON OF expr AN expr
    (88) expr -> . NOT expr
    (89) expr -> . ALL OF sep_args MKAY
    (90) expr -> . ANY OF sep_args MKAY
    (91) expr -> . ALL OF args MKAY
    (92) expr -> . ANY OF args MKAY
    (93) expr -> . BOTH SAEM expr AN expr
    (94) expr -> . DIFFRINT expr AN expr
    (95) expr -> . SMOOSH sep_args MKAY
    (96) expr -> . SMOOSH args MKAY
    (97) expr -> . MAEK expr A type
    (98) expr -> . MAEK expr type
    (99) variable -> . ID
    (100) variable -> . IT
    (65) value -> . STRING
    (66) value -> . FLOAT
    (67) value -> . INTEGER
    (68) value -> . WIN
    (69) value -> . FAIL
    (70) value -> . DICT

    I               shift and go to state 88
    SIZE            shift and go to state 28
    ABSLUT          shift and go to state 29
    SUM             shift and go to state 31
    DIFF            shift and go to state 32
    PRODUKT         shift and go to state 33
    QUOSHUNT        shift and go to state 34
    MOD             shift and go to state 35
    BIGGR           shift and go to state 36
    SMALLR          shift and go to state 37
    BOTH            shift and go to state 38
    EITHER          shift and go to state 39
    WON             shift and go to state 40
    NOT             shift and go to state 41
    ALL             shift and go to state 42
    ANY             shift and go to state 43
    DIFFRINT        shift and go to state 44
    SMOOSH          shift and go to state 45
    MAEK            shift and go to state 46
    ID              shift and go to state 27
    IT              shift and go to state 56
    STRING          shift and go to state 57
    FLOAT           shift and go to state 6
    INTEGER         shift and go to state 58
    WIN             shift and go to state 59
    FAIL            shift and go to state 60
    DICT            shift and go to state 61

    expr                           shift and go to state 125
    variable                       shift and go to state 87
    value                          shift and go to state 30

state 85

    (87) expr -> WON OF . expr AN expr
    (40) expr -> . variable APOSTROPHE_Z variable
    (54) expr -> . I IZ ID YR sep_yr_args MKAY
    (55) expr -> . I IZ ID
    (56) expr -> . variable IZ ID YR sep_yr_args MKAY
    (57) expr -> . variable IZ ID
    (74) expr -> . SIZE OF expr
    (75) expr -> . ABSLUT OF expr
    (76) expr -> . value
    (77) expr -> . variable
    (78) expr -> . SUM OF expr AN expr
    (79) expr -> . DIFF OF expr AN expr
    (80) expr -> . PRODUKT OF expr AN expr
    (81) expr -> . QUOSHUNT OF expr AN expr
    (82) expr -> . MOD OF expr AN expr
    (83) expr -> . BIGGR OF expr AN expr
    (84) expr -> . SMALLR OF expr AN expr
    (85) expr -> . BOTH OF expr AN expr
    (86) expr -> . EITHER OF expr AN expr
    (87) expr -> . WON OF expr AN expr
    (88) expr -> . NOT expr
    (89) expr -> . ALL OF sep_args MKAY
    (90) expr -> . ANY OF sep_args MKAY
    (91) expr -> . ALL OF args MKAY
    (92) expr -> . ANY OF args MKAY
    (93) expr -> . BOTH SAEM expr AN expr
    (94) expr -> . DIFFRINT expr AN expr
    (95) expr -> . SMOOSH sep_args MKAY
    (96) expr -> . SMOOSH args MKAY
    (97) expr -> . MAEK expr A type
    (98) expr -> . MAEK expr type
    (99) variable -> . ID
    (100) variable -> . IT
    (65) value -> . STRING
    (66) value -> . FLOAT
    (67) value -> . INTEGER
    (68) value -> . WIN
    (69) value -> . FAIL
    (70) value -> . DICT

    I               shift and go to state 88
    SIZE            shift and go to state 28
    ABSLUT          shift and go to state 29
    SUM             shift and go to state 31
    DIFF            shift and go to state 32
    PRODUKT         shift and go to state 33
    QUOSHUNT        shift and go to state 34
    MOD             shift and go to state 35
    BIGGR           shift and go to state 36
    SMALLR          shift and go to state 37
    BOTH            shift and go to state 38
    EITHER          shift and go to state 39
    WON             shift and go to state 40
    NOT             shift and go to state 41
    ALL             shift and go to state 42
    ANY             shift and go to state 43
    DIFFRINT        shift and go to state 44
    SMOOSH          shift and go to state 45
    MAEK            shift and go to state 46
    ID              shift and go to state 27
    IT              shift and go to state 56
    STRING          shift and go to state 57
    FLOAT           shift and go to state 6
    INTEGER         shift and go to state 58
    WIN             shift and go to state 59
    FAIL            shift and go to state 60
    DICT            shift and go to state 61

    expr                           shift and go to state 126
    variable                       shift and go to state 87
    value                          shift and go to state 30

state 86

    (88) expr -> NOT expr .

    NEWLINE         reduce using rule 88 (expr -> NOT expr .)
    COMMA           reduce using rule 88 (expr -> NOT expr .)
    AN              reduce using rule 88 (expr -> NOT expr .)
    MKAY            reduce using rule 88 (expr -> NOT expr .)
    I               reduce using rule 88 (expr -> NOT expr .)
    SIZE            reduce using rule 88 (expr -> NOT expr .)
    ABSLUT          reduce using rule 88 (expr -> NOT expr .)
    SUM             reduce using rule 88 (expr -> NOT expr .)
    DIFF            reduce using rule 88 (expr -> NOT expr .)
    PRODUKT         reduce using rule 88 (expr -> NOT expr .)
    QUOSHUNT        reduce using rule 88 (expr -> NOT expr .)
    MOD             reduce using rule 88 (expr -> NOT expr .)
    BIGGR           reduce using rule 88 (expr -> NOT expr .)
    SMALLR          reduce using rule 88 (expr -> NOT expr .)
    BOTH            reduce using rule 88 (expr -> NOT expr .)
    EITHER          reduce using rule 88 (expr -> NOT expr .)
    WON             reduce using rule 88 (expr -> NOT expr .)
    NOT             reduce using rule 88 (expr -> NOT expr .)
    ALL             reduce using rule 88 (expr -> NOT expr .)
    ANY             reduce using rule 88 (expr -> NOT expr .)
    DIFFRINT        reduce using rule 88 (expr -> NOT expr .)
    SMOOSH          reduce using rule 88 (expr -> NOT expr .)
    MAEK            reduce using rule 88 (expr -> NOT expr .)
    ID              reduce using rule 88 (expr -> NOT expr .)
    IT              reduce using rule 88 (expr -> NOT expr .)
    STRING          reduce using rule 88 (expr -> NOT expr .)
    FLOAT           reduce using rule 88 (expr -> NOT expr .)
    INTEGER         reduce using rule 88 (expr -> NOT expr .)
    WIN             reduce using rule 88 (expr -> NOT expr .)
    FAIL            reduce using rule 88 (expr -> NOT expr .)
    DICT            reduce using rule 88 (expr -> NOT expr .)
    A               reduce using rule 88 (expr -> NOT expr .)
    YARN            reduce using rule 88 (expr -> NOT expr .)
    NUMBR           reduce using rule 88 (expr -> NOT expr .)
    NUMBAR          reduce using rule 88 (expr -> NOT expr .)
    NOOB            reduce using rule 88 (expr -> NOT expr .)
    BUKKIT          reduce using rule 88 (expr -> NOT expr .)
    EXCLAMATION     reduce using rule 88 (expr -> NOT expr .)


state 87

    (40) expr -> variable . APOSTROPHE_Z variable
    (56) expr -> variable . IZ ID YR sep_yr_args MKAY
    (57) expr -> variable . IZ ID
    (77) expr -> variable .

    APOSTROPHE_Z    shift and go to state 66
    IZ              shift and go to state 67
    NEWLINE         reduce using rule 77 (expr -> variable .)
    COMMA           reduce using rule 77 (expr -> variable .)
    AN              reduce using rule 77 (expr -> variable .)
    MKAY            reduce using rule 77 (expr -> variable .)
    I               reduce using rule 77 (expr -> variable .)
    SIZE            reduce using rule 77 (expr -> variable .)
    ABSLUT          reduce using rule 77 (expr -> variable .)
    SUM             reduce using rule 77 (expr -> variable .)
    DIFF            reduce using rule 77 (expr -> variable .)
    PRODUKT         reduce using rule 77 (expr -> variable .)
    QUOSHUNT        reduce using rule 77 (expr -> variable .)
    MOD             reduce using rule 77 (expr -> variable .)
    BIGGR           reduce using rule 77 (expr -> variable .)
    SMALLR          reduce using rule 77 (expr -> variable .)
    BOTH            reduce using rule 77 (expr -> variable .)
    EITHER          reduce using rule 77 (expr -> variable .)
    WON             reduce using rule 77 (expr -> variable .)
    NOT             reduce using rule 77 (expr -> variable .)
    ALL             reduce using rule 77 (expr -> variable .)
    ANY             reduce using rule 77 (expr -> variable .)
    DIFFRINT        reduce using rule 77 (expr -> variable .)
    SMOOSH          reduce using rule 77 (expr -> variable .)
    MAEK            reduce using rule 77 (expr -> variable .)
    ID              reduce using rule 77 (expr -> variable .)
    IT              reduce using rule 77 (expr -> variable .)
    STRING          reduce using rule 77 (expr -> variable .)
    FLOAT           reduce using rule 77 (expr -> variable .)
    INTEGER         reduce using rule 77 (expr -> variable .)
    WIN             reduce using rule 77 (expr -> variable .)
    FAIL            reduce using rule 77 (expr -> variable .)
    DICT            reduce using rule 77 (expr -> variable .)
    A               reduce using rule 77 (expr -> variable .)
    YARN            reduce using rule 77 (expr -> variable .)
    NUMBR           reduce using rule 77 (expr -> variable .)
    NUMBAR          reduce using rule 77 (expr -> variable .)
    NOOB            reduce using rule 77 (expr -> variable .)
    BUKKIT          reduce using rule 77 (expr -> variable .)
    EXCLAMATION     reduce using rule 77 (expr -> variable .)


state 88

    (54) expr -> I . IZ ID YR sep_yr_args MKAY
    (55) expr -> I . IZ ID

    IZ              shift and go to state 71


state 89

    (89) expr -> ALL OF . sep_args MKAY
    (91) expr -> ALL OF . args MKAY
    (46) sep_args -> . sep_args AN expr
    (47) sep_args -> . expr
    (44) args -> . args expr
    (45) args -> . expr
    (40) expr -> . variable APOSTROPHE_Z variable
    (54) expr -> . I IZ ID YR sep_yr_args MKAY
    (55) expr -> . I IZ ID
    (56) expr -> . variable IZ ID YR sep_yr_args MKAY
    (57) expr -> . variable IZ ID
    (74) expr -> . SIZE OF expr
    (75) expr -> . ABSLUT OF expr
    (76) expr -> . value
    (77) expr -> . variable
    (78) expr -> . SUM OF expr AN expr
    (79) expr -> . DIFF OF expr AN expr
    (80) expr -> . PRODUKT OF expr AN expr
    (81) expr -> . QUOSHUNT OF expr AN expr
    (82) expr -> . MOD OF expr AN expr
    (83) expr -> . BIGGR OF expr AN expr
    (84) expr -> . SMALLR OF expr AN expr
    (85) expr -> . BOTH OF expr AN expr
    (86) expr -> . EITHER OF expr AN expr
    (87) expr -> . WON OF expr AN expr
    (88) expr -> . NOT expr
    (89) expr -> . ALL OF sep_args MKAY
    (90) expr -> . ANY OF sep_args MKAY
    (91) expr -> . ALL OF args MKAY
    (92) expr -> . ANY OF args MKAY
    (93) expr -> . BOTH SAEM expr AN expr
    (94) expr -> . DIFFRINT expr AN expr
    (95) expr -> . SMOOSH sep_args MKAY
    (96) expr -> . SMOOSH args MKAY
    (97) expr -> . MAEK expr A type
    (98) expr -> . MAEK expr type
    (99) variable -> . ID
    (100) variable -> . IT
    (65) value -> . STRING
    (66) value -> . FLOAT
    (67) value -> . INTEGER
    (68) value -> . WIN
    (69) value -> . FAIL
    (70) value -> . DICT

    I               shift and go to state 88
    SIZE            shift and go to state 28
    ABSLUT          shift and go to state 29
    SUM             shift and go to state 31
    DIFF            shift and go to state 32
    PRODUKT         shift and go to state 33
    QUOSHUNT        shift and go to state 34
    MOD             shift and go to state 35
    BIGGR           shift and go to state 36
    SMALLR          shift and go to state 37
    BOTH            shift and go to state 38
    EITHER          shift and go to state 39
    WON             shift and go to state 40
    NOT             shift and go to state 41
    ALL             shift and go to state 42
    ANY             shift and go to state 43
    DIFFRINT        shift and go to state 44
    SMOOSH          shift and go to state 45
    MAEK            shift and go to state 46
    ID              shift and go to state 27
    IT              shift and go to state 56
    STRING          shift and go to state 57
    FLOAT           shift and go to state 6
    INTEGER         shift and go to state 58
    WIN             shift and go to state 59
    FAIL            shift and go to state 60
    DICT            shift and go to state 61

    sep_args                       shift and go to state 127
    args                           shift and go to state 128
    expr                           shift and go to state 94
    variable                       shift and go to state 87
    value                          shift and go to state 30

state 90

    (90) expr -> ANY OF . sep_args MKAY
    (92) expr -> ANY OF . args MKAY
    (46) sep_args -> . sep_args AN expr
    (47) sep_args -> . expr
    (44) args -> . args expr
    (45) args -> . expr
    (40) expr -> . variable APOSTROPHE_Z variable
    (54) expr -> . I IZ ID YR sep_yr_args MKAY
    (55) expr -> . I IZ ID
    (56) expr -> . variable IZ ID YR sep_yr_args MKAY
    (57) expr -> . variable IZ ID
    (74) expr -> . SIZE OF expr
    (75) expr -> . ABSLUT OF expr
    (76) expr -> . value
    (77) expr -> . variable
    (78) expr -> . SUM OF expr AN expr
    (79) expr -> . DIFF OF expr AN expr
    (80) expr -> . PRODUKT OF expr AN expr
    (81) expr -> . QUOSHUNT OF expr AN expr
    (82) expr -> . MOD OF expr AN expr
    (83) expr -> . BIGGR OF expr AN expr
    (84) expr -> . SMALLR OF expr AN expr
    (85) expr -> . BOTH OF expr AN expr
    (86) expr -> . EITHER OF expr AN expr
    (87) expr -> . WON OF expr AN expr
    (88) expr -> . NOT expr
    (89) expr -> . ALL OF sep_args MKAY
    (90) expr -> . ANY OF sep_args MKAY
    (91) expr -> . ALL OF args MKAY
    (92) expr -> . ANY OF args MKAY
    (93) expr -> . BOTH SAEM expr AN expr
    (94) expr -> . DIFFRINT expr AN expr
    (95) expr -> . SMOOSH sep_args MKAY
    (96) expr -> . SMOOSH args MKAY
    (97) expr -> . MAEK expr A type
    (98) expr -> . MAEK expr type
    (99) variable -> . ID
    (100) variable -> . IT
    (65) value -> . STRING
    (66) value -> . FLOAT
    (67) value -> . INTEGER
    (68) value -> . WIN
    (69) value -> . FAIL
    (70) value -> . DICT

    I               shift and go to state 88
    SIZE            shift and go to state 28
    ABSLUT          shift and go to state 29
    SUM             shift and go to state 31
    DIFF            shift and go to state 32
    PRODUKT         shift and go to state 33
    QUOSHUNT        shift and go to state 34
    MOD             shift and go to state 35
    BIGGR           shift and go to state 36
    SMALLR          shift and go to state 37
    BOTH            shift and go to state 38
    EITHER          shift and go to state 39
    WON             shift and go to state 40
    NOT             shift and go to state 41
    ALL             shift and go to state 42
    ANY             shift and go to state 43
    DIFFRINT        shift and go to state 44
    SMOOSH          shift and go to state 45
    MAEK            shift and go to state 46
    ID              shift and go to state 27
    IT              shift and go to state 56
    STRING          shift and go to state 57
    FLOAT           shift and go to state 6
    INTEGER         shift and go to state 58
    WIN             shift and go to state 59
    FAIL            shift and go to state 60
    DICT            shift and go to state 61

    sep_args                       shift and go to state 129
    args                           shift and go to state 130
    expr                           shift and go to state 94
    variable                       shift and go to state 87
    value                          shift and go to state 30

state 91

    (94) expr -> DIFFRINT expr . AN expr

    AN              shift and go to state 131


state 92

    (95) expr -> SMOOSH sep_args . MKAY
    (46) sep_args -> sep_args . AN expr

    MKAY            shift and go to state 132
    AN              shift and go to state 133


state 93

    (96) expr -> SMOOSH args . MKAY
    (44) args -> args . expr
    (40) expr -> . variable APOSTROPHE_Z variable
    (54) expr -> . I IZ ID YR sep_yr_args MKAY
    (55) expr -> . I IZ ID
    (56) expr -> . variable IZ ID YR sep_yr_args MKAY
    (57) expr -> . variable IZ ID
    (74) expr -> . SIZE OF expr
    (75) expr -> . ABSLUT OF expr
    (76) expr -> . value
    (77) expr -> . variable
    (78) expr -> . SUM OF expr AN expr
    (79) expr -> . DIFF OF expr AN expr
    (80) expr -> . PRODUKT OF expr AN expr
    (81) expr -> . QUOSHUNT OF expr AN expr
    (82) expr -> . MOD OF expr AN expr
    (83) expr -> . BIGGR OF expr AN expr
    (84) expr -> . SMALLR OF expr AN expr
    (85) expr -> . BOTH OF expr AN expr
    (86) expr -> . EITHER OF expr AN expr
    (87) expr -> . WON OF expr AN expr
    (88) expr -> . NOT expr
    (89) expr -> . ALL OF sep_args MKAY
    (90) expr -> . ANY OF sep_args MKAY
    (91) expr -> . ALL OF args MKAY
    (92) expr -> . ANY OF args MKAY
    (93) expr -> . BOTH SAEM expr AN expr
    (94) expr -> . DIFFRINT expr AN expr
    (95) expr -> . SMOOSH sep_args MKAY
    (96) expr -> . SMOOSH args MKAY
    (97) expr -> . MAEK expr A type
    (98) expr -> . MAEK expr type
    (99) variable -> . ID
    (100) variable -> . IT
    (65) value -> . STRING
    (66) value -> . FLOAT
    (67) value -> . INTEGER
    (68) value -> . WIN
    (69) value -> . FAIL
    (70) value -> . DICT

    MKAY            shift and go to state 134
    I               shift and go to state 88
    SIZE            shift and go to state 28
    ABSLUT          shift and go to state 29
    SUM             shift and go to state 31
    DIFF            shift and go to state 32
    PRODUKT         shift and go to state 33
    QUOSHUNT        shift and go to state 34
    MOD             shift and go to state 35
    BIGGR           shift and go to state 36
    SMALLR          shift and go to state 37
    BOTH            shift and go to state 38
    EITHER          shift and go to state 39
    WON             shift and go to state 40
    NOT             shift and go to state 41
    ALL             shift and go to state 42
    ANY             shift and go to state 43
    DIFFRINT        shift and go to state 44
    SMOOSH          shift and go to state 45
    MAEK            shift and go to state 46
    ID              shift and go to state 27
    IT              shift and go to state 56
    STRING          shift and go to state 57
    FLOAT           shift and go to state 6
    INTEGER         shift and go to state 58
    WIN             shift and go to state 59
    FAIL            shift and go to state 60
    DICT            shift and go to state 61

    expr                           shift and go to state 135
    variable                       shift and go to state 87
    value                          shift and go to state 30

state 94

    (47) sep_args -> expr .
    (45) args -> expr .

  ! reduce/reduce conflict for MKAY resolved using rule 45 (args -> expr .)
    AN              reduce using rule 47 (sep_args -> expr .)
    MKAY            reduce using rule 45 (args -> expr .)
    I               reduce using rule 45 (args -> expr .)
    SIZE            reduce using rule 45 (args -> expr .)
    ABSLUT          reduce using rule 45 (args -> expr .)
    SUM             reduce using rule 45 (args -> expr .)
    DIFF            reduce using rule 45 (args -> expr .)
    PRODUKT         reduce using rule 45 (args -> expr .)
    QUOSHUNT        reduce using rule 45 (args -> expr .)
    MOD             reduce using rule 45 (args -> expr .)
    BIGGR           reduce using rule 45 (args -> expr .)
    SMALLR          reduce using rule 45 (args -> expr .)
    BOTH            reduce using rule 45 (args -> expr .)
    EITHER          reduce using rule 45 (args -> expr .)
    WON             reduce using rule 45 (args -> expr .)
    NOT             reduce using rule 45 (args -> expr .)
    ALL             reduce using rule 45 (args -> expr .)
    ANY             reduce using rule 45 (args -> expr .)
    DIFFRINT        reduce using rule 45 (args -> expr .)
    SMOOSH          reduce using rule 45 (args -> expr .)
    MAEK            reduce using rule 45 (args -> expr .)
    ID              reduce using rule 45 (args -> expr .)
    IT              reduce using rule 45 (args -> expr .)
    STRING          reduce using rule 45 (args -> expr .)
    FLOAT           reduce using rule 45 (args -> expr .)
    INTEGER         reduce using rule 45 (args -> expr .)
    WIN             reduce using rule 45 (args -> expr .)
    FAIL            reduce using rule 45 (args -> expr .)
    DICT            reduce using rule 45 (args -> expr .)

  ! MKAY            [ reduce using rule 47 (sep_args -> expr .) ]


state 95

    (97) expr -> MAEK expr . A type
    (98) expr -> MAEK expr . type
    (60) type -> . YARN
    (61) type -> . NUMBR
    (62) type -> . NUMBAR
    (63) type -> . NOOB
    (64) type -> . BUKKIT

    A               shift and go to state 136
    YARN            shift and go to state 138
    NUMBR           shift and go to state 139
    NUMBAR          shift and go to state 140
    NOOB            shift and go to state 141
    BUKKIT          shift and go to state 142

    type                           shift and go to state 137

state 96

    (71) call -> VISIBLE args .
    (72) call -> VISIBLE args . EXCLAMATION
    (44) args -> args . expr
    (40) expr -> . variable APOSTROPHE_Z variable
    (54) expr -> . I IZ ID YR sep_yr_args MKAY
    (55) expr -> . I IZ ID
    (56) expr -> . variable IZ ID YR sep_yr_args MKAY
    (57) expr -> . variable IZ ID
    (74) expr -> . SIZE OF expr
    (75) expr -> . ABSLUT OF expr
    (76) expr -> . value
    (77) expr -> . variable
    (78) expr -> . SUM OF expr AN expr
    (79) expr -> . DIFF OF expr AN expr
    (80) expr -> . PRODUKT OF expr AN expr
    (81) expr -> . QUOSHUNT OF expr AN expr
    (82) expr -> . MOD OF expr AN expr
    (83) expr -> . BIGGR OF expr AN expr
    (84) expr -> . SMALLR OF expr AN expr
    (85) expr -> . BOTH OF expr AN expr
    (86) expr -> . EITHER OF expr AN expr
    (87) expr -> . WON OF expr AN expr
    (88) expr -> . NOT expr
    (89) expr -> . ALL OF sep_args MKAY
    (90) expr -> . ANY OF sep_args MKAY
    (91) expr -> . ALL OF args MKAY
    (92) expr -> . ANY OF args MKAY
    (93) expr -> . BOTH SAEM expr AN expr
    (94) expr -> . DIFFRINT expr AN expr
    (95) expr -> . SMOOSH sep_args MKAY
    (96) expr -> . SMOOSH args MKAY
    (97) expr -> . MAEK expr A type
    (98) expr -> . MAEK expr type
    (99) variable -> . ID
    (100) variable -> . IT
    (65) value -> . STRING
    (66) value -> . FLOAT
    (67) value -> . INTEGER
    (68) value -> . WIN
    (69) value -> . FAIL
    (70) value -> . DICT

    NEWLINE         reduce using rule 71 (call -> VISIBLE args .)
    COMMA           reduce using rule 71 (call -> VISIBLE args .)
    EXCLAMATION     shift and go to state 143
    I               shift and go to state 88
    SIZE            shift and go to state 28
    ABSLUT          shift and go to state 29
    SUM             shift and go to state 31
    DIFF            shift and go to state 32
    PRODUKT         shift and go to state 33
    QUOSHUNT        shift and go to state 34
    MOD             shift and go to state 35
    BIGGR           shift and go to state 36
    SMALLR          shift and go to state 37
    BOTH            shift and go to state 38
    EITHER          shift and go to state 39
    WON             shift and go to state 40
    NOT             shift and go to state 41
    ALL             shift and go to state 42
    ANY             shift and go to state 43
    DIFFRINT        shift and go to state 44
    SMOOSH          shift and go to state 45
    MAEK            shift and go to state 46
    ID              shift and go to state 27
    IT              shift and go to state 56
    STRING          shift and go to state 57
    FLOAT           shift and go to state 6
    INTEGER         shift and go to state 58
    WIN             shift and go to state 59
    FAIL            shift and go to state 60
    DICT            shift and go to state 61

    expr                           shift and go to state 135
    variable                       shift and go to state 87
    value                          shift and go to state 30

state 97

    (45) args -> expr .

    EXCLAMATION     reduce using rule 45 (args -> expr .)
    I               reduce using rule 45 (args -> expr .)
    SIZE            reduce using rule 45 (args -> expr .)
    ABSLUT          reduce using rule 45 (args -> expr .)
    SUM             reduce using rule 45 (args -> expr .)
    DIFF            reduce using rule 45 (args -> expr .)
    PRODUKT         reduce using rule 45 (args -> expr .)
    QUOSHUNT        reduce using rule 45 (args -> expr .)
    MOD             reduce using rule 45 (args -> expr .)
    BIGGR           reduce using rule 45 (args -> expr .)
    SMALLR          reduce using rule 45 (args -> expr .)
    BOTH            reduce using rule 45 (args -> expr .)
    EITHER          reduce using rule 45 (args -> expr .)
    WON             reduce using rule 45 (args -> expr .)
    NOT             reduce using rule 45 (args -> expr .)
    ALL             reduce using rule 45 (args -> expr .)
    ANY             reduce using rule 45 (args -> expr .)
    DIFFRINT        reduce using rule 45 (args -> expr .)
    SMOOSH          reduce using rule 45 (args -> expr .)
    MAEK            reduce using rule 45 (args -> expr .)
    ID              reduce using rule 45 (args -> expr .)
    IT              reduce using rule 45 (args -> expr .)
    STRING          reduce using rule 45 (args -> expr .)
    FLOAT           reduce using rule 45 (args -> expr .)
    INTEGER         reduce using rule 45 (args -> expr .)
    WIN             reduce using rule 45 (args -> expr .)
    FAIL            reduce using rule 45 (args -> expr .)
    DICT            reduce using rule 45 (args -> expr .)
    NEWLINE         reduce using rule 45 (args -> expr .)
    COMMA           reduce using rule 45 (args -> expr .)


state 98

    (73) call -> GIMMEH variable .

    NEWLINE         reduce using rule 73 (call -> GIMMEH variable .)
    COMMA           reduce using rule 73 (call -> GIMMEH variable .)


state 99

    (37) declare_bukkit_block -> O HAI . IM variable NEWLINE statements KTHX

    IM              shift and go to state 144


state 100

    (28) if_else -> O RLY . QUESTION NEWLINE YA RLY NEWLINE statements NO WAI NEWLINE statements OIC
    (29) if_else -> O RLY . QUESTION NEWLINE YA RLY NEWLINE statements OIC
    (30) if_else -> O RLY . QUESTION NEWLINE YA RLY NEWLINE statements elifs NO WAI NEWLINE statements OIC

    QUESTION        shift and go to state 145


state 101

    (21) loop -> IM IN . YR variable operation YR variable condition expr NEWLINE statements IM OUTTA YR variable

    YR              shift and go to state 146


state 102

    (50) bukkit_function -> HOW IZ . variable ID YR sep_yr_args NEWLINE statements IF U SAY SO
    (51) bukkit_function -> HOW IZ . variable ID NEWLINE statements IF U SAY SO
    (52) function -> HOW IZ . I ID YR sep_yr_args NEWLINE statements IF U SAY SO
    (53) function -> HOW IZ . I ID NEWLINE statements IF U SAY SO
    (99) variable -> . ID
    (100) variable -> . IT

    I               shift and go to state 148
    ID              shift and go to state 27
    IT              shift and go to state 56

    variable                       shift and go to state 147

state 103

    (58) return -> FOUND YR . expr
    (40) expr -> . variable APOSTROPHE_Z variable
    (54) expr -> . I IZ ID YR sep_yr_args MKAY
    (55) expr -> . I IZ ID
    (56) expr -> . variable IZ ID YR sep_yr_args MKAY
    (57) expr -> . variable IZ ID
    (74) expr -> . SIZE OF expr
    (75) expr -> . ABSLUT OF expr
    (76) expr -> . value
    (77) expr -> . variable
    (78) expr -> . SUM OF expr AN expr
    (79) expr -> . DIFF OF expr AN expr
    (80) expr -> . PRODUKT OF expr AN expr
    (81) expr -> . QUOSHUNT OF expr AN expr
    (82) expr -> . MOD OF expr AN expr
    (83) expr -> . BIGGR OF expr AN expr
    (84) expr -> . SMALLR OF expr AN expr
    (85) expr -> . BOTH OF expr AN expr
    (86) expr -> . EITHER OF expr AN expr
    (87) expr -> . WON OF expr AN expr
    (88) expr -> . NOT expr
    (89) expr -> . ALL OF sep_args MKAY
    (90) expr -> . ANY OF sep_args MKAY
    (91) expr -> . ALL OF args MKAY
    (92) expr -> . ANY OF args MKAY
    (93) expr -> . BOTH SAEM expr AN expr
    (94) expr -> . DIFFRINT expr AN expr
    (95) expr -> . SMOOSH sep_args MKAY
    (96) expr -> . SMOOSH args MKAY
    (97) expr -> . MAEK expr A type
    (98) expr -> . MAEK expr type
    (99) variable -> . ID
    (100) variable -> . IT
    (65) value -> . STRING
    (66) value -> . FLOAT
    (67) value -> . INTEGER
    (68) value -> . WIN
    (69) value -> . FAIL
    (70) value -> . DICT

    I               shift and go to state 88
    SIZE            shift and go to state 28
    ABSLUT          shift and go to state 29
    SUM             shift and go to state 31
    DIFF            shift and go to state 32
    PRODUKT         shift and go to state 33
    QUOSHUNT        shift and go to state 34
    MOD             shift and go to state 35
    BIGGR           shift and go to state 36
    SMALLR          shift and go to state 37
    BOTH            shift and go to state 38
    EITHER          shift and go to state 39
    WON             shift and go to state 40
    NOT             shift and go to state 41
    ALL             shift and go to state 42
    ANY             shift and go to state 43
    DIFFRINT        shift and go to state 44
    SMOOSH          shift and go to state 45
    MAEK            shift and go to state 46
    ID              shift and go to state 27
    IT              shift and go to state 56
    STRING          shift and go to state 57
    FLOAT           shift and go to state 6
    INTEGER         shift and go to state 58
    WIN             shift and go to state 59
    FAIL            shift and go to state 60
    DICT            shift and go to state 61

    expr                           shift and go to state 149
    variable                       shift and go to state 87
    value                          shift and go to state 30

state 104

    (27) export -> YOU CAN . HAS sep_args MKAY

    HAS             shift and go to state 150


state 105

    (26) import -> CAN HAS . PATH QUESTION

    PATH            shift and go to state 151


state 106

    (40) expr -> variable APOSTROPHE_Z variable .

    NEWLINE         reduce using rule 40 (expr -> variable APOSTROPHE_Z variable .)
    COMMA           reduce using rule 40 (expr -> variable APOSTROPHE_Z variable .)
    AN              reduce using rule 40 (expr -> variable APOSTROPHE_Z variable .)
    MKAY            reduce using rule 40 (expr -> variable APOSTROPHE_Z variable .)
    I               reduce using rule 40 (expr -> variable APOSTROPHE_Z variable .)
    SIZE            reduce using rule 40 (expr -> variable APOSTROPHE_Z variable .)
    ABSLUT          reduce using rule 40 (expr -> variable APOSTROPHE_Z variable .)
    SUM             reduce using rule 40 (expr -> variable APOSTROPHE_Z variable .)
    DIFF            reduce using rule 40 (expr -> variable APOSTROPHE_Z variable .)
    PRODUKT         reduce using rule 40 (expr -> variable APOSTROPHE_Z variable .)
    QUOSHUNT        reduce using rule 40 (expr -> variable APOSTROPHE_Z variable .)
    MOD             reduce using rule 40 (expr -> variable APOSTROPHE_Z variable .)
    BIGGR           reduce using rule 40 (expr -> variable APOSTROPHE_Z variable .)
    SMALLR          reduce using rule 40 (expr -> variable APOSTROPHE_Z variable .)
    BOTH            reduce using rule 40 (expr -> variable APOSTROPHE_Z variable .)
    EITHER          reduce using rule 40 (expr -> variable APOSTROPHE_Z variable .)
    WON             reduce using rule 40 (expr -> variable APOSTROPHE_Z variable .)
    NOT             reduce using rule 40 (expr -> variable APOSTROPHE_Z variable .)
    ALL             reduce using rule 40 (expr -> variable APOSTROPHE_Z variable .)
    ANY             reduce using rule 40 (expr -> variable APOSTROPHE_Z variable .)
    DIFFRINT        reduce using rule 40 (expr -> variable APOSTROPHE_Z variable .)
    SMOOSH          reduce using rule 40 (expr -> variable APOSTROPHE_Z variable .)
    MAEK            reduce using rule 40 (expr -> variable APOSTROPHE_Z variable .)
    ID              reduce using rule 40 (expr -> variable APOSTROPHE_Z variable .)
    IT              reduce using rule 40 (expr -> variable APOSTROPHE_Z variable .)
    STRING          reduce using rule 40 (expr -> variable APOSTROPHE_Z variable .)
    FLOAT           reduce using rule 40 (expr -> variable APOSTROPHE_Z variable .)
    INTEGER         reduce using rule 40 (expr -> variable APOSTROPHE_Z variable .)
    WIN             reduce using rule 40 (expr -> variable APOSTROPHE_Z variable .)
    FAIL            reduce using rule 40 (expr -> variable APOSTROPHE_Z variable .)
    DICT            reduce using rule 40 (expr -> variable APOSTROPHE_Z variable .)
    A               reduce using rule 40 (expr -> variable APOSTROPHE_Z variable .)
    YARN            reduce using rule 40 (expr -> variable APOSTROPHE_Z variable .)
    NUMBR           reduce using rule 40 (expr -> variable APOSTROPHE_Z variable .)
    NUMBAR          reduce using rule 40 (expr -> variable APOSTROPHE_Z variable .)
    NOOB            reduce using rule 40 (expr -> variable APOSTROPHE_Z variable .)
    BUKKIT          reduce using rule 40 (expr -> variable APOSTROPHE_Z variable .)
    EXCLAMATION     reduce using rule 40 (expr -> variable APOSTROPHE_Z variable .)


state 107

    (56) expr -> variable IZ ID . YR sep_yr_args MKAY
    (57) expr -> variable IZ ID .

    YR              shift and go to state 152
    NEWLINE         reduce using rule 57 (expr -> variable IZ ID .)
    COMMA           reduce using rule 57 (expr -> variable IZ ID .)
    AN              reduce using rule 57 (expr -> variable IZ ID .)
    MKAY            reduce using rule 57 (expr -> variable IZ ID .)
    I               reduce using rule 57 (expr -> variable IZ ID .)
    SIZE            reduce using rule 57 (expr -> variable IZ ID .)
    ABSLUT          reduce using rule 57 (expr -> variable IZ ID .)
    SUM             reduce using rule 57 (expr -> variable IZ ID .)
    DIFF            reduce using rule 57 (expr -> variable IZ ID .)
    PRODUKT         reduce using rule 57 (expr -> variable IZ ID .)
    QUOSHUNT        reduce using rule 57 (expr -> variable IZ ID .)
    MOD             reduce using rule 57 (expr -> variable IZ ID .)
    BIGGR           reduce using rule 57 (expr -> variable IZ ID .)
    SMALLR          reduce using rule 57 (expr -> variable IZ ID .)
    BOTH            reduce using rule 57 (expr -> variable IZ ID .)
    EITHER          reduce using rule 57 (expr -> variable IZ ID .)
    WON             reduce using rule 57 (expr -> variable IZ ID .)
    NOT             reduce using rule 57 (expr -> variable IZ ID .)
    ALL             reduce using rule 57 (expr -> variable IZ ID .)
    ANY             reduce using rule 57 (expr -> variable IZ ID .)
    DIFFRINT        reduce using rule 57 (expr -> variable IZ ID .)
    SMOOSH          reduce using rule 57 (expr -> variable IZ ID .)
    MAEK            reduce using rule 57 (expr -> variable IZ ID .)
    ID              reduce using rule 57 (expr -> variable IZ ID .)
    IT              reduce using rule 57 (expr -> variable IZ ID .)
    STRING          reduce using rule 57 (expr -> variable IZ ID .)
    FLOAT           reduce using rule 57 (expr -> variable IZ ID .)
    INTEGER         reduce using rule 57 (expr -> variable IZ ID .)
    WIN             reduce using rule 57 (expr -> variable IZ ID .)
    FAIL            reduce using rule 57 (expr -> variable IZ ID .)
    DICT            reduce using rule 57 (expr -> variable IZ ID .)
    A               reduce using rule 57 (expr -> variable IZ ID .)
    YARN            reduce using rule 57 (expr -> variable IZ ID .)
    NUMBR           reduce using rule 57 (expr -> variable IZ ID .)
    NUMBAR          reduce using rule 57 (expr -> variable IZ ID .)
    NOOB            reduce using rule 57 (expr -> variable IZ ID .)
    BUKKIT          reduce using rule 57 (expr -> variable IZ ID .)
    EXCLAMATION     reduce using rule 57 (expr -> variable IZ ID .)


state 108

    (41) cast -> variable IS NOW . A type

    A               shift and go to state 153


state 109

    (42) cast -> variable R MAEK . variable A type
    (43) cast -> variable R MAEK . variable type
    (97) expr -> MAEK . expr A type
    (98) expr -> MAEK . expr type
    (99) variable -> . ID
    (100) variable -> . IT
    (40) expr -> . variable APOSTROPHE_Z variable
    (54) expr -> . I IZ ID YR sep_yr_args MKAY
    (55) expr -> . I IZ ID
    (56) expr -> . variable IZ ID YR sep_yr_args MKAY
    (57) expr -> . variable IZ ID
    (74) expr -> . SIZE OF expr
    (75) expr -> . ABSLUT OF expr
    (76) expr -> . value
    (77) expr -> . variable
    (78) expr -> . SUM OF expr AN expr
    (79) expr -> . DIFF OF expr AN expr
    (80) expr -> . PRODUKT OF expr AN expr
    (81) expr -> . QUOSHUNT OF expr AN expr
    (82) expr -> . MOD OF expr AN expr
    (83) expr -> . BIGGR OF expr AN expr
    (84) expr -> . SMALLR OF expr AN expr
    (85) expr -> . BOTH OF expr AN expr
    (86) expr -> . EITHER OF expr AN expr
    (87) expr -> . WON OF expr AN expr
    (88) expr -> . NOT expr
    (89) expr -> . ALL OF sep_args MKAY
    (90) expr -> . ANY OF sep_args MKAY
    (91) expr -> . ALL OF args MKAY
    (92) expr -> . ANY OF args MKAY
    (93) expr -> . BOTH SAEM expr AN expr
    (94) expr -> . DIFFRINT expr AN expr
    (95) expr -> . SMOOSH sep_args MKAY
    (96) expr -> . SMOOSH args MKAY
    (97) expr -> . MAEK expr A type
    (98) expr -> . MAEK expr type
    (65) value -> . STRING
    (66) value -> . FLOAT
    (67) value -> . INTEGER
    (68) value -> . WIN
    (69) value -> . FAIL
    (70) value -> . DICT

    ID              shift and go to state 27
    IT              shift and go to state 56
    I               shift and go to state 88
    SIZE            shift and go to state 28
    ABSLUT          shift and go to state 29
    SUM             shift and go to state 31
    DIFF            shift and go to state 32
    PRODUKT         shift and go to state 33
    QUOSHUNT        shift and go to state 34
    MOD             shift and go to state 35
    BIGGR           shift and go to state 36
    SMALLR          shift and go to state 37
    BOTH            shift and go to state 38
    EITHER          shift and go to state 39
    WON             shift and go to state 40
    NOT             shift and go to state 41
    ALL             shift and go to state 42
    ANY             shift and go to state 43
    DIFFRINT        shift and go to state 44
    SMOOSH          shift and go to state 45
    MAEK            shift and go to state 46
    STRING          shift and go to state 57
    FLOAT           shift and go to state 6
    INTEGER         shift and go to state 58
    WIN             shift and go to state 59
    FAIL            shift and go to state 60
    DICT            shift and go to state 61

    variable                       shift and go to state 154
    expr                           shift and go to state 95
    value                          shift and go to state 30

state 110

    (39) assign -> variable R expr .

    NEWLINE         reduce using rule 39 (assign -> variable R expr .)
    COMMA           reduce using rule 39 (assign -> variable R expr .)


state 111

    (38) assign_bukkit -> variable HAS A . variable ITZ expr
    (99) variable -> . ID
    (100) variable -> . IT

    ID              shift and go to state 27
    IT              shift and go to state 56

    variable                       shift and go to state 155

state 112

    (54) expr -> I IZ ID . YR sep_yr_args MKAY
    (55) expr -> I IZ ID .

    YR              shift and go to state 156
    NEWLINE         reduce using rule 55 (expr -> I IZ ID .)
    COMMA           reduce using rule 55 (expr -> I IZ ID .)
    AN              reduce using rule 55 (expr -> I IZ ID .)
    MKAY            reduce using rule 55 (expr -> I IZ ID .)
    I               reduce using rule 55 (expr -> I IZ ID .)
    SIZE            reduce using rule 55 (expr -> I IZ ID .)
    ABSLUT          reduce using rule 55 (expr -> I IZ ID .)
    SUM             reduce using rule 55 (expr -> I IZ ID .)
    DIFF            reduce using rule 55 (expr -> I IZ ID .)
    PRODUKT         reduce using rule 55 (expr -> I IZ ID .)
    QUOSHUNT        reduce using rule 55 (expr -> I IZ ID .)
    MOD             reduce using rule 55 (expr -> I IZ ID .)
    BIGGR           reduce using rule 55 (expr -> I IZ ID .)
    SMALLR          reduce using rule 55 (expr -> I IZ ID .)
    BOTH            reduce using rule 55 (expr -> I IZ ID .)
    EITHER          reduce using rule 55 (expr -> I IZ ID .)
    WON             reduce using rule 55 (expr -> I IZ ID .)
    NOT             reduce using rule 55 (expr -> I IZ ID .)
    ALL             reduce using rule 55 (expr -> I IZ ID .)
    ANY             reduce using rule 55 (expr -> I IZ ID .)
    DIFFRINT        reduce using rule 55 (expr -> I IZ ID .)
    SMOOSH          reduce using rule 55 (expr -> I IZ ID .)
    MAEK            reduce using rule 55 (expr -> I IZ ID .)
    ID              reduce using rule 55 (expr -> I IZ ID .)
    IT              reduce using rule 55 (expr -> I IZ ID .)
    STRING          reduce using rule 55 (expr -> I IZ ID .)
    FLOAT           reduce using rule 55 (expr -> I IZ ID .)
    INTEGER         reduce using rule 55 (expr -> I IZ ID .)
    WIN             reduce using rule 55 (expr -> I IZ ID .)
    FAIL            reduce using rule 55 (expr -> I IZ ID .)
    DICT            reduce using rule 55 (expr -> I IZ ID .)
    A               reduce using rule 55 (expr -> I IZ ID .)
    YARN            reduce using rule 55 (expr -> I IZ ID .)
    NUMBR           reduce using rule 55 (expr -> I IZ ID .)
    NUMBAR          reduce using rule 55 (expr -> I IZ ID .)
    NOOB            reduce using rule 55 (expr -> I IZ ID .)
    BUKKIT          reduce using rule 55 (expr -> I IZ ID .)
    EXCLAMATION     reduce using rule 55 (expr -> I IZ ID .)


state 113

    (34) decl -> I HAS A . variable
    (35) decl -> I HAS A . variable ITZ expr
    (36) decl -> I HAS A . variable ITZ A type
    (99) variable -> . ID
    (100) variable -> . IT

    ID              shift and go to state 27
    IT              shift and go to state 56

    variable                       shift and go to state 157

state 114

    (74) expr -> SIZE OF expr .

    NEWLINE         reduce using rule 74 (expr -> SIZE OF expr .)
    COMMA           reduce using rule 74 (expr -> SIZE OF expr .)
    AN              reduce using rule 74 (expr -> SIZE OF expr .)
    MKAY            reduce using rule 74 (expr -> SIZE OF expr .)
    I               reduce using rule 74 (expr -> SIZE OF expr .)
    SIZE            reduce using rule 74 (expr -> SIZE OF expr .)
    ABSLUT          reduce using rule 74 (expr -> SIZE OF expr .)
    SUM             reduce using rule 74 (expr -> SIZE OF expr .)
    DIFF            reduce using rule 74 (expr -> SIZE OF expr .)
    PRODUKT         reduce using rule 74 (expr -> SIZE OF expr .)
    QUOSHUNT        reduce using rule 74 (expr -> SIZE OF expr .)
    MOD             reduce using rule 74 (expr -> SIZE OF expr .)
    BIGGR           reduce using rule 74 (expr -> SIZE OF expr .)
    SMALLR          reduce using rule 74 (expr -> SIZE OF expr .)
    BOTH            reduce using rule 74 (expr -> SIZE OF expr .)
    EITHER          reduce using rule 74 (expr -> SIZE OF expr .)
    WON             reduce using rule 74 (expr -> SIZE OF expr .)
    NOT             reduce using rule 74 (expr -> SIZE OF expr .)
    ALL             reduce using rule 74 (expr -> SIZE OF expr .)
    ANY             reduce using rule 74 (expr -> SIZE OF expr .)
    DIFFRINT        reduce using rule 74 (expr -> SIZE OF expr .)
    SMOOSH          reduce using rule 74 (expr -> SIZE OF expr .)
    MAEK            reduce using rule 74 (expr -> SIZE OF expr .)
    ID              reduce using rule 74 (expr -> SIZE OF expr .)
    IT              reduce using rule 74 (expr -> SIZE OF expr .)
    STRING          reduce using rule 74 (expr -> SIZE OF expr .)
    FLOAT           reduce using rule 74 (expr -> SIZE OF expr .)
    INTEGER         reduce using rule 74 (expr -> SIZE OF expr .)
    WIN             reduce using rule 74 (expr -> SIZE OF expr .)
    FAIL            reduce using rule 74 (expr -> SIZE OF expr .)
    DICT            reduce using rule 74 (expr -> SIZE OF expr .)
    A               reduce using rule 74 (expr -> SIZE OF expr .)
    YARN            reduce using rule 74 (expr -> SIZE OF expr .)
    NUMBR           reduce using rule 74 (expr -> SIZE OF expr .)
    NUMBAR          reduce using rule 74 (expr -> SIZE OF expr .)
    NOOB            reduce using rule 74 (expr -> SIZE OF expr .)
    BUKKIT          reduce using rule 74 (expr -> SIZE OF expr .)
    EXCLAMATION     reduce using rule 74 (expr -> SIZE OF expr .)


state 115

    (75) expr -> ABSLUT OF expr .

    NEWLINE         reduce using rule 75 (expr -> ABSLUT OF expr .)
    COMMA           reduce using rule 75 (expr -> ABSLUT OF expr .)
    AN              reduce using rule 75 (expr -> ABSLUT OF expr .)
    MKAY            reduce using rule 75 (expr -> ABSLUT OF expr .)
    I               reduce using rule 75 (expr -> ABSLUT OF expr .)
    SIZE            reduce using rule 75 (expr -> ABSLUT OF expr .)
    ABSLUT          reduce using rule 75 (expr -> ABSLUT OF expr .)
    SUM             reduce using rule 75 (expr -> ABSLUT OF expr .)
    DIFF            reduce using rule 75 (expr -> ABSLUT OF expr .)
    PRODUKT         reduce using rule 75 (expr -> ABSLUT OF expr .)
    QUOSHUNT        reduce using rule 75 (expr -> ABSLUT OF expr .)
    MOD             reduce using rule 75 (expr -> ABSLUT OF expr .)
    BIGGR           reduce using rule 75 (expr -> ABSLUT OF expr .)
    SMALLR          reduce using rule 75 (expr -> ABSLUT OF expr .)
    BOTH            reduce using rule 75 (expr -> ABSLUT OF expr .)
    EITHER          reduce using rule 75 (expr -> ABSLUT OF expr .)
    WON             reduce using rule 75 (expr -> ABSLUT OF expr .)
    NOT             reduce using rule 75 (expr -> ABSLUT OF expr .)
    ALL             reduce using rule 75 (expr -> ABSLUT OF expr .)
    ANY             reduce using rule 75 (expr -> ABSLUT OF expr .)
    DIFFRINT        reduce using rule 75 (expr -> ABSLUT OF expr .)
    SMOOSH          reduce using rule 75 (expr -> ABSLUT OF expr .)
    MAEK            reduce using rule 75 (expr -> ABSLUT OF expr .)
    ID              reduce using rule 75 (expr -> ABSLUT OF expr .)
    IT              reduce using rule 75 (expr -> ABSLUT OF expr .)
    STRING          reduce using rule 75 (expr -> ABSLUT OF expr .)
    FLOAT           reduce using rule 75 (expr -> ABSLUT OF expr .)
    INTEGER         reduce using rule 75 (expr -> ABSLUT OF expr .)
    WIN             reduce using rule 75 (expr -> ABSLUT OF expr .)
    FAIL            reduce using rule 75 (expr -> ABSLUT OF expr .)
    DICT            reduce using rule 75 (expr -> ABSLUT OF expr .)
    A               reduce using rule 75 (expr -> ABSLUT OF expr .)
    YARN            reduce using rule 75 (expr -> ABSLUT OF expr .)
    NUMBR           reduce using rule 75 (expr -> ABSLUT OF expr .)
    NUMBAR          reduce using rule 75 (expr -> ABSLUT OF expr .)
    NOOB            reduce using rule 75 (expr -> ABSLUT OF expr .)
    BUKKIT          reduce using rule 75 (expr -> ABSLUT OF expr .)
    EXCLAMATION     reduce using rule 75 (expr -> ABSLUT OF expr .)


state 116

    (78) expr -> SUM OF expr . AN expr

    AN              shift and go to state 158


state 117

    (79) expr -> DIFF OF expr . AN expr

    AN              shift and go to state 159


state 118

    (80) expr -> PRODUKT OF expr . AN expr

    AN              shift and go to state 160


state 119

    (81) expr -> QUOSHUNT OF expr . AN expr

    AN              shift and go to state 161


state 120

    (82) expr -> MOD OF expr . AN expr

    AN              shift and go to state 162


state 121

    (83) expr -> BIGGR OF expr . AN expr

    AN              shift and go to state 163


state 122

    (84) expr -> SMALLR OF expr . AN expr

    AN              shift and go to state 164


state 123

    (85) expr -> BOTH OF expr . AN expr

    AN              shift and go to state 165


state 124

    (93) expr -> BOTH SAEM expr . AN expr

    AN              shift and go to state 166


state 125

    (86) expr -> EITHER OF expr . AN expr

    AN              shift and go to state 167


state 126

    (87) expr -> WON OF expr . AN expr

    AN              shift and go to state 168


state 127

    (89) expr -> ALL OF sep_args . MKAY
    (46) sep_args -> sep_args . AN expr

    MKAY            shift and go to state 169
    AN              shift and go to state 133


state 128

    (91) expr -> ALL OF args . MKAY
    (44) args -> args . expr
    (40) expr -> . variable APOSTROPHE_Z variable
    (54) expr -> . I IZ ID YR sep_yr_args MKAY
    (55) expr -> . I IZ ID
    (56) expr -> . variable IZ ID YR sep_yr_args MKAY
    (57) expr -> . variable IZ ID
    (74) expr -> . SIZE OF expr
    (75) expr -> . ABSLUT OF expr
    (76) expr -> . value
    (77) expr -> . variable
    (78) expr -> . SUM OF expr AN expr
    (79) expr -> . DIFF OF expr AN expr
    (80) expr -> . PRODUKT OF expr AN expr
    (81) expr -> . QUOSHUNT OF expr AN expr
    (82) expr -> . MOD OF expr AN expr
    (83) expr -> . BIGGR OF expr AN expr
    (84) expr -> . SMALLR OF expr AN expr
    (85) expr -> . BOTH OF expr AN expr
    (86) expr -> . EITHER OF expr AN expr
    (87) expr -> . WON OF expr AN expr
    (88) expr -> . NOT expr
    (89) expr -> . ALL OF sep_args MKAY
    (90) expr -> . ANY OF sep_args MKAY
    (91) expr -> . ALL OF args MKAY
    (92) expr -> . ANY OF args MKAY
    (93) expr -> . BOTH SAEM expr AN expr
    (94) expr -> . DIFFRINT expr AN expr
    (95) expr -> . SMOOSH sep_args MKAY
    (96) expr -> . SMOOSH args MKAY
    (97) expr -> . MAEK expr A type
    (98) expr -> . MAEK expr type
    (99) variable -> . ID
    (100) variable -> . IT
    (65) value -> . STRING
    (66) value -> . FLOAT
    (67) value -> . INTEGER
    (68) value -> . WIN
    (69) value -> . FAIL
    (70) value -> . DICT

    MKAY            shift and go to state 170
    I               shift and go to state 88
    SIZE            shift and go to state 28
    ABSLUT          shift and go to state 29
    SUM             shift and go to state 31
    DIFF            shift and go to state 32
    PRODUKT         shift and go to state 33
    QUOSHUNT        shift and go to state 34
    MOD             shift and go to state 35
    BIGGR           shift and go to state 36
    SMALLR          shift and go to state 37
    BOTH            shift and go to state 38
    EITHER          shift and go to state 39
    WON             shift and go to state 40
    NOT             shift and go to state 41
    ALL             shift and go to state 42
    ANY             shift and go to state 43
    DIFFRINT        shift and go to state 44
    SMOOSH          shift and go to state 45
    MAEK            shift and go to state 46
    ID              shift and go to state 27
    IT              shift and go to state 56
    STRING          shift and go to state 57
    FLOAT           shift and go to state 6
    INTEGER         shift and go to state 58
    WIN             shift and go to state 59
    FAIL            shift and go to state 60
    DICT            shift and go to state 61

    expr                           shift and go to state 135
    variable                       shift and go to state 87
    value                          shift and go to state 30

state 129

    (90) expr -> ANY OF sep_args . MKAY
    (46) sep_args -> sep_args . AN expr

    MKAY            shift and go to state 171
    AN              shift and go to state 133


state 130

    (92) expr -> ANY OF args . MKAY
    (44) args -> args . expr
    (40) expr -> . variable APOSTROPHE_Z variable
    (54) expr -> . I IZ ID YR sep_yr_args MKAY
    (55) expr -> . I IZ ID
    (56) expr -> . variable IZ ID YR sep_yr_args MKAY
    (57) expr -> . variable IZ ID
    (74) expr -> . SIZE OF expr
    (75) expr -> . ABSLUT OF expr
    (76) expr -> . value
    (77) expr -> . variable
    (78) expr -> . SUM OF expr AN expr
    (79) expr -> . DIFF OF expr AN expr
    (80) expr -> . PRODUKT OF expr AN expr
    (81) expr -> . QUOSHUNT OF expr AN expr
    (82) expr -> . MOD OF expr AN expr
    (83) expr -> . BIGGR OF expr AN expr
    (84) expr -> . SMALLR OF expr AN expr
    (85) expr -> . BOTH OF expr AN expr
    (86) expr -> . EITHER OF expr AN expr
    (87) expr -> . WON OF expr AN expr
    (88) expr -> . NOT expr
    (89) expr -> . ALL OF sep_args MKAY
    (90) expr -> . ANY OF sep_args MKAY
    (91) expr -> . ALL OF args MKAY
    (92) expr -> . ANY OF args MKAY
    (93) expr -> . BOTH SAEM expr AN expr
    (94) expr -> . DIFFRINT expr AN expr
    (95) expr -> . SMOOSH sep_args MKAY
    (96) expr -> . SMOOSH args MKAY
    (97) expr -> . MAEK expr A type
    (98) expr -> . MAEK expr type
    (99) variable -> . ID
    (100) variable -> . IT
    (65) value -> . STRING
    (66) value -> . FLOAT
    (67) value -> . INTEGER
    (68) value -> . WIN
    (69) value -> . FAIL
    (70) value -> . DICT

    MKAY            shift and go to state 172
    I               shift and go to state 88
    SIZE            shift and go to state 28
    ABSLUT          shift and go to state 29
    SUM             shift and go to state 31
    DIFF            shift and go to state 32
    PRODUKT         shift and go to state 33
    QUOSHUNT        shift and go to state 34
    MOD             shift and go to state 35
    BIGGR           shift and go to state 36
    SMALLR          shift and go to state 37
    BOTH            shift and go to state 38
    EITHER          shift and go to state 39
    WON             shift and go to state 40
    NOT             shift and go to state 41
    ALL             shift and go to state 42
    ANY             shift and go to state 43
    DIFFRINT        shift and go to state 44
    SMOOSH          shift and go to state 45
    MAEK            shift and go to state 46
    ID              shift and go to state 27
    IT              shift and go to state 56
    STRING          shift and go to state 57
    FLOAT           shift and go to state 6
    INTEGER         shift and go to state 58
    WIN             shift and go to state 59
    FAIL            shift and go to state 60
    DICT            shift and go to state 61

    expr                           shift and go to state 135
    variable                       shift and go to state 87
    value                          shift and go to state 30

state 131

    (94) expr -> DIFFRINT expr AN . expr
    (40) expr -> . variable APOSTROPHE_Z variable
    (54) expr -> . I IZ ID YR sep_yr_args MKAY
    (55) expr -> . I IZ ID
    (56) expr -> . variable IZ ID YR sep_yr_args MKAY
    (57) expr -> . variable IZ ID
    (74) expr -> . SIZE OF expr
    (75) expr -> . ABSLUT OF expr
    (76) expr -> . value
    (77) expr -> . variable
    (78) expr -> . SUM OF expr AN expr
    (79) expr -> . DIFF OF expr AN expr
    (80) expr -> . PRODUKT OF expr AN expr
    (81) expr -> . QUOSHUNT OF expr AN expr
    (82) expr -> . MOD OF expr AN expr
    (83) expr -> . BIGGR OF expr AN expr
    (84) expr -> . SMALLR OF expr AN expr
    (85) expr -> . BOTH OF expr AN expr
    (86) expr -> . EITHER OF expr AN expr
    (87) expr -> . WON OF expr AN expr
    (88) expr -> . NOT expr
    (89) expr -> . ALL OF sep_args MKAY
    (90) expr -> . ANY OF sep_args MKAY
    (91) expr -> . ALL OF args MKAY
    (92) expr -> . ANY OF args MKAY
    (93) expr -> . BOTH SAEM expr AN expr
    (94) expr -> . DIFFRINT expr AN expr
    (95) expr -> . SMOOSH sep_args MKAY
    (96) expr -> . SMOOSH args MKAY
    (97) expr -> . MAEK expr A type
    (98) expr -> . MAEK expr type
    (99) variable -> . ID
    (100) variable -> . IT
    (65) value -> . STRING
    (66) value -> . FLOAT
    (67) value -> . INTEGER
    (68) value -> . WIN
    (69) value -> . FAIL
    (70) value -> . DICT

    I               shift and go to state 88
    SIZE            shift and go to state 28
    ABSLUT          shift and go to state 29
    SUM             shift and go to state 31
    DIFF            shift and go to state 32
    PRODUKT         shift and go to state 33
    QUOSHUNT        shift and go to state 34
    MOD             shift and go to state 35
    BIGGR           shift and go to state 36
    SMALLR          shift and go to state 37
    BOTH            shift and go to state 38
    EITHER          shift and go to state 39
    WON             shift and go to state 40
    NOT             shift and go to state 41
    ALL             shift and go to state 42
    ANY             shift and go to state 43
    DIFFRINT        shift and go to state 44
    SMOOSH          shift and go to state 45
    MAEK            shift and go to state 46
    ID              shift and go to state 27
    IT              shift and go to state 56
    STRING          shift and go to state 57
    FLOAT           shift and go to state 6
    INTEGER         shift and go to state 58
    WIN             shift and go to state 59
    FAIL            shift and go to state 60
    DICT            shift and go to state 61

    expr                           shift and go to state 173
    variable                       shift and go to state 87
    value                          shift and go to state 30

state 132

    (95) expr -> SMOOSH sep_args MKAY .

    NEWLINE         reduce using rule 95 (expr -> SMOOSH sep_args MKAY .)
    COMMA           reduce using rule 95 (expr -> SMOOSH sep_args MKAY .)
    AN              reduce using rule 95 (expr -> SMOOSH sep_args MKAY .)
    MKAY            reduce using rule 95 (expr -> SMOOSH sep_args MKAY .)
    I               reduce using rule 95 (expr -> SMOOSH sep_args MKAY .)
    SIZE            reduce using rule 95 (expr -> SMOOSH sep_args MKAY .)
    ABSLUT          reduce using rule 95 (expr -> SMOOSH sep_args MKAY .)
    SUM             reduce using rule 95 (expr -> SMOOSH sep_args MKAY .)
    DIFF            reduce using rule 95 (expr -> SMOOSH sep_args MKAY .)
    PRODUKT         reduce using rule 95 (expr -> SMOOSH sep_args MKAY .)
    QUOSHUNT        reduce using rule 95 (expr -> SMOOSH sep_args MKAY .)
    MOD             reduce using rule 95 (expr -> SMOOSH sep_args MKAY .)
    BIGGR           reduce using rule 95 (expr -> SMOOSH sep_args MKAY .)
    SMALLR          reduce using rule 95 (expr -> SMOOSH sep_args MKAY .)
    BOTH            reduce using rule 95 (expr -> SMOOSH sep_args MKAY .)
    EITHER          reduce using rule 95 (expr -> SMOOSH sep_args MKAY .)
    WON             reduce using rule 95 (expr -> SMOOSH sep_args MKAY .)
    NOT             reduce using rule 95 (expr -> SMOOSH sep_args MKAY .)
    ALL             reduce using rule 95 (expr -> SMOOSH sep_args MKAY .)
    ANY             reduce using rule 95 (expr -> SMOOSH sep_args MKAY .)
    DIFFRINT        reduce using rule 95 (expr -> SMOOSH sep_args MKAY .)
    SMOOSH          reduce using rule 95 (expr -> SMOOSH sep_args MKAY .)
    MAEK            reduce using rule 95 (expr -> SMOOSH sep_args MKAY .)
    ID              reduce using rule 95 (expr -> SMOOSH sep_args MKAY .)
    IT              reduce using rule 95 (expr -> SMOOSH sep_args MKAY .)
    STRING          reduce using rule 95 (expr -> SMOOSH sep_args MKAY .)
    FLOAT           reduce using rule 95 (expr -> SMOOSH sep_args MKAY .)
    INTEGER         reduce using rule 95 (expr -> SMOOSH sep_args MKAY .)
    WIN             reduce using rule 95 (expr -> SMOOSH sep_args MKAY .)
    FAIL            reduce using rule 95 (expr -> SMOOSH sep_args MKAY .)
    DICT            reduce using rule 95 (expr -> SMOOSH sep_args MKAY .)
    A               reduce using rule 95 (expr -> SMOOSH sep_args MKAY .)
    YARN            reduce using rule 95 (expr -> SMOOSH sep_args MKAY .)
    NUMBR           reduce using rule 95 (expr -> SMOOSH sep_args MKAY .)
    NUMBAR          reduce using rule 95 (expr -> SMOOSH sep_args MKAY .)
    NOOB            reduce using rule 95 (expr -> SMOOSH sep_args MKAY .)
    BUKKIT          reduce using rule 95 (expr -> SMOOSH sep_args MKAY .)
    EXCLAMATION     reduce using rule 95 (expr -> SMOOSH sep_args MKAY .)


state 133

    (46) sep_args -> sep_args AN . expr
    (40) expr -> . variable APOSTROPHE_Z variable
    (54) expr -> . I IZ ID YR sep_yr_args MKAY
    (55) expr -> . I IZ ID
    (56) expr -> . variable IZ ID YR sep_yr_args MKAY
    (57) expr -> . variable IZ ID
    (74) expr -> . SIZE OF expr
    (75) expr -> . ABSLUT OF expr
    (76) expr -> . value
    (77) expr -> . variable
    (78) expr -> . SUM OF expr AN expr
    (79) expr -> . DIFF OF expr AN expr
    (80) expr -> . PRODUKT OF expr AN expr
    (81) expr -> . QUOSHUNT OF expr AN expr
    (82) expr -> . MOD OF expr AN expr
    (83) expr -> . BIGGR OF expr AN expr
    (84) expr -> . SMALLR OF expr AN expr
    (85) expr -> . BOTH OF expr AN expr
    (86) expr -> . EITHER OF expr AN expr
    (87) expr -> . WON OF expr AN expr
    (88) expr -> . NOT expr
    (89) expr -> . ALL OF sep_args MKAY
    (90) expr -> . ANY OF sep_args MKAY
    (91) expr -> . ALL OF args MKAY
    (92) expr -> . ANY OF args MKAY
    (93) expr -> . BOTH SAEM expr AN expr
    (94) expr -> . DIFFRINT expr AN expr
    (95) expr -> . SMOOSH sep_args MKAY
    (96) expr -> . SMOOSH args MKAY
    (97) expr -> . MAEK expr A type
    (98) expr -> . MAEK expr type
    (99) variable -> . ID
    (100) variable -> . IT
    (65) value -> . STRING
    (66) value -> . FLOAT
    (67) value -> . INTEGER
    (68) value -> . WIN
    (69) value -> . FAIL
    (70) value -> . DICT

    I               shift and go to state 88
    SIZE            shift and go to state 28
    ABSLUT          shift and go to state 29
    SUM             shift and go to state 31
    DIFF            shift and go to state 32
    PRODUKT         shift and go to state 33
    QUOSHUNT        shift and go to state 34
    MOD             shift and go to state 35
    BIGGR           shift and go to state 36
    SMALLR          shift and go to state 37
    BOTH            shift and go to state 38
    EITHER          shift and go to state 39
    WON             shift and go to state 40
    NOT             shift and go to state 41
    ALL             shift and go to state 42
    ANY             shift and go to state 43
    DIFFRINT        shift and go to state 44
    SMOOSH          shift and go to state 45
    MAEK            shift and go to state 46
    ID              shift and go to state 27
    IT              shift and go to state 56
    STRING          shift and go to state 57
    FLOAT           shift and go to state 6
    INTEGER         shift and go to state 58
    WIN             shift and go to state 59
    FAIL            shift and go to state 60
    DICT            shift and go to state 61

    expr                           shift and go to state 174
    variable                       shift and go to state 87
    value                          shift and go to state 30

state 134

    (96) expr -> SMOOSH args MKAY .

    NEWLINE         reduce using rule 96 (expr -> SMOOSH args MKAY .)
    COMMA           reduce using rule 96 (expr -> SMOOSH args MKAY .)
    AN              reduce using rule 96 (expr -> SMOOSH args MKAY .)
    MKAY            reduce using rule 96 (expr -> SMOOSH args MKAY .)
    I               reduce using rule 96 (expr -> SMOOSH args MKAY .)
    SIZE            reduce using rule 96 (expr -> SMOOSH args MKAY .)
    ABSLUT          reduce using rule 96 (expr -> SMOOSH args MKAY .)
    SUM             reduce using rule 96 (expr -> SMOOSH args MKAY .)
    DIFF            reduce using rule 96 (expr -> SMOOSH args MKAY .)
    PRODUKT         reduce using rule 96 (expr -> SMOOSH args MKAY .)
    QUOSHUNT        reduce using rule 96 (expr -> SMOOSH args MKAY .)
    MOD             reduce using rule 96 (expr -> SMOOSH args MKAY .)
    BIGGR           reduce using rule 96 (expr -> SMOOSH args MKAY .)
    SMALLR          reduce using rule 96 (expr -> SMOOSH args MKAY .)
    BOTH            reduce using rule 96 (expr -> SMOOSH args MKAY .)
    EITHER          reduce using rule 96 (expr -> SMOOSH args MKAY .)
    WON             reduce using rule 96 (expr -> SMOOSH args MKAY .)
    NOT             reduce using rule 96 (expr -> SMOOSH args MKAY .)
    ALL             reduce using rule 96 (expr -> SMOOSH args MKAY .)
    ANY             reduce using rule 96 (expr -> SMOOSH args MKAY .)
    DIFFRINT        reduce using rule 96 (expr -> SMOOSH args MKAY .)
    SMOOSH          reduce using rule 96 (expr -> SMOOSH args MKAY .)
    MAEK            reduce using rule 96 (expr -> SMOOSH args MKAY .)
    ID              reduce using rule 96 (expr -> SMOOSH args MKAY .)
    IT              reduce using rule 96 (expr -> SMOOSH args MKAY .)
    STRING          reduce using rule 96 (expr -> SMOOSH args MKAY .)
    FLOAT           reduce using rule 96 (expr -> SMOOSH args MKAY .)
    INTEGER         reduce using rule 96 (expr -> SMOOSH args MKAY .)
    WIN             reduce using rule 96 (expr -> SMOOSH args MKAY .)
    FAIL            reduce using rule 96 (expr -> SMOOSH args MKAY .)
    DICT            reduce using rule 96 (expr -> SMOOSH args MKAY .)
    A               reduce using rule 96 (expr -> SMOOSH args MKAY .)
    YARN            reduce using rule 96 (expr -> SMOOSH args MKAY .)
    NUMBR           reduce using rule 96 (expr -> SMOOSH args MKAY .)
    NUMBAR          reduce using rule 96 (expr -> SMOOSH args MKAY .)
    NOOB            reduce using rule 96 (expr -> SMOOSH args MKAY .)
    BUKKIT          reduce using rule 96 (expr -> SMOOSH args MKAY .)
    EXCLAMATION     reduce using rule 96 (expr -> SMOOSH args MKAY .)


state 135

    (44) args -> args expr .

    MKAY            reduce using rule 44 (args -> args expr .)
    I               reduce using rule 44 (args -> args expr .)
    SIZE            reduce using rule 44 (args -> args expr .)
    ABSLUT          reduce using rule 44 (args -> args expr .)
    SUM             reduce using rule 44 (args -> args expr .)
    DIFF            reduce using rule 44 (args -> args expr .)
    PRODUKT         reduce using rule 44 (args -> args expr .)
    QUOSHUNT        reduce using rule 44 (args -> args expr .)
    MOD             reduce using rule 44 (args -> args expr .)
    BIGGR           reduce using rule 44 (args -> args expr .)
    SMALLR          reduce using rule 44 (args -> args expr .)
    BOTH            reduce using rule 44 (args -> args expr .)
    EITHER          reduce using rule 44 (args -> args expr .)
    WON             reduce using rule 44 (args -> args expr .)
    NOT             reduce using rule 44 (args -> args expr .)
    ALL             reduce using rule 44 (args -> args expr .)
    ANY             reduce using rule 44 (args -> args expr .)
    DIFFRINT        reduce using rule 44 (args -> args expr .)
    SMOOSH          reduce using rule 44 (args -> args expr .)
    MAEK            reduce using rule 44 (args -> args expr .)
    ID              reduce using rule 44 (args -> args expr .)
    IT              reduce using rule 44 (args -> args expr .)
    STRING          reduce using rule 44 (args -> args expr .)
    FLOAT           reduce using rule 44 (args -> args expr .)
    INTEGER         reduce using rule 44 (args -> args expr .)
    WIN             reduce using rule 44 (args -> args expr .)
    FAIL            reduce using rule 44 (args -> args expr .)
    DICT            reduce using rule 44 (args -> args expr .)
    EXCLAMATION     reduce using rule 44 (args -> args expr .)
    NEWLINE         reduce using rule 44 (args -> args expr .)
    COMMA           reduce using rule 44 (args -> args expr .)


state 136

    (97) expr -> MAEK expr A . type
    (60) type -> . YARN
    (61) type -> . NUMBR
    (62) type -> . NUMBAR
    (63) type -> . NOOB
    (64) type -> . BUKKIT

    YARN            shift and go to state 138
    NUMBR           shift and go to state 139
    NUMBAR          shift and go to state 140
    NOOB            shift and go to state 141
    BUKKIT          shift and go to state 142

    type                           shift and go to state 175

state 137

    (98) expr -> MAEK expr type .

    NEWLINE         reduce using rule 98 (expr -> MAEK expr type .)
    COMMA           reduce using rule 98 (expr -> MAEK expr type .)
    AN              reduce using rule 98 (expr -> MAEK expr type .)
    MKAY            reduce using rule 98 (expr -> MAEK expr type .)
    I               reduce using rule 98 (expr -> MAEK expr type .)
    SIZE            reduce using rule 98 (expr -> MAEK expr type .)
    ABSLUT          reduce using rule 98 (expr -> MAEK expr type .)
    SUM             reduce using rule 98 (expr -> MAEK expr type .)
    DIFF            reduce using rule 98 (expr -> MAEK expr type .)
    PRODUKT         reduce using rule 98 (expr -> MAEK expr type .)
    QUOSHUNT        reduce using rule 98 (expr -> MAEK expr type .)
    MOD             reduce using rule 98 (expr -> MAEK expr type .)
    BIGGR           reduce using rule 98 (expr -> MAEK expr type .)
    SMALLR          reduce using rule 98 (expr -> MAEK expr type .)
    BOTH            reduce using rule 98 (expr -> MAEK expr type .)
    EITHER          reduce using rule 98 (expr -> MAEK expr type .)
    WON             reduce using rule 98 (expr -> MAEK expr type .)
    NOT             reduce using rule 98 (expr -> MAEK expr type .)
    ALL             reduce using rule 98 (expr -> MAEK expr type .)
    ANY             reduce using rule 98 (expr -> MAEK expr type .)
    DIFFRINT        reduce using rule 98 (expr -> MAEK expr type .)
    SMOOSH          reduce using rule 98 (expr -> MAEK expr type .)
    MAEK            reduce using rule 98 (expr -> MAEK expr type .)
    ID              reduce using rule 98 (expr -> MAEK expr type .)
    IT              reduce using rule 98 (expr -> MAEK expr type .)
    STRING          reduce using rule 98 (expr -> MAEK expr type .)
    FLOAT           reduce using rule 98 (expr -> MAEK expr type .)
    INTEGER         reduce using rule 98 (expr -> MAEK expr type .)
    WIN             reduce using rule 98 (expr -> MAEK expr type .)
    FAIL            reduce using rule 98 (expr -> MAEK expr type .)
    DICT            reduce using rule 98 (expr -> MAEK expr type .)
    A               reduce using rule 98 (expr -> MAEK expr type .)
    YARN            reduce using rule 98 (expr -> MAEK expr type .)
    NUMBR           reduce using rule 98 (expr -> MAEK expr type .)
    NUMBAR          reduce using rule 98 (expr -> MAEK expr type .)
    NOOB            reduce using rule 98 (expr -> MAEK expr type .)
    BUKKIT          reduce using rule 98 (expr -> MAEK expr type .)
    EXCLAMATION     reduce using rule 98 (expr -> MAEK expr type .)


state 138

    (60) type -> YARN .

    NEWLINE         reduce using rule 60 (type -> YARN .)
    COMMA           reduce using rule 60 (type -> YARN .)
    AN              reduce using rule 60 (type -> YARN .)
    MKAY            reduce using rule 60 (type -> YARN .)
    I               reduce using rule 60 (type -> YARN .)
    SIZE            reduce using rule 60 (type -> YARN .)
    ABSLUT          reduce using rule 60 (type -> YARN .)
    SUM             reduce using rule 60 (type -> YARN .)
    DIFF            reduce using rule 60 (type -> YARN .)
    PRODUKT         reduce using rule 60 (type -> YARN .)
    QUOSHUNT        reduce using rule 60 (type -> YARN .)
    MOD             reduce using rule 60 (type -> YARN .)
    BIGGR           reduce using rule 60 (type -> YARN .)
    SMALLR          reduce using rule 60 (type -> YARN .)
    BOTH            reduce using rule 60 (type -> YARN .)
    EITHER          reduce using rule 60 (type -> YARN .)
    WON             reduce using rule 60 (type -> YARN .)
    NOT             reduce using rule 60 (type -> YARN .)
    ALL             reduce using rule 60 (type -> YARN .)
    ANY             reduce using rule 60 (type -> YARN .)
    DIFFRINT        reduce using rule 60 (type -> YARN .)
    SMOOSH          reduce using rule 60 (type -> YARN .)
    MAEK            reduce using rule 60 (type -> YARN .)
    ID              reduce using rule 60 (type -> YARN .)
    IT              reduce using rule 60 (type -> YARN .)
    STRING          reduce using rule 60 (type -> YARN .)
    FLOAT           reduce using rule 60 (type -> YARN .)
    INTEGER         reduce using rule 60 (type -> YARN .)
    WIN             reduce using rule 60 (type -> YARN .)
    FAIL            reduce using rule 60 (type -> YARN .)
    DICT            reduce using rule 60 (type -> YARN .)
    A               reduce using rule 60 (type -> YARN .)
    YARN            reduce using rule 60 (type -> YARN .)
    NUMBR           reduce using rule 60 (type -> YARN .)
    NUMBAR          reduce using rule 60 (type -> YARN .)
    NOOB            reduce using rule 60 (type -> YARN .)
    BUKKIT          reduce using rule 60 (type -> YARN .)
    EXCLAMATION     reduce using rule 60 (type -> YARN .)


state 139

    (61) type -> NUMBR .

    NEWLINE         reduce using rule 61 (type -> NUMBR .)
    COMMA           reduce using rule 61 (type -> NUMBR .)
    AN              reduce using rule 61 (type -> NUMBR .)
    MKAY            reduce using rule 61 (type -> NUMBR .)
    I               reduce using rule 61 (type -> NUMBR .)
    SIZE            reduce using rule 61 (type -> NUMBR .)
    ABSLUT          reduce using rule 61 (type -> NUMBR .)
    SUM             reduce using rule 61 (type -> NUMBR .)
    DIFF            reduce using rule 61 (type -> NUMBR .)
    PRODUKT         reduce using rule 61 (type -> NUMBR .)
    QUOSHUNT        reduce using rule 61 (type -> NUMBR .)
    MOD             reduce using rule 61 (type -> NUMBR .)
    BIGGR           reduce using rule 61 (type -> NUMBR .)
    SMALLR          reduce using rule 61 (type -> NUMBR .)
    BOTH            reduce using rule 61 (type -> NUMBR .)
    EITHER          reduce using rule 61 (type -> NUMBR .)
    WON             reduce using rule 61 (type -> NUMBR .)
    NOT             reduce using rule 61 (type -> NUMBR .)
    ALL             reduce using rule 61 (type -> NUMBR .)
    ANY             reduce using rule 61 (type -> NUMBR .)
    DIFFRINT        reduce using rule 61 (type -> NUMBR .)
    SMOOSH          reduce using rule 61 (type -> NUMBR .)
    MAEK            reduce using rule 61 (type -> NUMBR .)
    ID              reduce using rule 61 (type -> NUMBR .)
    IT              reduce using rule 61 (type -> NUMBR .)
    STRING          reduce using rule 61 (type -> NUMBR .)
    FLOAT           reduce using rule 61 (type -> NUMBR .)
    INTEGER         reduce using rule 61 (type -> NUMBR .)
    WIN             reduce using rule 61 (type -> NUMBR .)
    FAIL            reduce using rule 61 (type -> NUMBR .)
    DICT            reduce using rule 61 (type -> NUMBR .)
    A               reduce using rule 61 (type -> NUMBR .)
    YARN            reduce using rule 61 (type -> NUMBR .)
    NUMBR           reduce using rule 61 (type -> NUMBR .)
    NUMBAR          reduce using rule 61 (type -> NUMBR .)
    NOOB            reduce using rule 61 (type -> NUMBR .)
    BUKKIT          reduce using rule 61 (type -> NUMBR .)
    EXCLAMATION     reduce using rule 61 (type -> NUMBR .)


state 140

    (62) type -> NUMBAR .

    NEWLINE         reduce using rule 62 (type -> NUMBAR .)
    COMMA           reduce using rule 62 (type -> NUMBAR .)
    AN              reduce using rule 62 (type -> NUMBAR .)
    MKAY            reduce using rule 62 (type -> NUMBAR .)
    I               reduce using rule 62 (type -> NUMBAR .)
    SIZE            reduce using rule 62 (type -> NUMBAR .)
    ABSLUT          reduce using rule 62 (type -> NUMBAR .)
    SUM             reduce using rule 62 (type -> NUMBAR .)
    DIFF            reduce using rule 62 (type -> NUMBAR .)
    PRODUKT         reduce using rule 62 (type -> NUMBAR .)
    QUOSHUNT        reduce using rule 62 (type -> NUMBAR .)
    MOD             reduce using rule 62 (type -> NUMBAR .)
    BIGGR           reduce using rule 62 (type -> NUMBAR .)
    SMALLR          reduce using rule 62 (type -> NUMBAR .)
    BOTH            reduce using rule 62 (type -> NUMBAR .)
    EITHER          reduce using rule 62 (type -> NUMBAR .)
    WON             reduce using rule 62 (type -> NUMBAR .)
    NOT             reduce using rule 62 (type -> NUMBAR .)
    ALL             reduce using rule 62 (type -> NUMBAR .)
    ANY             reduce using rule 62 (type -> NUMBAR .)
    DIFFRINT        reduce using rule 62 (type -> NUMBAR .)
    SMOOSH          reduce using rule 62 (type -> NUMBAR .)
    MAEK            reduce using rule 62 (type -> NUMBAR .)
    ID              reduce using rule 62 (type -> NUMBAR .)
    IT              reduce using rule 62 (type -> NUMBAR .)
    STRING          reduce using rule 62 (type -> NUMBAR .)
    FLOAT           reduce using rule 62 (type -> NUMBAR .)
    INTEGER         reduce using rule 62 (type -> NUMBAR .)
    WIN             reduce using rule 62 (type -> NUMBAR .)
    FAIL            reduce using rule 62 (type -> NUMBAR .)
    DICT            reduce using rule 62 (type -> NUMBAR .)
    A               reduce using rule 62 (type -> NUMBAR .)
    YARN            reduce using rule 62 (type -> NUMBAR .)
    NUMBR           reduce using rule 62 (type -> NUMBAR .)
    NUMBAR          reduce using rule 62 (type -> NUMBAR .)
    NOOB            reduce using rule 62 (type -> NUMBAR .)
    BUKKIT          reduce using rule 62 (type -> NUMBAR .)
    EXCLAMATION     reduce using rule 62 (type -> NUMBAR .)


state 141

    (63) type -> NOOB .

    NEWLINE         reduce using rule 63 (type -> NOOB .)
    COMMA           reduce using rule 63 (type -> NOOB .)
    AN              reduce using rule 63 (type -> NOOB .)
    MKAY            reduce using rule 63 (type -> NOOB .)
    I               reduce using rule 63 (type -> NOOB .)
    SIZE            reduce using rule 63 (type -> NOOB .)
    ABSLUT          reduce using rule 63 (type -> NOOB .)
    SUM             reduce using rule 63 (type -> NOOB .)
    DIFF            reduce using rule 63 (type -> NOOB .)
    PRODUKT         reduce using rule 63 (type -> NOOB .)
    QUOSHUNT        reduce using rule 63 (type -> NOOB .)
    MOD             reduce using rule 63 (type -> NOOB .)
    BIGGR           reduce using rule 63 (type -> NOOB .)
    SMALLR          reduce using rule 63 (type -> NOOB .)
    BOTH            reduce using rule 63 (type -> NOOB .)
    EITHER          reduce using rule 63 (type -> NOOB .)
    WON             reduce using rule 63 (type -> NOOB .)
    NOT             reduce using rule 63 (type -> NOOB .)
    ALL             reduce using rule 63 (type -> NOOB .)
    ANY             reduce using rule 63 (type -> NOOB .)
    DIFFRINT        reduce using rule 63 (type -> NOOB .)
    SMOOSH          reduce using rule 63 (type -> NOOB .)
    MAEK            reduce using rule 63 (type -> NOOB .)
    ID              reduce using rule 63 (type -> NOOB .)
    IT              reduce using rule 63 (type -> NOOB .)
    STRING          reduce using rule 63 (type -> NOOB .)
    FLOAT           reduce using rule 63 (type -> NOOB .)
    INTEGER         reduce using rule 63 (type -> NOOB .)
    WIN             reduce using rule 63 (type -> NOOB .)
    FAIL            reduce using rule 63 (type -> NOOB .)
    DICT            reduce using rule 63 (type -> NOOB .)
    A               reduce using rule 63 (type -> NOOB .)
    YARN            reduce using rule 63 (type -> NOOB .)
    NUMBR           reduce using rule 63 (type -> NOOB .)
    NUMBAR          reduce using rule 63 (type -> NOOB .)
    NOOB            reduce using rule 63 (type -> NOOB .)
    BUKKIT          reduce using rule 63 (type -> NOOB .)
    EXCLAMATION     reduce using rule 63 (type -> NOOB .)


state 142

    (64) type -> BUKKIT .

    NEWLINE         reduce using rule 64 (type -> BUKKIT .)
    COMMA           reduce using rule 64 (type -> BUKKIT .)
    AN              reduce using rule 64 (type -> BUKKIT .)
    MKAY            reduce using rule 64 (type -> BUKKIT .)
    I               reduce using rule 64 (type -> BUKKIT .)
    SIZE            reduce using rule 64 (type -> BUKKIT .)
    ABSLUT          reduce using rule 64 (type -> BUKKIT .)
    SUM             reduce using rule 64 (type -> BUKKIT .)
    DIFF            reduce using rule 64 (type -> BUKKIT .)
    PRODUKT         reduce using rule 64 (type -> BUKKIT .)
    QUOSHUNT        reduce using rule 64 (type -> BUKKIT .)
    MOD             reduce using rule 64 (type -> BUKKIT .)
    BIGGR           reduce using rule 64 (type -> BUKKIT .)
    SMALLR          reduce using rule 64 (type -> BUKKIT .)
    BOTH            reduce using rule 64 (type -> BUKKIT .)
    EITHER          reduce using rule 64 (type -> BUKKIT .)
    WON             reduce using rule 64 (type -> BUKKIT .)
    NOT             reduce using rule 64 (type -> BUKKIT .)
    ALL             reduce using rule 64 (type -> BUKKIT .)
    ANY             reduce using rule 64 (type -> BUKKIT .)
    DIFFRINT        reduce using rule 64 (type -> BUKKIT .)
    SMOOSH          reduce using rule 64 (type -> BUKKIT .)
    MAEK            reduce using rule 64 (type -> BUKKIT .)
    ID              reduce using rule 64 (type -> BUKKIT .)
    IT              reduce using rule 64 (type -> BUKKIT .)
    STRING          reduce using rule 64 (type -> BUKKIT .)
    FLOAT           reduce using rule 64 (type -> BUKKIT .)
    INTEGER         reduce using rule 64 (type -> BUKKIT .)
    WIN             reduce using rule 64 (type -> BUKKIT .)
    FAIL            reduce using rule 64 (type -> BUKKIT .)
    DICT            reduce using rule 64 (type -> BUKKIT .)
    A               reduce using rule 64 (type -> BUKKIT .)
    YARN            reduce using rule 64 (type -> BUKKIT .)
    NUMBR           reduce using rule 64 (type -> BUKKIT .)
    NUMBAR          reduce using rule 64 (type -> BUKKIT .)
    NOOB            reduce using rule 64 (type -> BUKKIT .)
    BUKKIT          reduce using rule 64 (type -> BUKKIT .)
    EXCLAMATION     reduce using rule 64 (type -> BUKKIT .)


state 143

    (72) call -> VISIBLE args EXCLAMATION .

    NEWLINE         reduce using rule 72 (call -> VISIBLE args EXCLAMATION .)
    COMMA           reduce using rule 72 (call -> VISIBLE args EXCLAMATION .)


state 144

    (37) declare_bukkit_block -> O HAI IM . variable NEWLINE statements KTHX
    (99) variable -> . ID
    (100) variable -> . IT

    ID              shift and go to state 27
    IT              shift and go to state 56

    variable                       shift and go to state 176

state 145

    (28) if_else -> O RLY QUESTION . NEWLINE YA RLY NEWLINE statements NO WAI NEWLINE statements OIC
    (29) if_else -> O RLY QUESTION . NEWLINE YA RLY NEWLINE statements OIC
    (30) if_else -> O RLY QUESTION . NEWLINE YA RLY NEWLINE statements elifs NO WAI NEWLINE statements OIC

    NEWLINE         shift and go to state 177


state 146

    (21) loop -> IM IN YR . variable operation YR variable condition expr NEWLINE statements IM OUTTA YR variable
    (99) variable -> . ID
    (100) variable -> . IT

    ID              shift and go to state 27
    IT              shift and go to state 56

    variable                       shift and go to state 178

state 147

    (50) bukkit_function -> HOW IZ variable . ID YR sep_yr_args NEWLINE statements IF U SAY SO
    (51) bukkit_function -> HOW IZ variable . ID NEWLINE statements IF U SAY SO

    ID              shift and go to state 179


state 148

    (52) function -> HOW IZ I . ID YR sep_yr_args NEWLINE statements IF U SAY SO
    (53) function -> HOW IZ I . ID NEWLINE statements IF U SAY SO

    ID              shift and go to state 180


state 149

    (58) return -> FOUND YR expr .

    NEWLINE         reduce using rule 58 (return -> FOUND YR expr .)
    COMMA           reduce using rule 58 (return -> FOUND YR expr .)


state 150

    (27) export -> YOU CAN HAS . sep_args MKAY
    (46) sep_args -> . sep_args AN expr
    (47) sep_args -> . expr
    (40) expr -> . variable APOSTROPHE_Z variable
    (54) expr -> . I IZ ID YR sep_yr_args MKAY
    (55) expr -> . I IZ ID
    (56) expr -> . variable IZ ID YR sep_yr_args MKAY
    (57) expr -> . variable IZ ID
    (74) expr -> . SIZE OF expr
    (75) expr -> . ABSLUT OF expr
    (76) expr -> . value
    (77) expr -> . variable
    (78) expr -> . SUM OF expr AN expr
    (79) expr -> . DIFF OF expr AN expr
    (80) expr -> . PRODUKT OF expr AN expr
    (81) expr -> . QUOSHUNT OF expr AN expr
    (82) expr -> . MOD OF expr AN expr
    (83) expr -> . BIGGR OF expr AN expr
    (84) expr -> . SMALLR OF expr AN expr
    (85) expr -> . BOTH OF expr AN expr
    (86) expr -> . EITHER OF expr AN expr
    (87) expr -> . WON OF expr AN expr
    (88) expr -> . NOT expr
    (89) expr -> . ALL OF sep_args MKAY
    (90) expr -> . ANY OF sep_args MKAY
    (91) expr -> . ALL OF args MKAY
    (92) expr -> . ANY OF args MKAY
    (93) expr -> . BOTH SAEM expr AN expr
    (94) expr -> . DIFFRINT expr AN expr
    (95) expr -> . SMOOSH sep_args MKAY
    (96) expr -> . SMOOSH args MKAY
    (97) expr -> . MAEK expr A type
    (98) expr -> . MAEK expr type
    (99) variable -> . ID
    (100) variable -> . IT
    (65) value -> . STRING
    (66) value -> . FLOAT
    (67) value -> . INTEGER
    (68) value -> . WIN
    (69) value -> . FAIL
    (70) value -> . DICT

    I               shift and go to state 88
    SIZE            shift and go to state 28
    ABSLUT          shift and go to state 29
    SUM             shift and go to state 31
    DIFF            shift and go to state 32
    PRODUKT         shift and go to state 33
    QUOSHUNT        shift and go to state 34
    MOD             shift and go to state 35
    BIGGR           shift and go to state 36
    SMALLR          shift and go to state 37
    BOTH            shift and go to state 38
    EITHER          shift and go to state 39
    WON             shift and go to state 40
    NOT             shift and go to state 41
    ALL             shift and go to state 42
    ANY             shift and go to state 43
    DIFFRINT        shift and go to state 44
    SMOOSH          shift and go to state 45
    MAEK            shift and go to state 46
    ID              shift and go to state 27
    IT              shift and go to state 56
    STRING          shift and go to state 57
    FLOAT           shift and go to state 6
    INTEGER         shift and go to state 58
    WIN             shift and go to state 59
    FAIL            shift and go to state 60
    DICT            shift and go to state 61

    sep_args                       shift and go to state 181
    expr                           shift and go to state 182
    variable                       shift and go to state 87
    value                          shift and go to state 30

state 151

    (26) import -> CAN HAS PATH . QUESTION

    QUESTION        shift and go to state 183


state 152

    (56) expr -> variable IZ ID YR . sep_yr_args MKAY
    (48) sep_yr_args -> . sep_yr_args AN YR expr
    (49) sep_yr_args -> . expr
    (40) expr -> . variable APOSTROPHE_Z variable
    (54) expr -> . I IZ ID YR sep_yr_args MKAY
    (55) expr -> . I IZ ID
    (56) expr -> . variable IZ ID YR sep_yr_args MKAY
    (57) expr -> . variable IZ ID
    (74) expr -> . SIZE OF expr
    (75) expr -> . ABSLUT OF expr
    (76) expr -> . value
    (77) expr -> . variable
    (78) expr -> . SUM OF expr AN expr
    (79) expr -> . DIFF OF expr AN expr
    (80) expr -> . PRODUKT OF expr AN expr
    (81) expr -> . QUOSHUNT OF expr AN expr
    (82) expr -> . MOD OF expr AN expr
    (83) expr -> . BIGGR OF expr AN expr
    (84) expr -> . SMALLR OF expr AN expr
    (85) expr -> . BOTH OF expr AN expr
    (86) expr -> . EITHER OF expr AN expr
    (87) expr -> . WON OF expr AN expr
    (88) expr -> . NOT expr
    (89) expr -> . ALL OF sep_args MKAY
    (90) expr -> . ANY OF sep_args MKAY
    (91) expr -> . ALL OF args MKAY
    (92) expr -> . ANY OF args MKAY
    (93) expr -> . BOTH SAEM expr AN expr
    (94) expr -> . DIFFRINT expr AN expr
    (95) expr -> . SMOOSH sep_args MKAY
    (96) expr -> . SMOOSH args MKAY
    (97) expr -> . MAEK expr A type
    (98) expr -> . MAEK expr type
    (99) variable -> . ID
    (100) variable -> . IT
    (65) value -> . STRING
    (66) value -> . FLOAT
    (67) value -> . INTEGER
    (68) value -> . WIN
    (69) value -> . FAIL
    (70) value -> . DICT

    I               shift and go to state 88
    SIZE            shift and go to state 28
    ABSLUT          shift and go to state 29
    SUM             shift and go to state 31
    DIFF            shift and go to state 32
    PRODUKT         shift and go to state 33
    QUOSHUNT        shift and go to state 34
    MOD             shift and go to state 35
    BIGGR           shift and go to state 36
    SMALLR          shift and go to state 37
    BOTH            shift and go to state 38
    EITHER          shift and go to state 39
    WON             shift and go to state 40
    NOT             shift and go to state 41
    ALL             shift and go to state 42
    ANY             shift and go to state 43
    DIFFRINT        shift and go to state 44
    SMOOSH          shift and go to state 45
    MAEK            shift and go to state 46
    ID              shift and go to state 27
    IT              shift and go to state 56
    STRING          shift and go to state 57
    FLOAT           shift and go to state 6
    INTEGER         shift and go to state 58
    WIN             shift and go to state 59
    FAIL            shift and go to state 60
    DICT            shift and go to state 61

    variable                       shift and go to state 87
    sep_yr_args                    shift and go to state 184
    expr                           shift and go to state 185
    value                          shift and go to state 30

state 153

    (41) cast -> variable IS NOW A . type
    (60) type -> . YARN
    (61) type -> . NUMBR
    (62) type -> . NUMBAR
    (63) type -> . NOOB
    (64) type -> . BUKKIT

    YARN            shift and go to state 138
    NUMBR           shift and go to state 139
    NUMBAR          shift and go to state 140
    NOOB            shift and go to state 141
    BUKKIT          shift and go to state 142

    type                           shift and go to state 186

state 154

    (42) cast -> variable R MAEK variable . A type
    (43) cast -> variable R MAEK variable . type
    (40) expr -> variable . APOSTROPHE_Z variable
    (56) expr -> variable . IZ ID YR sep_yr_args MKAY
    (57) expr -> variable . IZ ID
    (77) expr -> variable .
    (60) type -> . YARN
    (61) type -> . NUMBR
    (62) type -> . NUMBAR
    (63) type -> . NOOB
    (64) type -> . BUKKIT

  ! shift/reduce conflict for A resolved as shift
  ! shift/reduce conflict for YARN resolved as shift
  ! shift/reduce conflict for NUMBR resolved as shift
  ! shift/reduce conflict for NUMBAR resolved as shift
  ! shift/reduce conflict for NOOB resolved as shift
  ! shift/reduce conflict for BUKKIT resolved as shift
    A               shift and go to state 187
    APOSTROPHE_Z    shift and go to state 66
    IZ              shift and go to state 67
    YARN            shift and go to state 138
    NUMBR           shift and go to state 139
    NUMBAR          shift and go to state 140
    NOOB            shift and go to state 141
    BUKKIT          shift and go to state 142

  ! A               [ reduce using rule 77 (expr -> variable .) ]
  ! YARN            [ reduce using rule 77 (expr -> variable .) ]
  ! NUMBR           [ reduce using rule 77 (expr -> variable .) ]
  ! NUMBAR          [ reduce using rule 77 (expr -> variable .) ]
  ! NOOB            [ reduce using rule 77 (expr -> variable .) ]
  ! BUKKIT          [ reduce using rule 77 (expr -> variable .) ]

    type                           shift and go to state 188

state 155

    (38) assign_bukkit -> variable HAS A variable . ITZ expr

    ITZ             shift and go to state 189


state 156

    (54) expr -> I IZ ID YR . sep_yr_args MKAY
    (48) sep_yr_args -> . sep_yr_args AN YR expr
    (49) sep_yr_args -> . expr
    (40) expr -> . variable APOSTROPHE_Z variable
    (54) expr -> . I IZ ID YR sep_yr_args MKAY
    (55) expr -> . I IZ ID
    (56) expr -> . variable IZ ID YR sep_yr_args MKAY
    (57) expr -> . variable IZ ID
    (74) expr -> . SIZE OF expr
    (75) expr -> . ABSLUT OF expr
    (76) expr -> . value
    (77) expr -> . variable
    (78) expr -> . SUM OF expr AN expr
    (79) expr -> . DIFF OF expr AN expr
    (80) expr -> . PRODUKT OF expr AN expr
    (81) expr -> . QUOSHUNT OF expr AN expr
    (82) expr -> . MOD OF expr AN expr
    (83) expr -> . BIGGR OF expr AN expr
    (84) expr -> . SMALLR OF expr AN expr
    (85) expr -> . BOTH OF expr AN expr
    (86) expr -> . EITHER OF expr AN expr
    (87) expr -> . WON OF expr AN expr
    (88) expr -> . NOT expr
    (89) expr -> . ALL OF sep_args MKAY
    (90) expr -> . ANY OF sep_args MKAY
    (91) expr -> . ALL OF args MKAY
    (92) expr -> . ANY OF args MKAY
    (93) expr -> . BOTH SAEM expr AN expr
    (94) expr -> . DIFFRINT expr AN expr
    (95) expr -> . SMOOSH sep_args MKAY
    (96) expr -> . SMOOSH args MKAY
    (97) expr -> . MAEK expr A type
    (98) expr -> . MAEK expr type
    (99) variable -> . ID
    (100) variable -> . IT
    (65) value -> . STRING
    (66) value -> . FLOAT
    (67) value -> . INTEGER
    (68) value -> . WIN
    (69) value -> . FAIL
    (70) value -> . DICT

    I               shift and go to state 88
    SIZE            shift and go to state 28
    ABSLUT          shift and go to state 29
    SUM             shift and go to state 31
    DIFF            shift and go to state 32
    PRODUKT         shift and go to state 33
    QUOSHUNT        shift and go to state 34
    MOD             shift and go to state 35
    BIGGR           shift and go to state 36
    SMALLR          shift and go to state 37
    BOTH            shift and go to state 38
    EITHER          shift and go to state 39
    WON             shift and go to state 40
    NOT             shift and go to state 41
    ALL             shift and go to state 42
    ANY             shift and go to state 43
    DIFFRINT        shift and go to state 44
    SMOOSH          shift and go to state 45
    MAEK            shift and go to state 46
    ID              shift and go to state 27
    IT              shift and go to state 56
    STRING          shift and go to state 57
    FLOAT           shift and go to state 6
    INTEGER         shift and go to state 58
    WIN             shift and go to state 59
    FAIL            shift and go to state 60
    DICT            shift and go to state 61

    sep_yr_args                    shift and go to state 190
    expr                           shift and go to state 185
    variable                       shift and go to state 87
    value                          shift and go to state 30

state 157

    (34) decl -> I HAS A variable .
    (35) decl -> I HAS A variable . ITZ expr
    (36) decl -> I HAS A variable . ITZ A type

    NEWLINE         reduce using rule 34 (decl -> I HAS A variable .)
    COMMA           reduce using rule 34 (decl -> I HAS A variable .)
    ITZ             shift and go to state 191


state 158

    (78) expr -> SUM OF expr AN . expr
    (40) expr -> . variable APOSTROPHE_Z variable
    (54) expr -> . I IZ ID YR sep_yr_args MKAY
    (55) expr -> . I IZ ID
    (56) expr -> . variable IZ ID YR sep_yr_args MKAY
    (57) expr -> . variable IZ ID
    (74) expr -> . SIZE OF expr
    (75) expr -> . ABSLUT OF expr
    (76) expr -> . value
    (77) expr -> . variable
    (78) expr -> . SUM OF expr AN expr
    (79) expr -> . DIFF OF expr AN expr
    (80) expr -> . PRODUKT OF expr AN expr
    (81) expr -> . QUOSHUNT OF expr AN expr
    (82) expr -> . MOD OF expr AN expr
    (83) expr -> . BIGGR OF expr AN expr
    (84) expr -> . SMALLR OF expr AN expr
    (85) expr -> . BOTH OF expr AN expr
    (86) expr -> . EITHER OF expr AN expr
    (87) expr -> . WON OF expr AN expr
    (88) expr -> . NOT expr
    (89) expr -> . ALL OF sep_args MKAY
    (90) expr -> . ANY OF sep_args MKAY
    (91) expr -> . ALL OF args MKAY
    (92) expr -> . ANY OF args MKAY
    (93) expr -> . BOTH SAEM expr AN expr
    (94) expr -> . DIFFRINT expr AN expr
    (95) expr -> . SMOOSH sep_args MKAY
    (96) expr -> . SMOOSH args MKAY
    (97) expr -> . MAEK expr A type
    (98) expr -> . MAEK expr type
    (99) variable -> . ID
    (100) variable -> . IT
    (65) value -> . STRING
    (66) value -> . FLOAT
    (67) value -> . INTEGER
    (68) value -> . WIN
    (69) value -> . FAIL
    (70) value -> . DICT

    I               shift and go to state 88
    SIZE            shift and go to state 28
    ABSLUT          shift and go to state 29
    SUM             shift and go to state 31
    DIFF            shift and go to state 32
    PRODUKT         shift and go to state 33
    QUOSHUNT        shift and go to state 34
    MOD             shift and go to state 35
    BIGGR           shift and go to state 36
    SMALLR          shift and go to state 37
    BOTH            shift and go to state 38
    EITHER          shift and go to state 39
    WON             shift and go to state 40
    NOT             shift and go to state 41
    ALL             shift and go to state 42
    ANY             shift and go to state 43
    DIFFRINT        shift and go to state 44
    SMOOSH          shift and go to state 45
    MAEK            shift and go to state 46
    ID              shift and go to state 27
    IT              shift and go to state 56
    STRING          shift and go to state 57
    FLOAT           shift and go to state 6
    INTEGER         shift and go to state 58
    WIN             shift and go to state 59
    FAIL            shift and go to state 60
    DICT            shift and go to state 61

    expr                           shift and go to state 192
    variable                       shift and go to state 87
    value                          shift and go to state 30

state 159

    (79) expr -> DIFF OF expr AN . expr
    (40) expr -> . variable APOSTROPHE_Z variable
    (54) expr -> . I IZ ID YR sep_yr_args MKAY
    (55) expr -> . I IZ ID
    (56) expr -> . variable IZ ID YR sep_yr_args MKAY
    (57) expr -> . variable IZ ID
    (74) expr -> . SIZE OF expr
    (75) expr -> . ABSLUT OF expr
    (76) expr -> . value
    (77) expr -> . variable
    (78) expr -> . SUM OF expr AN expr
    (79) expr -> . DIFF OF expr AN expr
    (80) expr -> . PRODUKT OF expr AN expr
    (81) expr -> . QUOSHUNT OF expr AN expr
    (82) expr -> . MOD OF expr AN expr
    (83) expr -> . BIGGR OF expr AN expr
    (84) expr -> . SMALLR OF expr AN expr
    (85) expr -> . BOTH OF expr AN expr
    (86) expr -> . EITHER OF expr AN expr
    (87) expr -> . WON OF expr AN expr
    (88) expr -> . NOT expr
    (89) expr -> . ALL OF sep_args MKAY
    (90) expr -> . ANY OF sep_args MKAY
    (91) expr -> . ALL OF args MKAY
    (92) expr -> . ANY OF args MKAY
    (93) expr -> . BOTH SAEM expr AN expr
    (94) expr -> . DIFFRINT expr AN expr
    (95) expr -> . SMOOSH sep_args MKAY
    (96) expr -> . SMOOSH args MKAY
    (97) expr -> . MAEK expr A type
    (98) expr -> . MAEK expr type
    (99) variable -> . ID
    (100) variable -> . IT
    (65) value -> . STRING
    (66) value -> . FLOAT
    (67) value -> . INTEGER
    (68) value -> . WIN
    (69) value -> . FAIL
    (70) value -> . DICT

    I               shift and go to state 88
    SIZE            shift and go to state 28
    ABSLUT          shift and go to state 29
    SUM             shift and go to state 31
    DIFF            shift and go to state 32
    PRODUKT         shift and go to state 33
    QUOSHUNT        shift and go to state 34
    MOD             shift and go to state 35
    BIGGR           shift and go to state 36
    SMALLR          shift and go to state 37
    BOTH            shift and go to state 38
    EITHER          shift and go to state 39
    WON             shift and go to state 40
    NOT             shift and go to state 41
    ALL             shift and go to state 42
    ANY             shift and go to state 43
    DIFFRINT        shift and go to state 44
    SMOOSH          shift and go to state 45
    MAEK            shift and go to state 46
    ID              shift and go to state 27
    IT              shift and go to state 56
    STRING          shift and go to state 57
    FLOAT           shift and go to state 6
    INTEGER         shift and go to state 58
    WIN             shift and go to state 59
    FAIL            shift and go to state 60
    DICT            shift and go to state 61

    expr                           shift and go to state 193
    variable                       shift and go to state 87
    value                          shift and go to state 30

state 160

    (80) expr -> PRODUKT OF expr AN . expr
    (40) expr -> . variable APOSTROPHE_Z variable
    (54) expr -> . I IZ ID YR sep_yr_args MKAY
    (55) expr -> . I IZ ID
    (56) expr -> . variable IZ ID YR sep_yr_args MKAY
    (57) expr -> . variable IZ ID
    (74) expr -> . SIZE OF expr
    (75) expr -> . ABSLUT OF expr
    (76) expr -> . value
    (77) expr -> . variable
    (78) expr -> . SUM OF expr AN expr
    (79) expr -> . DIFF OF expr AN expr
    (80) expr -> . PRODUKT OF expr AN expr
    (81) expr -> . QUOSHUNT OF expr AN expr
    (82) expr -> . MOD OF expr AN expr
    (83) expr -> . BIGGR OF expr AN expr
    (84) expr -> . SMALLR OF expr AN expr
    (85) expr -> . BOTH OF expr AN expr
    (86) expr -> . EITHER OF expr AN expr
    (87) expr -> . WON OF expr AN expr
    (88) expr -> . NOT expr
    (89) expr -> . ALL OF sep_args MKAY
    (90) expr -> . ANY OF sep_args MKAY
    (91) expr -> . ALL OF args MKAY
    (92) expr -> . ANY OF args MKAY
    (93) expr -> . BOTH SAEM expr AN expr
    (94) expr -> . DIFFRINT expr AN expr
    (95) expr -> . SMOOSH sep_args MKAY
    (96) expr -> . SMOOSH args MKAY
    (97) expr -> . MAEK expr A type
    (98) expr -> . MAEK expr type
    (99) variable -> . ID
    (100) variable -> . IT
    (65) value -> . STRING
    (66) value -> . FLOAT
    (67) value -> . INTEGER
    (68) value -> . WIN
    (69) value -> . FAIL
    (70) value -> . DICT

    I               shift and go to state 88
    SIZE            shift and go to state 28
    ABSLUT          shift and go to state 29
    SUM             shift and go to state 31
    DIFF            shift and go to state 32
    PRODUKT         shift and go to state 33
    QUOSHUNT        shift and go to state 34
    MOD             shift and go to state 35
    BIGGR           shift and go to state 36
    SMALLR          shift and go to state 37
    BOTH            shift and go to state 38
    EITHER          shift and go to state 39
    WON             shift and go to state 40
    NOT             shift and go to state 41
    ALL             shift and go to state 42
    ANY             shift and go to state 43
    DIFFRINT        shift and go to state 44
    SMOOSH          shift and go to state 45
    MAEK            shift and go to state 46
    ID              shift and go to state 27
    IT              shift and go to state 56
    STRING          shift and go to state 57
    FLOAT           shift and go to state 6
    INTEGER         shift and go to state 58
    WIN             shift and go to state 59
    FAIL            shift and go to state 60
    DICT            shift and go to state 61

    expr                           shift and go to state 194
    variable                       shift and go to state 87
    value                          shift and go to state 30

state 161

    (81) expr -> QUOSHUNT OF expr AN . expr
    (40) expr -> . variable APOSTROPHE_Z variable
    (54) expr -> . I IZ ID YR sep_yr_args MKAY
    (55) expr -> . I IZ ID
    (56) expr -> . variable IZ ID YR sep_yr_args MKAY
    (57) expr -> . variable IZ ID
    (74) expr -> . SIZE OF expr
    (75) expr -> . ABSLUT OF expr
    (76) expr -> . value
    (77) expr -> . variable
    (78) expr -> . SUM OF expr AN expr
    (79) expr -> . DIFF OF expr AN expr
    (80) expr -> . PRODUKT OF expr AN expr
    (81) expr -> . QUOSHUNT OF expr AN expr
    (82) expr -> . MOD OF expr AN expr
    (83) expr -> . BIGGR OF expr AN expr
    (84) expr -> . SMALLR OF expr AN expr
    (85) expr -> . BOTH OF expr AN expr
    (86) expr -> . EITHER OF expr AN expr
    (87) expr -> . WON OF expr AN expr
    (88) expr -> . NOT expr
    (89) expr -> . ALL OF sep_args MKAY
    (90) expr -> . ANY OF sep_args MKAY
    (91) expr -> . ALL OF args MKAY
    (92) expr -> . ANY OF args MKAY
    (93) expr -> . BOTH SAEM expr AN expr
    (94) expr -> . DIFFRINT expr AN expr
    (95) expr -> . SMOOSH sep_args MKAY
    (96) expr -> . SMOOSH args MKAY
    (97) expr -> . MAEK expr A type
    (98) expr -> . MAEK expr type
    (99) variable -> . ID
    (100) variable -> . IT
    (65) value -> . STRING
    (66) value -> . FLOAT
    (67) value -> . INTEGER
    (68) value -> . WIN
    (69) value -> . FAIL
    (70) value -> . DICT

    I               shift and go to state 88
    SIZE            shift and go to state 28
    ABSLUT          shift and go to state 29
    SUM             shift and go to state 31
    DIFF            shift and go to state 32
    PRODUKT         shift and go to state 33
    QUOSHUNT        shift and go to state 34
    MOD             shift and go to state 35
    BIGGR           shift and go to state 36
    SMALLR          shift and go to state 37
    BOTH            shift and go to state 38
    EITHER          shift and go to state 39
    WON             shift and go to state 40
    NOT             shift and go to state 41
    ALL             shift and go to state 42
    ANY             shift and go to state 43
    DIFFRINT        shift and go to state 44
    SMOOSH          shift and go to state 45
    MAEK            shift and go to state 46
    ID              shift and go to state 27
    IT              shift and go to state 56
    STRING          shift and go to state 57
    FLOAT           shift and go to state 6
    INTEGER         shift and go to state 58
    WIN             shift and go to state 59
    FAIL            shift and go to state 60
    DICT            shift and go to state 61

    expr                           shift and go to state 195
    variable                       shift and go to state 87
    value                          shift and go to state 30

state 162

    (82) expr -> MOD OF expr AN . expr
    (40) expr -> . variable APOSTROPHE_Z variable
    (54) expr -> . I IZ ID YR sep_yr_args MKAY
    (55) expr -> . I IZ ID
    (56) expr -> . variable IZ ID YR sep_yr_args MKAY
    (57) expr -> . variable IZ ID
    (74) expr -> . SIZE OF expr
    (75) expr -> . ABSLUT OF expr
    (76) expr -> . value
    (77) expr -> . variable
    (78) expr -> . SUM OF expr AN expr
    (79) expr -> . DIFF OF expr AN expr
    (80) expr -> . PRODUKT OF expr AN expr
    (81) expr -> . QUOSHUNT OF expr AN expr
    (82) expr -> . MOD OF expr AN expr
    (83) expr -> . BIGGR OF expr AN expr
    (84) expr -> . SMALLR OF expr AN expr
    (85) expr -> . BOTH OF expr AN expr
    (86) expr -> . EITHER OF expr AN expr
    (87) expr -> . WON OF expr AN expr
    (88) expr -> . NOT expr
    (89) expr -> . ALL OF sep_args MKAY
    (90) expr -> . ANY OF sep_args MKAY
    (91) expr -> . ALL OF args MKAY
    (92) expr -> . ANY OF args MKAY
    (93) expr -> . BOTH SAEM expr AN expr
    (94) expr -> . DIFFRINT expr AN expr
    (95) expr -> . SMOOSH sep_args MKAY
    (96) expr -> . SMOOSH args MKAY
    (97) expr -> . MAEK expr A type
    (98) expr -> . MAEK expr type
    (99) variable -> . ID
    (100) variable -> . IT
    (65) value -> . STRING
    (66) value -> . FLOAT
    (67) value -> . INTEGER
    (68) value -> . WIN
    (69) value -> . FAIL
    (70) value -> . DICT

    I               shift and go to state 88
    SIZE            shift and go to state 28
    ABSLUT          shift and go to state 29
    SUM             shift and go to state 31
    DIFF            shift and go to state 32
    PRODUKT         shift and go to state 33
    QUOSHUNT        shift and go to state 34
    MOD             shift and go to state 35
    BIGGR           shift and go to state 36
    SMALLR          shift and go to state 37
    BOTH            shift and go to state 38
    EITHER          shift and go to state 39
    WON             shift and go to state 40
    NOT             shift and go to state 41
    ALL             shift and go to state 42
    ANY             shift and go to state 43
    DIFFRINT        shift and go to state 44
    SMOOSH          shift and go to state 45
    MAEK            shift and go to state 46
    ID              shift and go to state 27
    IT              shift and go to state 56
    STRING          shift and go to state 57
    FLOAT           shift and go to state 6
    INTEGER         shift and go to state 58
    WIN             shift and go to state 59
    FAIL            shift and go to state 60
    DICT            shift and go to state 61

    expr                           shift and go to state 196
    variable                       shift and go to state 87
    value                          shift and go to state 30

state 163

    (83) expr -> BIGGR OF expr AN . expr
    (40) expr -> . variable APOSTROPHE_Z variable
    (54) expr -> . I IZ ID YR sep_yr_args MKAY
    (55) expr -> . I IZ ID
    (56) expr -> . variable IZ ID YR sep_yr_args MKAY
    (57) expr -> . variable IZ ID
    (74) expr -> . SIZE OF expr
    (75) expr -> . ABSLUT OF expr
    (76) expr -> . value
    (77) expr -> . variable
    (78) expr -> . SUM OF expr AN expr
    (79) expr -> . DIFF OF expr AN expr
    (80) expr -> . PRODUKT OF expr AN expr
    (81) expr -> . QUOSHUNT OF expr AN expr
    (82) expr -> . MOD OF expr AN expr
    (83) expr -> . BIGGR OF expr AN expr
    (84) expr -> . SMALLR OF expr AN expr
    (85) expr -> . BOTH OF expr AN expr
    (86) expr -> . EITHER OF expr AN expr
    (87) expr -> . WON OF expr AN expr
    (88) expr -> . NOT expr
    (89) expr -> . ALL OF sep_args MKAY
    (90) expr -> . ANY OF sep_args MKAY
    (91) expr -> . ALL OF args MKAY
    (92) expr -> . ANY OF args MKAY
    (93) expr -> . BOTH SAEM expr AN expr
    (94) expr -> . DIFFRINT expr AN expr
    (95) expr -> . SMOOSH sep_args MKAY
    (96) expr -> . SMOOSH args MKAY
    (97) expr -> . MAEK expr A type
    (98) expr -> . MAEK expr type
    (99) variable -> . ID
    (100) variable -> . IT
    (65) value -> . STRING
    (66) value -> . FLOAT
    (67) value -> . INTEGER
    (68) value -> . WIN
    (69) value -> . FAIL
    (70) value -> . DICT

    I               shift and go to state 88
    SIZE            shift and go to state 28
    ABSLUT          shift and go to state 29
    SUM             shift and go to state 31
    DIFF            shift and go to state 32
    PRODUKT         shift and go to state 33
    QUOSHUNT        shift and go to state 34
    MOD             shift and go to state 35
    BIGGR           shift and go to state 36
    SMALLR          shift and go to state 37
    BOTH            shift and go to state 38
    EITHER          shift and go to state 39
    WON             shift and go to state 40
    NOT             shift and go to state 41
    ALL             shift and go to state 42
    ANY             shift and go to state 43
    DIFFRINT        shift and go to state 44
    SMOOSH          shift and go to state 45
    MAEK            shift and go to state 46
    ID              shift and go to state 27
    IT              shift and go to state 56
    STRING          shift and go to state 57
    FLOAT           shift and go to state 6
    INTEGER         shift and go to state 58
    WIN             shift and go to state 59
    FAIL            shift and go to state 60
    DICT            shift and go to state 61

    expr                           shift and go to state 197
    variable                       shift and go to state 87
    value                          shift and go to state 30

state 164

    (84) expr -> SMALLR OF expr AN . expr
    (40) expr -> . variable APOSTROPHE_Z variable
    (54) expr -> . I IZ ID YR sep_yr_args MKAY
    (55) expr -> . I IZ ID
    (56) expr -> . variable IZ ID YR sep_yr_args MKAY
    (57) expr -> . variable IZ ID
    (74) expr -> . SIZE OF expr
    (75) expr -> . ABSLUT OF expr
    (76) expr -> . value
    (77) expr -> . variable
    (78) expr -> . SUM OF expr AN expr
    (79) expr -> . DIFF OF expr AN expr
    (80) expr -> . PRODUKT OF expr AN expr
    (81) expr -> . QUOSHUNT OF expr AN expr
    (82) expr -> . MOD OF expr AN expr
    (83) expr -> . BIGGR OF expr AN expr
    (84) expr -> . SMALLR OF expr AN expr
    (85) expr -> . BOTH OF expr AN expr
    (86) expr -> . EITHER OF expr AN expr
    (87) expr -> . WON OF expr AN expr
    (88) expr -> . NOT expr
    (89) expr -> . ALL OF sep_args MKAY
    (90) expr -> . ANY OF sep_args MKAY
    (91) expr -> . ALL OF args MKAY
    (92) expr -> . ANY OF args MKAY
    (93) expr -> . BOTH SAEM expr AN expr
    (94) expr -> . DIFFRINT expr AN expr
    (95) expr -> . SMOOSH sep_args MKAY
    (96) expr -> . SMOOSH args MKAY
    (97) expr -> . MAEK expr A type
    (98) expr -> . MAEK expr type
    (99) variable -> . ID
    (100) variable -> . IT
    (65) value -> . STRING
    (66) value -> . FLOAT
    (67) value -> . INTEGER
    (68) value -> . WIN
    (69) value -> . FAIL
    (70) value -> . DICT

    I               shift and go to state 88
    SIZE            shift and go to state 28
    ABSLUT          shift and go to state 29
    SUM             shift and go to state 31
    DIFF            shift and go to state 32
    PRODUKT         shift and go to state 33
    QUOSHUNT        shift and go to state 34
    MOD             shift and go to state 35
    BIGGR           shift and go to state 36
    SMALLR          shift and go to state 37
    BOTH            shift and go to state 38
    EITHER          shift and go to state 39
    WON             shift and go to state 40
    NOT             shift and go to state 41
    ALL             shift and go to state 42
    ANY             shift and go to state 43
    DIFFRINT        shift and go to state 44
    SMOOSH          shift and go to state 45
    MAEK            shift and go to state 46
    ID              shift and go to state 27
    IT              shift and go to state 56
    STRING          shift and go to state 57
    FLOAT           shift and go to state 6
    INTEGER         shift and go to state 58
    WIN             shift and go to state 59
    FAIL            shift and go to state 60
    DICT            shift and go to state 61

    expr                           shift and go to state 198
    variable                       shift and go to state 87
    value                          shift and go to state 30

state 165

    (85) expr -> BOTH OF expr AN . expr
    (40) expr -> . variable APOSTROPHE_Z variable
    (54) expr -> . I IZ ID YR sep_yr_args MKAY
    (55) expr -> . I IZ ID
    (56) expr -> . variable IZ ID YR sep_yr_args MKAY
    (57) expr -> . variable IZ ID
    (74) expr -> . SIZE OF expr
    (75) expr -> . ABSLUT OF expr
    (76) expr -> . value
    (77) expr -> . variable
    (78) expr -> . SUM OF expr AN expr
    (79) expr -> . DIFF OF expr AN expr
    (80) expr -> . PRODUKT OF expr AN expr
    (81) expr -> . QUOSHUNT OF expr AN expr
    (82) expr -> . MOD OF expr AN expr
    (83) expr -> . BIGGR OF expr AN expr
    (84) expr -> . SMALLR OF expr AN expr
    (85) expr -> . BOTH OF expr AN expr
    (86) expr -> . EITHER OF expr AN expr
    (87) expr -> . WON OF expr AN expr
    (88) expr -> . NOT expr
    (89) expr -> . ALL OF sep_args MKAY
    (90) expr -> . ANY OF sep_args MKAY
    (91) expr -> . ALL OF args MKAY
    (92) expr -> . ANY OF args MKAY
    (93) expr -> . BOTH SAEM expr AN expr
    (94) expr -> . DIFFRINT expr AN expr
    (95) expr -> . SMOOSH sep_args MKAY
    (96) expr -> . SMOOSH args MKAY
    (97) expr -> . MAEK expr A type
    (98) expr -> . MAEK expr type
    (99) variable -> . ID
    (100) variable -> . IT
    (65) value -> . STRING
    (66) value -> . FLOAT
    (67) value -> . INTEGER
    (68) value -> . WIN
    (69) value -> . FAIL
    (70) value -> . DICT

    I               shift and go to state 88
    SIZE            shift and go to state 28
    ABSLUT          shift and go to state 29
    SUM             shift and go to state 31
    DIFF            shift and go to state 32
    PRODUKT         shift and go to state 33
    QUOSHUNT        shift and go to state 34
    MOD             shift and go to state 35
    BIGGR           shift and go to state 36
    SMALLR          shift and go to state 37
    BOTH            shift and go to state 38
    EITHER          shift and go to state 39
    WON             shift and go to state 40
    NOT             shift and go to state 41
    ALL             shift and go to state 42
    ANY             shift and go to state 43
    DIFFRINT        shift and go to state 44
    SMOOSH          shift and go to state 45
    MAEK            shift and go to state 46
    ID              shift and go to state 27
    IT              shift and go to state 56
    STRING          shift and go to state 57
    FLOAT           shift and go to state 6
    INTEGER         shift and go to state 58
    WIN             shift and go to state 59
    FAIL            shift and go to state 60
    DICT            shift and go to state 61

    expr                           shift and go to state 199
    variable                       shift and go to state 87
    value                          shift and go to state 30

state 166

    (93) expr -> BOTH SAEM expr AN . expr
    (40) expr -> . variable APOSTROPHE_Z variable
    (54) expr -> . I IZ ID YR sep_yr_args MKAY
    (55) expr -> . I IZ ID
    (56) expr -> . variable IZ ID YR sep_yr_args MKAY
    (57) expr -> . variable IZ ID
    (74) expr -> . SIZE OF expr
    (75) expr -> . ABSLUT OF expr
    (76) expr -> . value
    (77) expr -> . variable
    (78) expr -> . SUM OF expr AN expr
    (79) expr -> . DIFF OF expr AN expr
    (80) expr -> . PRODUKT OF expr AN expr
    (81) expr -> . QUOSHUNT OF expr AN expr
    (82) expr -> . MOD OF expr AN expr
    (83) expr -> . BIGGR OF expr AN expr
    (84) expr -> . SMALLR OF expr AN expr
    (85) expr -> . BOTH OF expr AN expr
    (86) expr -> . EITHER OF expr AN expr
    (87) expr -> . WON OF expr AN expr
    (88) expr -> . NOT expr
    (89) expr -> . ALL OF sep_args MKAY
    (90) expr -> . ANY OF sep_args MKAY
    (91) expr -> . ALL OF args MKAY
    (92) expr -> . ANY OF args MKAY
    (93) expr -> . BOTH SAEM expr AN expr
    (94) expr -> . DIFFRINT expr AN expr
    (95) expr -> . SMOOSH sep_args MKAY
    (96) expr -> . SMOOSH args MKAY
    (97) expr -> . MAEK expr A type
    (98) expr -> . MAEK expr type
    (99) variable -> . ID
    (100) variable -> . IT
    (65) value -> . STRING
    (66) value -> . FLOAT
    (67) value -> . INTEGER
    (68) value -> . WIN
    (69) value -> . FAIL
    (70) value -> . DICT

    I               shift and go to state 88
    SIZE            shift and go to state 28
    ABSLUT          shift and go to state 29
    SUM             shift and go to state 31
    DIFF            shift and go to state 32
    PRODUKT         shift and go to state 33
    QUOSHUNT        shift and go to state 34
    MOD             shift and go to state 35
    BIGGR           shift and go to state 36
    SMALLR          shift and go to state 37
    BOTH            shift and go to state 38
    EITHER          shift and go to state 39
    WON             shift and go to state 40
    NOT             shift and go to state 41
    ALL             shift and go to state 42
    ANY             shift and go to state 43
    DIFFRINT        shift and go to state 44
    SMOOSH          shift and go to state 45
    MAEK            shift and go to state 46
    ID              shift and go to state 27
    IT              shift and go to state 56
    STRING          shift and go to state 57
    FLOAT           shift and go to state 6
    INTEGER         shift and go to state 58
    WIN             shift and go to state 59
    FAIL            shift and go to state 60
    DICT            shift and go to state 61

    expr                           shift and go to state 200
    variable                       shift and go to state 87
    value                          shift and go to state 30

state 167

    (86) expr -> EITHER OF expr AN . expr
    (40) expr -> . variable APOSTROPHE_Z variable
    (54) expr -> . I IZ ID YR sep_yr_args MKAY
    (55) expr -> . I IZ ID
    (56) expr -> . variable IZ ID YR sep_yr_args MKAY
    (57) expr -> . variable IZ ID
    (74) expr -> . SIZE OF expr
    (75) expr -> . ABSLUT OF expr
    (76) expr -> . value
    (77) expr -> . variable
    (78) expr -> . SUM OF expr AN expr
    (79) expr -> . DIFF OF expr AN expr
    (80) expr -> . PRODUKT OF expr AN expr
    (81) expr -> . QUOSHUNT OF expr AN expr
    (82) expr -> . MOD OF expr AN expr
    (83) expr -> . BIGGR OF expr AN expr
    (84) expr -> . SMALLR OF expr AN expr
    (85) expr -> . BOTH OF expr AN expr
    (86) expr -> . EITHER OF expr AN expr
    (87) expr -> . WON OF expr AN expr
    (88) expr -> . NOT expr
    (89) expr -> . ALL OF sep_args MKAY
    (90) expr -> . ANY OF sep_args MKAY
    (91) expr -> . ALL OF args MKAY
    (92) expr -> . ANY OF args MKAY
    (93) expr -> . BOTH SAEM expr AN expr
    (94) expr -> . DIFFRINT expr AN expr
    (95) expr -> . SMOOSH sep_args MKAY
    (96) expr -> . SMOOSH args MKAY
    (97) expr -> . MAEK expr A type
    (98) expr -> . MAEK expr type
    (99) variable -> . ID
    (100) variable -> . IT
    (65) value -> . STRING
    (66) value -> . FLOAT
    (67) value -> . INTEGER
    (68) value -> . WIN
    (69) value -> . FAIL
    (70) value -> . DICT

    I               shift and go to state 88
    SIZE            shift and go to state 28
    ABSLUT          shift and go to state 29
    SUM             shift and go to state 31
    DIFF            shift and go to state 32
    PRODUKT         shift and go to state 33
    QUOSHUNT        shift and go to state 34
    MOD             shift and go to state 35
    BIGGR           shift and go to state 36
    SMALLR          shift and go to state 37
    BOTH            shift and go to state 38
    EITHER          shift and go to state 39
    WON             shift and go to state 40
    NOT             shift and go to state 41
    ALL             shift and go to state 42
    ANY             shift and go to state 43
    DIFFRINT        shift and go to state 44
    SMOOSH          shift and go to state 45
    MAEK            shift and go to state 46
    ID              shift and go to state 27
    IT              shift and go to state 56
    STRING          shift and go to state 57
    FLOAT           shift and go to state 6
    INTEGER         shift and go to state 58
    WIN             shift and go to state 59
    FAIL            shift and go to state 60
    DICT            shift and go to state 61

    expr                           shift and go to state 201
    variable                       shift and go to state 87
    value                          shift and go to state 30

state 168

    (87) expr -> WON OF expr AN . expr
    (40) expr -> . variable APOSTROPHE_Z variable
    (54) expr -> . I IZ ID YR sep_yr_args MKAY
    (55) expr -> . I IZ ID
    (56) expr -> . variable IZ ID YR sep_yr_args MKAY
    (57) expr -> . variable IZ ID
    (74) expr -> . SIZE OF expr
    (75) expr -> . ABSLUT OF expr
    (76) expr -> . value
    (77) expr -> . variable
    (78) expr -> . SUM OF expr AN expr
    (79) expr -> . DIFF OF expr AN expr
    (80) expr -> . PRODUKT OF expr AN expr
    (81) expr -> . QUOSHUNT OF expr AN expr
    (82) expr -> . MOD OF expr AN expr
    (83) expr -> . BIGGR OF expr AN expr
    (84) expr -> . SMALLR OF expr AN expr
    (85) expr -> . BOTH OF expr AN expr
    (86) expr -> . EITHER OF expr AN expr
    (87) expr -> . WON OF expr AN expr
    (88) expr -> . NOT expr
    (89) expr -> . ALL OF sep_args MKAY
    (90) expr -> . ANY OF sep_args MKAY
    (91) expr -> . ALL OF args MKAY
    (92) expr -> . ANY OF args MKAY
    (93) expr -> . BOTH SAEM expr AN expr
    (94) expr -> . DIFFRINT expr AN expr
    (95) expr -> . SMOOSH sep_args MKAY
    (96) expr -> . SMOOSH args MKAY
    (97) expr -> . MAEK expr A type
    (98) expr -> . MAEK expr type
    (99) variable -> . ID
    (100) variable -> . IT
    (65) value -> . STRING
    (66) value -> . FLOAT
    (67) value -> . INTEGER
    (68) value -> . WIN
    (69) value -> . FAIL
    (70) value -> . DICT

    I               shift and go to state 88
    SIZE            shift and go to state 28
    ABSLUT          shift and go to state 29
    SUM             shift and go to state 31
    DIFF            shift and go to state 32
    PRODUKT         shift and go to state 33
    QUOSHUNT        shift and go to state 34
    MOD             shift and go to state 35
    BIGGR           shift and go to state 36
    SMALLR          shift and go to state 37
    BOTH            shift and go to state 38
    EITHER          shift and go to state 39
    WON             shift and go to state 40
    NOT             shift and go to state 41
    ALL             shift and go to state 42
    ANY             shift and go to state 43
    DIFFRINT        shift and go to state 44
    SMOOSH          shift and go to state 45
    MAEK            shift and go to state 46
    ID              shift and go to state 27
    IT              shift and go to state 56
    STRING          shift and go to state 57
    FLOAT           shift and go to state 6
    INTEGER         shift and go to state 58
    WIN             shift and go to state 59
    FAIL            shift and go to state 60
    DICT            shift and go to state 61

    expr                           shift and go to state 202
    variable                       shift and go to state 87
    value                          shift and go to state 30

state 169

    (89) expr -> ALL OF sep_args MKAY .

    NEWLINE         reduce using rule 89 (expr -> ALL OF sep_args MKAY .)
    COMMA           reduce using rule 89 (expr -> ALL OF sep_args MKAY .)
    AN              reduce using rule 89 (expr -> ALL OF sep_args MKAY .)
    MKAY            reduce using rule 89 (expr -> ALL OF sep_args MKAY .)
    I               reduce using rule 89 (expr -> ALL OF sep_args MKAY .)
    SIZE            reduce using rule 89 (expr -> ALL OF sep_args MKAY .)
    ABSLUT          reduce using rule 89 (expr -> ALL OF sep_args MKAY .)
    SUM             reduce using rule 89 (expr -> ALL OF sep_args MKAY .)
    DIFF            reduce using rule 89 (expr -> ALL OF sep_args MKAY .)
    PRODUKT         reduce using rule 89 (expr -> ALL OF sep_args MKAY .)
    QUOSHUNT        reduce using rule 89 (expr -> ALL OF sep_args MKAY .)
    MOD             reduce using rule 89 (expr -> ALL OF sep_args MKAY .)
    BIGGR           reduce using rule 89 (expr -> ALL OF sep_args MKAY .)
    SMALLR          reduce using rule 89 (expr -> ALL OF sep_args MKAY .)
    BOTH            reduce using rule 89 (expr -> ALL OF sep_args MKAY .)
    EITHER          reduce using rule 89 (expr -> ALL OF sep_args MKAY .)
    WON             reduce using rule 89 (expr -> ALL OF sep_args MKAY .)
    NOT             reduce using rule 89 (expr -> ALL OF sep_args MKAY .)
    ALL             reduce using rule 89 (expr -> ALL OF sep_args MKAY .)
    ANY             reduce using rule 89 (expr -> ALL OF sep_args MKAY .)
    DIFFRINT        reduce using rule 89 (expr -> ALL OF sep_args MKAY .)
    SMOOSH          reduce using rule 89 (expr -> ALL OF sep_args MKAY .)
    MAEK            reduce using rule 89 (expr -> ALL OF sep_args MKAY .)
    ID              reduce using rule 89 (expr -> ALL OF sep_args MKAY .)
    IT              reduce using rule 89 (expr -> ALL OF sep_args MKAY .)
    STRING          reduce using rule 89 (expr -> ALL OF sep_args MKAY .)
    FLOAT           reduce using rule 89 (expr -> ALL OF sep_args MKAY .)
    INTEGER         reduce using rule 89 (expr -> ALL OF sep_args MKAY .)
    WIN             reduce using rule 89 (expr -> ALL OF sep_args MKAY .)
    FAIL            reduce using rule 89 (expr -> ALL OF sep_args MKAY .)
    DICT            reduce using rule 89 (expr -> ALL OF sep_args MKAY .)
    A               reduce using rule 89 (expr -> ALL OF sep_args MKAY .)
    YARN            reduce using rule 89 (expr -> ALL OF sep_args MKAY .)
    NUMBR           reduce using rule 89 (expr -> ALL OF sep_args MKAY .)
    NUMBAR          reduce using rule 89 (expr -> ALL OF sep_args MKAY .)
    NOOB            reduce using rule 89 (expr -> ALL OF sep_args MKAY .)
    BUKKIT          reduce using rule 89 (expr -> ALL OF sep_args MKAY .)
    EXCLAMATION     reduce using rule 89 (expr -> ALL OF sep_args MKAY .)


state 170

    (91) expr -> ALL OF args MKAY .

    NEWLINE         reduce using rule 91 (expr -> ALL OF args MKAY .)
    COMMA           reduce using rule 91 (expr -> ALL OF args MKAY .)
    AN              reduce using rule 91 (expr -> ALL OF args MKAY .)
    MKAY            reduce using rule 91 (expr -> ALL OF args MKAY .)
    I               reduce using rule 91 (expr -> ALL OF args MKAY .)
    SIZE            reduce using rule 91 (expr -> ALL OF args MKAY .)
    ABSLUT          reduce using rule 91 (expr -> ALL OF args MKAY .)
    SUM             reduce using rule 91 (expr -> ALL OF args MKAY .)
    DIFF            reduce using rule 91 (expr -> ALL OF args MKAY .)
    PRODUKT         reduce using rule 91 (expr -> ALL OF args MKAY .)
    QUOSHUNT        reduce using rule 91 (expr -> ALL OF args MKAY .)
    MOD             reduce using rule 91 (expr -> ALL OF args MKAY .)
    BIGGR           reduce using rule 91 (expr -> ALL OF args MKAY .)
    SMALLR          reduce using rule 91 (expr -> ALL OF args MKAY .)
    BOTH            reduce using rule 91 (expr -> ALL OF args MKAY .)
    EITHER          reduce using rule 91 (expr -> ALL OF args MKAY .)
    WON             reduce using rule 91 (expr -> ALL OF args MKAY .)
    NOT             reduce using rule 91 (expr -> ALL OF args MKAY .)
    ALL             reduce using rule 91 (expr -> ALL OF args MKAY .)
    ANY             reduce using rule 91 (expr -> ALL OF args MKAY .)
    DIFFRINT        reduce using rule 91 (expr -> ALL OF args MKAY .)
    SMOOSH          reduce using rule 91 (expr -> ALL OF args MKAY .)
    MAEK            reduce using rule 91 (expr -> ALL OF args MKAY .)
    ID              reduce using rule 91 (expr -> ALL OF args MKAY .)
    IT              reduce using rule 91 (expr -> ALL OF args MKAY .)
    STRING          reduce using rule 91 (expr -> ALL OF args MKAY .)
    FLOAT           reduce using rule 91 (expr -> ALL OF args MKAY .)
    INTEGER         reduce using rule 91 (expr -> ALL OF args MKAY .)
    WIN             reduce using rule 91 (expr -> ALL OF args MKAY .)
    FAIL            reduce using rule 91 (expr -> ALL OF args MKAY .)
    DICT            reduce using rule 91 (expr -> ALL OF args MKAY .)
    A               reduce using rule 91 (expr -> ALL OF args MKAY .)
    YARN            reduce using rule 91 (expr -> ALL OF args MKAY .)
    NUMBR           reduce using rule 91 (expr -> ALL OF args MKAY .)
    NUMBAR          reduce using rule 91 (expr -> ALL OF args MKAY .)
    NOOB            reduce using rule 91 (expr -> ALL OF args MKAY .)
    BUKKIT          reduce using rule 91 (expr -> ALL OF args MKAY .)
    EXCLAMATION     reduce using rule 91 (expr -> ALL OF args MKAY .)


state 171

    (90) expr -> ANY OF sep_args MKAY .

    NEWLINE         reduce using rule 90 (expr -> ANY OF sep_args MKAY .)
    COMMA           reduce using rule 90 (expr -> ANY OF sep_args MKAY .)
    AN              reduce using rule 90 (expr -> ANY OF sep_args MKAY .)
    MKAY            reduce using rule 90 (expr -> ANY OF sep_args MKAY .)
    I               reduce using rule 90 (expr -> ANY OF sep_args MKAY .)
    SIZE            reduce using rule 90 (expr -> ANY OF sep_args MKAY .)
    ABSLUT          reduce using rule 90 (expr -> ANY OF sep_args MKAY .)
    SUM             reduce using rule 90 (expr -> ANY OF sep_args MKAY .)
    DIFF            reduce using rule 90 (expr -> ANY OF sep_args MKAY .)
    PRODUKT         reduce using rule 90 (expr -> ANY OF sep_args MKAY .)
    QUOSHUNT        reduce using rule 90 (expr -> ANY OF sep_args MKAY .)
    MOD             reduce using rule 90 (expr -> ANY OF sep_args MKAY .)
    BIGGR           reduce using rule 90 (expr -> ANY OF sep_args MKAY .)
    SMALLR          reduce using rule 90 (expr -> ANY OF sep_args MKAY .)
    BOTH            reduce using rule 90 (expr -> ANY OF sep_args MKAY .)
    EITHER          reduce using rule 90 (expr -> ANY OF sep_args MKAY .)
    WON             reduce using rule 90 (expr -> ANY OF sep_args MKAY .)
    NOT             reduce using rule 90 (expr -> ANY OF sep_args MKAY .)
    ALL             reduce using rule 90 (expr -> ANY OF sep_args MKAY .)
    ANY             reduce using rule 90 (expr -> ANY OF sep_args MKAY .)
    DIFFRINT        reduce using rule 90 (expr -> ANY OF sep_args MKAY .)
    SMOOSH          reduce using rule 90 (expr -> ANY OF sep_args MKAY .)
    MAEK            reduce using rule 90 (expr -> ANY OF sep_args MKAY .)
    ID              reduce using rule 90 (expr -> ANY OF sep_args MKAY .)
    IT              reduce using rule 90 (expr -> ANY OF sep_args MKAY .)
    STRING          reduce using rule 90 (expr -> ANY OF sep_args MKAY .)
    FLOAT           reduce using rule 90 (expr -> ANY OF sep_args MKAY .)
    INTEGER         reduce using rule 90 (expr -> ANY OF sep_args MKAY .)
    WIN             reduce using rule 90 (expr -> ANY OF sep_args MKAY .)
    FAIL            reduce using rule 90 (expr -> ANY OF sep_args MKAY .)
    DICT            reduce using rule 90 (expr -> ANY OF sep_args MKAY .)
    A               reduce using rule 90 (expr -> ANY OF sep_args MKAY .)
    YARN            reduce using rule 90 (expr -> ANY OF sep_args MKAY .)
    NUMBR           reduce using rule 90 (expr -> ANY OF sep_args MKAY .)
    NUMBAR          reduce using rule 90 (expr -> ANY OF sep_args MKAY .)
    NOOB            reduce using rule 90 (expr -> ANY OF sep_args MKAY .)
    BUKKIT          reduce using rule 90 (expr -> ANY OF sep_args MKAY .)
    EXCLAMATION     reduce using rule 90 (expr -> ANY OF sep_args MKAY .)


state 172

    (92) expr -> ANY OF args MKAY .

    NEWLINE         reduce using rule 92 (expr -> ANY OF args MKAY .)
    COMMA           reduce using rule 92 (expr -> ANY OF args MKAY .)
    AN              reduce using rule 92 (expr -> ANY OF args MKAY .)
    MKAY            reduce using rule 92 (expr -> ANY OF args MKAY .)
    I               reduce using rule 92 (expr -> ANY OF args MKAY .)
    SIZE            reduce using rule 92 (expr -> ANY OF args MKAY .)
    ABSLUT          reduce using rule 92 (expr -> ANY OF args MKAY .)
    SUM             reduce using rule 92 (expr -> ANY OF args MKAY .)
    DIFF            reduce using rule 92 (expr -> ANY OF args MKAY .)
    PRODUKT         reduce using rule 92 (expr -> ANY OF args MKAY .)
    QUOSHUNT        reduce using rule 92 (expr -> ANY OF args MKAY .)
    MOD             reduce using rule 92 (expr -> ANY OF args MKAY .)
    BIGGR           reduce using rule 92 (expr -> ANY OF args MKAY .)
    SMALLR          reduce using rule 92 (expr -> ANY OF args MKAY .)
    BOTH            reduce using rule 92 (expr -> ANY OF args MKAY .)
    EITHER          reduce using rule 92 (expr -> ANY OF args MKAY .)
    WON             reduce using rule 92 (expr -> ANY OF args MKAY .)
    NOT             reduce using rule 92 (expr -> ANY OF args MKAY .)
    ALL             reduce using rule 92 (expr -> ANY OF args MKAY .)
    ANY             reduce using rule 92 (expr -> ANY OF args MKAY .)
    DIFFRINT        reduce using rule 92 (expr -> ANY OF args MKAY .)
    SMOOSH          reduce using rule 92 (expr -> ANY OF args MKAY .)
    MAEK            reduce using rule 92 (expr -> ANY OF args MKAY .)
    ID              reduce using rule 92 (expr -> ANY OF args MKAY .)
    IT              reduce using rule 92 (expr -> ANY OF args MKAY .)
    STRING          reduce using rule 92 (expr -> ANY OF args MKAY .)
    FLOAT           reduce using rule 92 (expr -> ANY OF args MKAY .)
    INTEGER         reduce using rule 92 (expr -> ANY OF args MKAY .)
    WIN             reduce using rule 92 (expr -> ANY OF args MKAY .)
    FAIL            reduce using rule 92 (expr -> ANY OF args MKAY .)
    DICT            reduce using rule 92 (expr -> ANY OF args MKAY .)
    A               reduce using rule 92 (expr -> ANY OF args MKAY .)
    YARN            reduce using rule 92 (expr -> ANY OF args MKAY .)
    NUMBR           reduce using rule 92 (expr -> ANY OF args MKAY .)
    NUMBAR          reduce using rule 92 (expr -> ANY OF args MKAY .)
    NOOB            reduce using rule 92 (expr -> ANY OF args MKAY .)
    BUKKIT          reduce using rule 92 (expr -> ANY OF args MKAY .)
    EXCLAMATION     reduce using rule 92 (expr -> ANY OF args MKAY .)


state 173

    (94) expr -> DIFFRINT expr AN expr .

    NEWLINE         reduce using rule 94 (expr -> DIFFRINT expr AN expr .)
    COMMA           reduce using rule 94 (expr -> DIFFRINT expr AN expr .)
    AN              reduce using rule 94 (expr -> DIFFRINT expr AN expr .)
    MKAY            reduce using rule 94 (expr -> DIFFRINT expr AN expr .)
    I               reduce using rule 94 (expr -> DIFFRINT expr AN expr .)
    SIZE            reduce using rule 94 (expr -> DIFFRINT expr AN expr .)
    ABSLUT          reduce using rule 94 (expr -> DIFFRINT expr AN expr .)
    SUM             reduce using rule 94 (expr -> DIFFRINT expr AN expr .)
    DIFF            reduce using rule 94 (expr -> DIFFRINT expr AN expr .)
    PRODUKT         reduce using rule 94 (expr -> DIFFRINT expr AN expr .)
    QUOSHUNT        reduce using rule 94 (expr -> DIFFRINT expr AN expr .)
    MOD             reduce using rule 94 (expr -> DIFFRINT expr AN expr .)
    BIGGR           reduce using rule 94 (expr -> DIFFRINT expr AN expr .)
    SMALLR          reduce using rule 94 (expr -> DIFFRINT expr AN expr .)
    BOTH            reduce using rule 94 (expr -> DIFFRINT expr AN expr .)
    EITHER          reduce using rule 94 (expr -> DIFFRINT expr AN expr .)
    WON             reduce using rule 94 (expr -> DIFFRINT expr AN expr .)
    NOT             reduce using rule 94 (expr -> DIFFRINT expr AN expr .)
    ALL             reduce using rule 94 (expr -> DIFFRINT expr AN expr .)
    ANY             reduce using rule 94 (expr -> DIFFRINT expr AN expr .)
    DIFFRINT        reduce using rule 94 (expr -> DIFFRINT expr AN expr .)
    SMOOSH          reduce using rule 94 (expr -> DIFFRINT expr AN expr .)
    MAEK            reduce using rule 94 (expr -> DIFFRINT expr AN expr .)
    ID              reduce using rule 94 (expr -> DIFFRINT expr AN expr .)
    IT              reduce using rule 94 (expr -> DIFFRINT expr AN expr .)
    STRING          reduce using rule 94 (expr -> DIFFRINT expr AN expr .)
    FLOAT           reduce using rule 94 (expr -> DIFFRINT expr AN expr .)
    INTEGER         reduce using rule 94 (expr -> DIFFRINT expr AN expr .)
    WIN             reduce using rule 94 (expr -> DIFFRINT expr AN expr .)
    FAIL            reduce using rule 94 (expr -> DIFFRINT expr AN expr .)
    DICT            reduce using rule 94 (expr -> DIFFRINT expr AN expr .)
    A               reduce using rule 94 (expr -> DIFFRINT expr AN expr .)
    YARN            reduce using rule 94 (expr -> DIFFRINT expr AN expr .)
    NUMBR           reduce using rule 94 (expr -> DIFFRINT expr AN expr .)
    NUMBAR          reduce using rule 94 (expr -> DIFFRINT expr AN expr .)
    NOOB            reduce using rule 94 (expr -> DIFFRINT expr AN expr .)
    BUKKIT          reduce using rule 94 (expr -> DIFFRINT expr AN expr .)
    EXCLAMATION     reduce using rule 94 (expr -> DIFFRINT expr AN expr .)


state 174

    (46) sep_args -> sep_args AN expr .

    MKAY            reduce using rule 46 (sep_args -> sep_args AN expr .)
    AN              reduce using rule 46 (sep_args -> sep_args AN expr .)


state 175

    (97) expr -> MAEK expr A type .

    NEWLINE         reduce using rule 97 (expr -> MAEK expr A type .)
    COMMA           reduce using rule 97 (expr -> MAEK expr A type .)
    AN              reduce using rule 97 (expr -> MAEK expr A type .)
    MKAY            reduce using rule 97 (expr -> MAEK expr A type .)
    I               reduce using rule 97 (expr -> MAEK expr A type .)
    SIZE            reduce using rule 97 (expr -> MAEK expr A type .)
    ABSLUT          reduce using rule 97 (expr -> MAEK expr A type .)
    SUM             reduce using rule 97 (expr -> MAEK expr A type .)
    DIFF            reduce using rule 97 (expr -> MAEK expr A type .)
    PRODUKT         reduce using rule 97 (expr -> MAEK expr A type .)
    QUOSHUNT        reduce using rule 97 (expr -> MAEK expr A type .)
    MOD             reduce using rule 97 (expr -> MAEK expr A type .)
    BIGGR           reduce using rule 97 (expr -> MAEK expr A type .)
    SMALLR          reduce using rule 97 (expr -> MAEK expr A type .)
    BOTH            reduce using rule 97 (expr -> MAEK expr A type .)
    EITHER          reduce using rule 97 (expr -> MAEK expr A type .)
    WON             reduce using rule 97 (expr -> MAEK expr A type .)
    NOT             reduce using rule 97 (expr -> MAEK expr A type .)
    ALL             reduce using rule 97 (expr -> MAEK expr A type .)
    ANY             reduce using rule 97 (expr -> MAEK expr A type .)
    DIFFRINT        reduce using rule 97 (expr -> MAEK expr A type .)
    SMOOSH          reduce using rule 97 (expr -> MAEK expr A type .)
    MAEK            reduce using rule 97 (expr -> MAEK expr A type .)
    ID              reduce using rule 97 (expr -> MAEK expr A type .)
    IT              reduce using rule 97 (expr -> MAEK expr A type .)
    STRING          reduce using rule 97 (expr -> MAEK expr A type .)
    FLOAT           reduce using rule 97 (expr -> MAEK expr A type .)
    INTEGER         reduce using rule 97 (expr -> MAEK expr A type .)
    WIN             reduce using rule 97 (expr -> MAEK expr A type .)
    FAIL            reduce using rule 97 (expr -> MAEK expr A type .)
    DICT            reduce using rule 97 (expr -> MAEK expr A type .)
    A               reduce using rule 97 (expr -> MAEK expr A type .)
    YARN            reduce using rule 97 (expr -> MAEK expr A type .)
    NUMBR           reduce using rule 97 (expr -> MAEK expr A type .)
    NUMBAR          reduce using rule 97 (expr -> MAEK expr A type .)
    NOOB            reduce using rule 97 (expr -> MAEK expr A type .)
    BUKKIT          reduce using rule 97 (expr -> MAEK expr A type .)
    EXCLAMATION     reduce using rule 97 (expr -> MAEK expr A type .)


state 176

    (37) declare_bukkit_block -> O HAI IM variable . NEWLINE statements KTHX

    NEWLINE         shift and go to state 203


state 177

    (28) if_else -> O RLY QUESTION NEWLINE . YA RLY NEWLINE statements NO WAI NEWLINE statements OIC
    (29) if_else -> O RLY QUESTION NEWLINE . YA RLY NEWLINE statements OIC
    (30) if_else -> O RLY QUESTION NEWLINE . YA RLY NEWLINE statements elifs NO WAI NEWLINE statements OIC

    YA              shift and go to state 204


state 178

    (21) loop -> IM IN YR variable . operation YR variable condition expr NEWLINE statements IM OUTTA YR variable
    (22) operation -> . UPPIN
    (23) operation -> . NERFIN

    UPPIN           shift and go to state 206
    NERFIN          shift and go to state 207

    operation                      shift and go to state 205

state 179

    (50) bukkit_function -> HOW IZ variable ID . YR sep_yr_args NEWLINE statements IF U SAY SO
    (51) bukkit_function -> HOW IZ variable ID . NEWLINE statements IF U SAY SO

    YR              shift and go to state 208
    NEWLINE         shift and go to state 209


state 180

    (52) function -> HOW IZ I ID . YR sep_yr_args NEWLINE statements IF U SAY SO
    (53) function -> HOW IZ I ID . NEWLINE statements IF U SAY SO

    YR              shift and go to state 210
    NEWLINE         shift and go to state 211


state 181

    (27) export -> YOU CAN HAS sep_args . MKAY
    (46) sep_args -> sep_args . AN expr

    MKAY            shift and go to state 212
    AN              shift and go to state 133


state 182

    (47) sep_args -> expr .

    MKAY            reduce using rule 47 (sep_args -> expr .)
    AN              reduce using rule 47 (sep_args -> expr .)


state 183

    (26) import -> CAN HAS PATH QUESTION .

    NEWLINE         reduce using rule 26 (import -> CAN HAS PATH QUESTION .)
    COMMA           reduce using rule 26 (import -> CAN HAS PATH QUESTION .)


state 184

    (56) expr -> variable IZ ID YR sep_yr_args . MKAY
    (48) sep_yr_args -> sep_yr_args . AN YR expr

    MKAY            shift and go to state 213
    AN              shift and go to state 214


state 185

    (49) sep_yr_args -> expr .

    MKAY            reduce using rule 49 (sep_yr_args -> expr .)
    AN              reduce using rule 49 (sep_yr_args -> expr .)
    NEWLINE         reduce using rule 49 (sep_yr_args -> expr .)


state 186

    (41) cast -> variable IS NOW A type .

    NEWLINE         reduce using rule 41 (cast -> variable IS NOW A type .)
    COMMA           reduce using rule 41 (cast -> variable IS NOW A type .)


state 187

    (42) cast -> variable R MAEK variable A . type
    (60) type -> . YARN
    (61) type -> . NUMBR
    (62) type -> . NUMBAR
    (63) type -> . NOOB
    (64) type -> . BUKKIT

    YARN            shift and go to state 138
    NUMBR           shift and go to state 139
    NUMBAR          shift and go to state 140
    NOOB            shift and go to state 141
    BUKKIT          shift and go to state 142

    type                           shift and go to state 215

state 188

    (43) cast -> variable R MAEK variable type .

    NEWLINE         reduce using rule 43 (cast -> variable R MAEK variable type .)
    COMMA           reduce using rule 43 (cast -> variable R MAEK variable type .)


state 189

    (38) assign_bukkit -> variable HAS A variable ITZ . expr
    (40) expr -> . variable APOSTROPHE_Z variable
    (54) expr -> . I IZ ID YR sep_yr_args MKAY
    (55) expr -> . I IZ ID
    (56) expr -> . variable IZ ID YR sep_yr_args MKAY
    (57) expr -> . variable IZ ID
    (74) expr -> . SIZE OF expr
    (75) expr -> . ABSLUT OF expr
    (76) expr -> . value
    (77) expr -> . variable
    (78) expr -> . SUM OF expr AN expr
    (79) expr -> . DIFF OF expr AN expr
    (80) expr -> . PRODUKT OF expr AN expr
    (81) expr -> . QUOSHUNT OF expr AN expr
    (82) expr -> . MOD OF expr AN expr
    (83) expr -> . BIGGR OF expr AN expr
    (84) expr -> . SMALLR OF expr AN expr
    (85) expr -> . BOTH OF expr AN expr
    (86) expr -> . EITHER OF expr AN expr
    (87) expr -> . WON OF expr AN expr
    (88) expr -> . NOT expr
    (89) expr -> . ALL OF sep_args MKAY
    (90) expr -> . ANY OF sep_args MKAY
    (91) expr -> . ALL OF args MKAY
    (92) expr -> . ANY OF args MKAY
    (93) expr -> . BOTH SAEM expr AN expr
    (94) expr -> . DIFFRINT expr AN expr
    (95) expr -> . SMOOSH sep_args MKAY
    (96) expr -> . SMOOSH args MKAY
    (97) expr -> . MAEK expr A type
    (98) expr -> . MAEK expr type
    (99) variable -> . ID
    (100) variable -> . IT
    (65) value -> . STRING
    (66) value -> . FLOAT
    (67) value -> . INTEGER
    (68) value -> . WIN
    (69) value -> . FAIL
    (70) value -> . DICT

    I               shift and go to state 88
    SIZE            shift and go to state 28
    ABSLUT          shift and go to state 29
    SUM             shift and go to state 31
    DIFF            shift and go to state 32
    PRODUKT         shift and go to state 33
    QUOSHUNT        shift and go to state 34
    MOD             shift and go to state 35
    BIGGR           shift and go to state 36
    SMALLR          shift and go to state 37
    BOTH            shift and go to state 38
    EITHER          shift and go to state 39
    WON             shift and go to state 40
    NOT             shift and go to state 41
    ALL             shift and go to state 42
    ANY             shift and go to state 43
    DIFFRINT        shift and go to state 44
    SMOOSH          shift and go to state 45
    MAEK            shift and go to state 46
    ID              shift and go to state 27
    IT              shift and go to state 56
    STRING          shift and go to state 57
    FLOAT           shift and go to state 6
    INTEGER         shift and go to state 58
    WIN             shift and go to state 59
    FAIL            shift and go to state 60
    DICT            shift and go to state 61

    variable                       shift and go to state 87
    expr                           shift and go to state 216
    value                          shift and go to state 30

state 190

    (54) expr -> I IZ ID YR sep_yr_args . MKAY
    (48) sep_yr_args -> sep_yr_args . AN YR expr

    MKAY            shift and go to state 217
    AN              shift and go to state 214


state 191

    (35) decl -> I HAS A variable ITZ . expr
    (36) decl -> I HAS A variable ITZ . A type
    (40) expr -> . variable APOSTROPHE_Z variable
    (54) expr -> . I IZ ID YR sep_yr_args MKAY
    (55) expr -> . I IZ ID
    (56) expr -> . variable IZ ID YR sep_yr_args MKAY
    (57) expr -> . variable IZ ID
    (74) expr -> . SIZE OF expr
    (75) expr -> . ABSLUT OF expr
    (76) expr -> . value
    (77) expr -> . variable
    (78) expr -> . SUM OF expr AN expr
    (79) expr -> . DIFF OF expr AN expr
    (80) expr -> . PRODUKT OF expr AN expr
    (81) expr -> . QUOSHUNT OF expr AN expr
    (82) expr -> . MOD OF expr AN expr
    (83) expr -> . BIGGR OF expr AN expr
    (84) expr -> . SMALLR OF expr AN expr
    (85) expr -> . BOTH OF expr AN expr
    (86) expr -> . EITHER OF expr AN expr
    (87) expr -> . WON OF expr AN expr
    (88) expr -> . NOT expr
    (89) expr -> . ALL OF sep_args MKAY
    (90) expr -> . ANY OF sep_args MKAY
    (91) expr -> . ALL OF args MKAY
    (92) expr -> . ANY OF args MKAY
    (93) expr -> . BOTH SAEM expr AN expr
    (94) expr -> . DIFFRINT expr AN expr
    (95) expr -> . SMOOSH sep_args MKAY
    (96) expr -> . SMOOSH args MKAY
    (97) expr -> . MAEK expr A type
    (98) expr -> . MAEK expr type
    (99) variable -> . ID
    (100) variable -> . IT
    (65) value -> . STRING
    (66) value -> . FLOAT
    (67) value -> . INTEGER
    (68) value -> . WIN
    (69) value -> . FAIL
    (70) value -> . DICT

    A               shift and go to state 218
    I               shift and go to state 88
    SIZE            shift and go to state 28
    ABSLUT          shift and go to state 29
    SUM             shift and go to state 31
    DIFF            shift and go to state 32
    PRODUKT         shift and go to state 33
    QUOSHUNT        shift and go to state 34
    MOD             shift and go to state 35
    BIGGR           shift and go to state 36
    SMALLR          shift and go to state 37
    BOTH            shift and go to state 38
    EITHER          shift and go to state 39
    WON             shift and go to state 40
    NOT             shift and go to state 41
    ALL             shift and go to state 42
    ANY             shift and go to state 43
    DIFFRINT        shift and go to state 44
    SMOOSH          shift and go to state 45
    MAEK            shift and go to state 46
    ID              shift and go to state 27
    IT              shift and go to state 56
    STRING          shift and go to state 57
    FLOAT           shift and go to state 6
    INTEGER         shift and go to state 58
    WIN             shift and go to state 59
    FAIL            shift and go to state 60
    DICT            shift and go to state 61

    variable                       shift and go to state 87
    expr                           shift and go to state 219
    value                          shift and go to state 30

state 192

    (78) expr -> SUM OF expr AN expr .

    NEWLINE         reduce using rule 78 (expr -> SUM OF expr AN expr .)
    COMMA           reduce using rule 78 (expr -> SUM OF expr AN expr .)
    AN              reduce using rule 78 (expr -> SUM OF expr AN expr .)
    MKAY            reduce using rule 78 (expr -> SUM OF expr AN expr .)
    I               reduce using rule 78 (expr -> SUM OF expr AN expr .)
    SIZE            reduce using rule 78 (expr -> SUM OF expr AN expr .)
    ABSLUT          reduce using rule 78 (expr -> SUM OF expr AN expr .)
    SUM             reduce using rule 78 (expr -> SUM OF expr AN expr .)
    DIFF            reduce using rule 78 (expr -> SUM OF expr AN expr .)
    PRODUKT         reduce using rule 78 (expr -> SUM OF expr AN expr .)
    QUOSHUNT        reduce using rule 78 (expr -> SUM OF expr AN expr .)
    MOD             reduce using rule 78 (expr -> SUM OF expr AN expr .)
    BIGGR           reduce using rule 78 (expr -> SUM OF expr AN expr .)
    SMALLR          reduce using rule 78 (expr -> SUM OF expr AN expr .)
    BOTH            reduce using rule 78 (expr -> SUM OF expr AN expr .)
    EITHER          reduce using rule 78 (expr -> SUM OF expr AN expr .)
    WON             reduce using rule 78 (expr -> SUM OF expr AN expr .)
    NOT             reduce using rule 78 (expr -> SUM OF expr AN expr .)
    ALL             reduce using rule 78 (expr -> SUM OF expr AN expr .)
    ANY             reduce using rule 78 (expr -> SUM OF expr AN expr .)
    DIFFRINT        reduce using rule 78 (expr -> SUM OF expr AN expr .)
    SMOOSH          reduce using rule 78 (expr -> SUM OF expr AN expr .)
    MAEK            reduce using rule 78 (expr -> SUM OF expr AN expr .)
    ID              reduce using rule 78 (expr -> SUM OF expr AN expr .)
    IT              reduce using rule 78 (expr -> SUM OF expr AN expr .)
    STRING          reduce using rule 78 (expr -> SUM OF expr AN expr .)
    FLOAT           reduce using rule 78 (expr -> SUM OF expr AN expr .)
    INTEGER         reduce using rule 78 (expr -> SUM OF expr AN expr .)
    WIN             reduce using rule 78 (expr -> SUM OF expr AN expr .)
    FAIL            reduce using rule 78 (expr -> SUM OF expr AN expr .)
    DICT            reduce using rule 78 (expr -> SUM OF expr AN expr .)
    A               reduce using rule 78 (expr -> SUM OF expr AN expr .)
    YARN            reduce using rule 78 (expr -> SUM OF expr AN expr .)
    NUMBR           reduce using rule 78 (expr -> SUM OF expr AN expr .)
    NUMBAR          reduce using rule 78 (expr -> SUM OF expr AN expr .)
    NOOB            reduce using rule 78 (expr -> SUM OF expr AN expr .)
    BUKKIT          reduce using rule 78 (expr -> SUM OF expr AN expr .)
    EXCLAMATION     reduce using rule 78 (expr -> SUM OF expr AN expr .)


state 193

    (79) expr -> DIFF OF expr AN expr .

    NEWLINE         reduce using rule 79 (expr -> DIFF OF expr AN expr .)
    COMMA           reduce using rule 79 (expr -> DIFF OF expr AN expr .)
    AN              reduce using rule 79 (expr -> DIFF OF expr AN expr .)
    MKAY            reduce using rule 79 (expr -> DIFF OF expr AN expr .)
    I               reduce using rule 79 (expr -> DIFF OF expr AN expr .)
    SIZE            reduce using rule 79 (expr -> DIFF OF expr AN expr .)
    ABSLUT          reduce using rule 79 (expr -> DIFF OF expr AN expr .)
    SUM             reduce using rule 79 (expr -> DIFF OF expr AN expr .)
    DIFF            reduce using rule 79 (expr -> DIFF OF expr AN expr .)
    PRODUKT         reduce using rule 79 (expr -> DIFF OF expr AN expr .)
    QUOSHUNT        reduce using rule 79 (expr -> DIFF OF expr AN expr .)
    MOD             reduce using rule 79 (expr -> DIFF OF expr AN expr .)
    BIGGR           reduce using rule 79 (expr -> DIFF OF expr AN expr .)
    SMALLR          reduce using rule 79 (expr -> DIFF OF expr AN expr .)
    BOTH            reduce using rule 79 (expr -> DIFF OF expr AN expr .)
    EITHER          reduce using rule 79 (expr -> DIFF OF expr AN expr .)
    WON             reduce using rule 79 (expr -> DIFF OF expr AN expr .)
    NOT             reduce using rule 79 (expr -> DIFF OF expr AN expr .)
    ALL             reduce using rule 79 (expr -> DIFF OF expr AN expr .)
    ANY             reduce using rule 79 (expr -> DIFF OF expr AN expr .)
    DIFFRINT        reduce using rule 79 (expr -> DIFF OF expr AN expr .)
    SMOOSH          reduce using rule 79 (expr -> DIFF OF expr AN expr .)
    MAEK            reduce using rule 79 (expr -> DIFF OF expr AN expr .)
    ID              reduce using rule 79 (expr -> DIFF OF expr AN expr .)
    IT              reduce using rule 79 (expr -> DIFF OF expr AN expr .)
    STRING          reduce using rule 79 (expr -> DIFF OF expr AN expr .)
    FLOAT           reduce using rule 79 (expr -> DIFF OF expr AN expr .)
    INTEGER         reduce using rule 79 (expr -> DIFF OF expr AN expr .)
    WIN             reduce using rule 79 (expr -> DIFF OF expr AN expr .)
    FAIL            reduce using rule 79 (expr -> DIFF OF expr AN expr .)
    DICT            reduce using rule 79 (expr -> DIFF OF expr AN expr .)
    A               reduce using rule 79 (expr -> DIFF OF expr AN expr .)
    YARN            reduce using rule 79 (expr -> DIFF OF expr AN expr .)
    NUMBR           reduce using rule 79 (expr -> DIFF OF expr AN expr .)
    NUMBAR          reduce using rule 79 (expr -> DIFF OF expr AN expr .)
    NOOB            reduce using rule 79 (expr -> DIFF OF expr AN expr .)
    BUKKIT          reduce using rule 79 (expr -> DIFF OF expr AN expr .)
    EXCLAMATION     reduce using rule 79 (expr -> DIFF OF expr AN expr .)


state 194

    (80) expr -> PRODUKT OF expr AN expr .

    NEWLINE         reduce using rule 80 (expr -> PRODUKT OF expr AN expr .)
    COMMA           reduce using rule 80 (expr -> PRODUKT OF expr AN expr .)
    AN              reduce using rule 80 (expr -> PRODUKT OF expr AN expr .)
    MKAY            reduce using rule 80 (expr -> PRODUKT OF expr AN expr .)
    I               reduce using rule 80 (expr -> PRODUKT OF expr AN expr .)
    SIZE            reduce using rule 80 (expr -> PRODUKT OF expr AN expr .)
    ABSLUT          reduce using rule 80 (expr -> PRODUKT OF expr AN expr .)
    SUM             reduce using rule 80 (expr -> PRODUKT OF expr AN expr .)
    DIFF            reduce using rule 80 (expr -> PRODUKT OF expr AN expr .)
    PRODUKT         reduce using rule 80 (expr -> PRODUKT OF expr AN expr .)
    QUOSHUNT        reduce using rule 80 (expr -> PRODUKT OF expr AN expr .)
    MOD             reduce using rule 80 (expr -> PRODUKT OF expr AN expr .)
    BIGGR           reduce using rule 80 (expr -> PRODUKT OF expr AN expr .)
    SMALLR          reduce using rule 80 (expr -> PRODUKT OF expr AN expr .)
    BOTH            reduce using rule 80 (expr -> PRODUKT OF expr AN expr .)
    EITHER          reduce using rule 80 (expr -> PRODUKT OF expr AN expr .)
    WON             reduce using rule 80 (expr -> PRODUKT OF expr AN expr .)
    NOT             reduce using rule 80 (expr -> PRODUKT OF expr AN expr .)
    ALL             reduce using rule 80 (expr -> PRODUKT OF expr AN expr .)
    ANY             reduce using rule 80 (expr -> PRODUKT OF expr AN expr .)
    DIFFRINT        reduce using rule 80 (expr -> PRODUKT OF expr AN expr .)
    SMOOSH          reduce using rule 80 (expr -> PRODUKT OF expr AN expr .)
    MAEK            reduce using rule 80 (expr -> PRODUKT OF expr AN expr .)
    ID              reduce using rule 80 (expr -> PRODUKT OF expr AN expr .)
    IT              reduce using rule 80 (expr -> PRODUKT OF expr AN expr .)
    STRING          reduce using rule 80 (expr -> PRODUKT OF expr AN expr .)
    FLOAT           reduce using rule 80 (expr -> PRODUKT OF expr AN expr .)
    INTEGER         reduce using rule 80 (expr -> PRODUKT OF expr AN expr .)
    WIN             reduce using rule 80 (expr -> PRODUKT OF expr AN expr .)
    FAIL            reduce using rule 80 (expr -> PRODUKT OF expr AN expr .)
    DICT            reduce using rule 80 (expr -> PRODUKT OF expr AN expr .)
    A               reduce using rule 80 (expr -> PRODUKT OF expr AN expr .)
    YARN            reduce using rule 80 (expr -> PRODUKT OF expr AN expr .)
    NUMBR           reduce using rule 80 (expr -> PRODUKT OF expr AN expr .)
    NUMBAR          reduce using rule 80 (expr -> PRODUKT OF expr AN expr .)
    NOOB            reduce using rule 80 (expr -> PRODUKT OF expr AN expr .)
    BUKKIT          reduce using rule 80 (expr -> PRODUKT OF expr AN expr .)
    EXCLAMATION     reduce using rule 80 (expr -> PRODUKT OF expr AN expr .)


state 195

    (81) expr -> QUOSHUNT OF expr AN expr .

    NEWLINE         reduce using rule 81 (expr -> QUOSHUNT OF expr AN expr .)
    COMMA           reduce using rule 81 (expr -> QUOSHUNT OF expr AN expr .)
    AN              reduce using rule 81 (expr -> QUOSHUNT OF expr AN expr .)
    MKAY            reduce using rule 81 (expr -> QUOSHUNT OF expr AN expr .)
    I               reduce using rule 81 (expr -> QUOSHUNT OF expr AN expr .)
    SIZE            reduce using rule 81 (expr -> QUOSHUNT OF expr AN expr .)
    ABSLUT          reduce using rule 81 (expr -> QUOSHUNT OF expr AN expr .)
    SUM             reduce using rule 81 (expr -> QUOSHUNT OF expr AN expr .)
    DIFF            reduce using rule 81 (expr -> QUOSHUNT OF expr AN expr .)
    PRODUKT         reduce using rule 81 (expr -> QUOSHUNT OF expr AN expr .)
    QUOSHUNT        reduce using rule 81 (expr -> QUOSHUNT OF expr AN expr .)
    MOD             reduce using rule 81 (expr -> QUOSHUNT OF expr AN expr .)
    BIGGR           reduce using rule 81 (expr -> QUOSHUNT OF expr AN expr .)
    SMALLR          reduce using rule 81 (expr -> QUOSHUNT OF expr AN expr .)
    BOTH            reduce using rule 81 (expr -> QUOSHUNT OF expr AN expr .)
    EITHER          reduce using rule 81 (expr -> QUOSHUNT OF expr AN expr .)
    WON             reduce using rule 81 (expr -> QUOSHUNT OF expr AN expr .)
    NOT             reduce using rule 81 (expr -> QUOSHUNT OF expr AN expr .)
    ALL             reduce using rule 81 (expr -> QUOSHUNT OF expr AN expr .)
    ANY             reduce using rule 81 (expr -> QUOSHUNT OF expr AN expr .)
    DIFFRINT        reduce using rule 81 (expr -> QUOSHUNT OF expr AN expr .)
    SMOOSH          reduce using rule 81 (expr -> QUOSHUNT OF expr AN expr .)
    MAEK            reduce using rule 81 (expr -> QUOSHUNT OF expr AN expr .)
    ID              reduce using rule 81 (expr -> QUOSHUNT OF expr AN expr .)
    IT              reduce using rule 81 (expr -> QUOSHUNT OF expr AN expr .)
    STRING          reduce using rule 81 (expr -> QUOSHUNT OF expr AN expr .)
    FLOAT           reduce using rule 81 (expr -> QUOSHUNT OF expr AN expr .)
    INTEGER         reduce using rule 81 (expr -> QUOSHUNT OF expr AN expr .)
    WIN             reduce using rule 81 (expr -> QUOSHUNT OF expr AN expr .)
    FAIL            reduce using rule 81 (expr -> QUOSHUNT OF expr AN expr .)
    DICT            reduce using rule 81 (expr -> QUOSHUNT OF expr AN expr .)
    A               reduce using rule 81 (expr -> QUOSHUNT OF expr AN expr .)
    YARN            reduce using rule 81 (expr -> QUOSHUNT OF expr AN expr .)
    NUMBR           reduce using rule 81 (expr -> QUOSHUNT OF expr AN expr .)
    NUMBAR          reduce using rule 81 (expr -> QUOSHUNT OF expr AN expr .)
    NOOB            reduce using rule 81 (expr -> QUOSHUNT OF expr AN expr .)
    BUKKIT          reduce using rule 81 (expr -> QUOSHUNT OF expr AN expr .)
    EXCLAMATION     reduce using rule 81 (expr -> QUOSHUNT OF expr AN expr .)


state 196

    (82) expr -> MOD OF expr AN expr .

    NEWLINE         reduce using rule 82 (expr -> MOD OF expr AN expr .)
    COMMA           reduce using rule 82 (expr -> MOD OF expr AN expr .)
    AN              reduce using rule 82 (expr -> MOD OF expr AN expr .)
    MKAY            reduce using rule 82 (expr -> MOD OF expr AN expr .)
    I               reduce using rule 82 (expr -> MOD OF expr AN expr .)
    SIZE            reduce using rule 82 (expr -> MOD OF expr AN expr .)
    ABSLUT          reduce using rule 82 (expr -> MOD OF expr AN expr .)
    SUM             reduce using rule 82 (expr -> MOD OF expr AN expr .)
    DIFF            reduce using rule 82 (expr -> MOD OF expr AN expr .)
    PRODUKT         reduce using rule 82 (expr -> MOD OF expr AN expr .)
    QUOSHUNT        reduce using rule 82 (expr -> MOD OF expr AN expr .)
    MOD             reduce using rule 82 (expr -> MOD OF expr AN expr .)
    BIGGR           reduce using rule 82 (expr -> MOD OF expr AN expr .)
    SMALLR          reduce using rule 82 (expr -> MOD OF expr AN expr .)
    BOTH            reduce using rule 82 (expr -> MOD OF expr AN expr .)
    EITHER          reduce using rule 82 (expr -> MOD OF expr AN expr .)
    WON             reduce using rule 82 (expr -> MOD OF expr AN expr .)
    NOT             reduce using rule 82 (expr -> MOD OF expr AN expr .)
    ALL             reduce using rule 82 (expr -> MOD OF expr AN expr .)
    ANY             reduce using rule 82 (expr -> MOD OF expr AN expr .)
    DIFFRINT        reduce using rule 82 (expr -> MOD OF expr AN expr .)
    SMOOSH          reduce using rule 82 (expr -> MOD OF expr AN expr .)
    MAEK            reduce using rule 82 (expr -> MOD OF expr AN expr .)
    ID              reduce using rule 82 (expr -> MOD OF expr AN expr .)
    IT              reduce using rule 82 (expr -> MOD OF expr AN expr .)
    STRING          reduce using rule 82 (expr -> MOD OF expr AN expr .)
    FLOAT           reduce using rule 82 (expr -> MOD OF expr AN expr .)
    INTEGER         reduce using rule 82 (expr -> MOD OF expr AN expr .)
    WIN             reduce using rule 82 (expr -> MOD OF expr AN expr .)
    FAIL            reduce using rule 82 (expr -> MOD OF expr AN expr .)
    DICT            reduce using rule 82 (expr -> MOD OF expr AN expr .)
    A               reduce using rule 82 (expr -> MOD OF expr AN expr .)
    YARN            reduce using rule 82 (expr -> MOD OF expr AN expr .)
    NUMBR           reduce using rule 82 (expr -> MOD OF expr AN expr .)
    NUMBAR          reduce using rule 82 (expr -> MOD OF expr AN expr .)
    NOOB            reduce using rule 82 (expr -> MOD OF expr AN expr .)
    BUKKIT          reduce using rule 82 (expr -> MOD OF expr AN expr .)
    EXCLAMATION     reduce using rule 82 (expr -> MOD OF expr AN expr .)


state 197

    (83) expr -> BIGGR OF expr AN expr .

    NEWLINE         reduce using rule 83 (expr -> BIGGR OF expr AN expr .)
    COMMA           reduce using rule 83 (expr -> BIGGR OF expr AN expr .)
    AN              reduce using rule 83 (expr -> BIGGR OF expr AN expr .)
    MKAY            reduce using rule 83 (expr -> BIGGR OF expr AN expr .)
    I               reduce using rule 83 (expr -> BIGGR OF expr AN expr .)
    SIZE            reduce using rule 83 (expr -> BIGGR OF expr AN expr .)
    ABSLUT          reduce using rule 83 (expr -> BIGGR OF expr AN expr .)
    SUM             reduce using rule 83 (expr -> BIGGR OF expr AN expr .)
    DIFF            reduce using rule 83 (expr -> BIGGR OF expr AN expr .)
    PRODUKT         reduce using rule 83 (expr -> BIGGR OF expr AN expr .)
    QUOSHUNT        reduce using rule 83 (expr -> BIGGR OF expr AN expr .)
    MOD             reduce using rule 83 (expr -> BIGGR OF expr AN expr .)
    BIGGR           reduce using rule 83 (expr -> BIGGR OF expr AN expr .)
    SMALLR          reduce using rule 83 (expr -> BIGGR OF expr AN expr .)
    BOTH            reduce using rule 83 (expr -> BIGGR OF expr AN expr .)
    EITHER          reduce using rule 83 (expr -> BIGGR OF expr AN expr .)
    WON             reduce using rule 83 (expr -> BIGGR OF expr AN expr .)
    NOT             reduce using rule 83 (expr -> BIGGR OF expr AN expr .)
    ALL             reduce using rule 83 (expr -> BIGGR OF expr AN expr .)
    ANY             reduce using rule 83 (expr -> BIGGR OF expr AN expr .)
    DIFFRINT        reduce using rule 83 (expr -> BIGGR OF expr AN expr .)
    SMOOSH          reduce using rule 83 (expr -> BIGGR OF expr AN expr .)
    MAEK            reduce using rule 83 (expr -> BIGGR OF expr AN expr .)
    ID              reduce using rule 83 (expr -> BIGGR OF expr AN expr .)
    IT              reduce using rule 83 (expr -> BIGGR OF expr AN expr .)
    STRING          reduce using rule 83 (expr -> BIGGR OF expr AN expr .)
    FLOAT           reduce using rule 83 (expr -> BIGGR OF expr AN expr .)
    INTEGER         reduce using rule 83 (expr -> BIGGR OF expr AN expr .)
    WIN             reduce using rule 83 (expr -> BIGGR OF expr AN expr .)
    FAIL            reduce using rule 83 (expr -> BIGGR OF expr AN expr .)
    DICT            reduce using rule 83 (expr -> BIGGR OF expr AN expr .)
    A               reduce using rule 83 (expr -> BIGGR OF expr AN expr .)
    YARN            reduce using rule 83 (expr -> BIGGR OF expr AN expr .)
    NUMBR           reduce using rule 83 (expr -> BIGGR OF expr AN expr .)
    NUMBAR          reduce using rule 83 (expr -> BIGGR OF expr AN expr .)
    NOOB            reduce using rule 83 (expr -> BIGGR OF expr AN expr .)
    BUKKIT          reduce using rule 83 (expr -> BIGGR OF expr AN expr .)
    EXCLAMATION     reduce using rule 83 (expr -> BIGGR OF expr AN expr .)


state 198

    (84) expr -> SMALLR OF expr AN expr .

    NEWLINE         reduce using rule 84 (expr -> SMALLR OF expr AN expr .)
    COMMA           reduce using rule 84 (expr -> SMALLR OF expr AN expr .)
    AN              reduce using rule 84 (expr -> SMALLR OF expr AN expr .)
    MKAY            reduce using rule 84 (expr -> SMALLR OF expr AN expr .)
    I               reduce using rule 84 (expr -> SMALLR OF expr AN expr .)
    SIZE            reduce using rule 84 (expr -> SMALLR OF expr AN expr .)
    ABSLUT          reduce using rule 84 (expr -> SMALLR OF expr AN expr .)
    SUM             reduce using rule 84 (expr -> SMALLR OF expr AN expr .)
    DIFF            reduce using rule 84 (expr -> SMALLR OF expr AN expr .)
    PRODUKT         reduce using rule 84 (expr -> SMALLR OF expr AN expr .)
    QUOSHUNT        reduce using rule 84 (expr -> SMALLR OF expr AN expr .)
    MOD             reduce using rule 84 (expr -> SMALLR OF expr AN expr .)
    BIGGR           reduce using rule 84 (expr -> SMALLR OF expr AN expr .)
    SMALLR          reduce using rule 84 (expr -> SMALLR OF expr AN expr .)
    BOTH            reduce using rule 84 (expr -> SMALLR OF expr AN expr .)
    EITHER          reduce using rule 84 (expr -> SMALLR OF expr AN expr .)
    WON             reduce using rule 84 (expr -> SMALLR OF expr AN expr .)
    NOT             reduce using rule 84 (expr -> SMALLR OF expr AN expr .)
    ALL             reduce using rule 84 (expr -> SMALLR OF expr AN expr .)
    ANY             reduce using rule 84 (expr -> SMALLR OF expr AN expr .)
    DIFFRINT        reduce using rule 84 (expr -> SMALLR OF expr AN expr .)
    SMOOSH          reduce using rule 84 (expr -> SMALLR OF expr AN expr .)
    MAEK            reduce using rule 84 (expr -> SMALLR OF expr AN expr .)
    ID              reduce using rule 84 (expr -> SMALLR OF expr AN expr .)
    IT              reduce using rule 84 (expr -> SMALLR OF expr AN expr .)
    STRING          reduce using rule 84 (expr -> SMALLR OF expr AN expr .)
    FLOAT           reduce using rule 84 (expr -> SMALLR OF expr AN expr .)
    INTEGER         reduce using rule 84 (expr -> SMALLR OF expr AN expr .)
    WIN             reduce using rule 84 (expr -> SMALLR OF expr AN expr .)
    FAIL            reduce using rule 84 (expr -> SMALLR OF expr AN expr .)
    DICT            reduce using rule 84 (expr -> SMALLR OF expr AN expr .)
    A               reduce using rule 84 (expr -> SMALLR OF expr AN expr .)
    YARN            reduce using rule 84 (expr -> SMALLR OF expr AN expr .)
    NUMBR           reduce using rule 84 (expr -> SMALLR OF expr AN expr .)
    NUMBAR          reduce using rule 84 (expr -> SMALLR OF expr AN expr .)
    NOOB            reduce using rule 84 (expr -> SMALLR OF expr AN expr .)
    BUKKIT          reduce using rule 84 (expr -> SMALLR OF expr AN expr .)
    EXCLAMATION     reduce using rule 84 (expr -> SMALLR OF expr AN expr .)


state 199

    (85) expr -> BOTH OF expr AN expr .

    NEWLINE         reduce using rule 85 (expr -> BOTH OF expr AN expr .)
    COMMA           reduce using rule 85 (expr -> BOTH OF expr AN expr .)
    AN              reduce using rule 85 (expr -> BOTH OF expr AN expr .)
    MKAY            reduce using rule 85 (expr -> BOTH OF expr AN expr .)
    I               reduce using rule 85 (expr -> BOTH OF expr AN expr .)
    SIZE            reduce using rule 85 (expr -> BOTH OF expr AN expr .)
    ABSLUT          reduce using rule 85 (expr -> BOTH OF expr AN expr .)
    SUM             reduce using rule 85 (expr -> BOTH OF expr AN expr .)
    DIFF            reduce using rule 85 (expr -> BOTH OF expr AN expr .)
    PRODUKT         reduce using rule 85 (expr -> BOTH OF expr AN expr .)
    QUOSHUNT        reduce using rule 85 (expr -> BOTH OF expr AN expr .)
    MOD             reduce using rule 85 (expr -> BOTH OF expr AN expr .)
    BIGGR           reduce using rule 85 (expr -> BOTH OF expr AN expr .)
    SMALLR          reduce using rule 85 (expr -> BOTH OF expr AN expr .)
    BOTH            reduce using rule 85 (expr -> BOTH OF expr AN expr .)
    EITHER          reduce using rule 85 (expr -> BOTH OF expr AN expr .)
    WON             reduce using rule 85 (expr -> BOTH OF expr AN expr .)
    NOT             reduce using rule 85 (expr -> BOTH OF expr AN expr .)
    ALL             reduce using rule 85 (expr -> BOTH OF expr AN expr .)
    ANY             reduce using rule 85 (expr -> BOTH OF expr AN expr .)
    DIFFRINT        reduce using rule 85 (expr -> BOTH OF expr AN expr .)
    SMOOSH          reduce using rule 85 (expr -> BOTH OF expr AN expr .)
    MAEK            reduce using rule 85 (expr -> BOTH OF expr AN expr .)
    ID              reduce using rule 85 (expr -> BOTH OF expr AN expr .)
    IT              reduce using rule 85 (expr -> BOTH OF expr AN expr .)
    STRING          reduce using rule 85 (expr -> BOTH OF expr AN expr .)
    FLOAT           reduce using rule 85 (expr -> BOTH OF expr AN expr .)
    INTEGER         reduce using rule 85 (expr -> BOTH OF expr AN expr .)
    WIN             reduce using rule 85 (expr -> BOTH OF expr AN expr .)
    FAIL            reduce using rule 85 (expr -> BOTH OF expr AN expr .)
    DICT            reduce using rule 85 (expr -> BOTH OF expr AN expr .)
    A               reduce using rule 85 (expr -> BOTH OF expr AN expr .)
    YARN            reduce using rule 85 (expr -> BOTH OF expr AN expr .)
    NUMBR           reduce using rule 85 (expr -> BOTH OF expr AN expr .)
    NUMBAR          reduce using rule 85 (expr -> BOTH OF expr AN expr .)
    NOOB            reduce using rule 85 (expr -> BOTH OF expr AN expr .)
    BUKKIT          reduce using rule 85 (expr -> BOTH OF expr AN expr .)
    EXCLAMATION     reduce using rule 85 (expr -> BOTH OF expr AN expr .)


state 200

    (93) expr -> BOTH SAEM expr AN expr .

    NEWLINE         reduce using rule 93 (expr -> BOTH SAEM expr AN expr .)
    COMMA           reduce using rule 93 (expr -> BOTH SAEM expr AN expr .)
    AN              reduce using rule 93 (expr -> BOTH SAEM expr AN expr .)
    MKAY            reduce using rule 93 (expr -> BOTH SAEM expr AN expr .)
    I               reduce using rule 93 (expr -> BOTH SAEM expr AN expr .)
    SIZE            reduce using rule 93 (expr -> BOTH SAEM expr AN expr .)
    ABSLUT          reduce using rule 93 (expr -> BOTH SAEM expr AN expr .)
    SUM             reduce using rule 93 (expr -> BOTH SAEM expr AN expr .)
    DIFF            reduce using rule 93 (expr -> BOTH SAEM expr AN expr .)
    PRODUKT         reduce using rule 93 (expr -> BOTH SAEM expr AN expr .)
    QUOSHUNT        reduce using rule 93 (expr -> BOTH SAEM expr AN expr .)
    MOD             reduce using rule 93 (expr -> BOTH SAEM expr AN expr .)
    BIGGR           reduce using rule 93 (expr -> BOTH SAEM expr AN expr .)
    SMALLR          reduce using rule 93 (expr -> BOTH SAEM expr AN expr .)
    BOTH            reduce using rule 93 (expr -> BOTH SAEM expr AN expr .)
    EITHER          reduce using rule 93 (expr -> BOTH SAEM expr AN expr .)
    WON             reduce using rule 93 (expr -> BOTH SAEM expr AN expr .)
    NOT             reduce using rule 93 (expr -> BOTH SAEM expr AN expr .)
    ALL             reduce using rule 93 (expr -> BOTH SAEM expr AN expr .)
    ANY             reduce using rule 93 (expr -> BOTH SAEM expr AN expr .)
    DIFFRINT        reduce using rule 93 (expr -> BOTH SAEM expr AN expr .)
    SMOOSH          reduce using rule 93 (expr -> BOTH SAEM expr AN expr .)
    MAEK            reduce using rule 93 (expr -> BOTH SAEM expr AN expr .)
    ID              reduce using rule 93 (expr -> BOTH SAEM expr AN expr .)
    IT              reduce using rule 93 (expr -> BOTH SAEM expr AN expr .)
    STRING          reduce using rule 93 (expr -> BOTH SAEM expr AN expr .)
    FLOAT           reduce using rule 93 (expr -> BOTH SAEM expr AN expr .)
    INTEGER         reduce using rule 93 (expr -> BOTH SAEM expr AN expr .)
    WIN             reduce using rule 93 (expr -> BOTH SAEM expr AN expr .)
    FAIL            reduce using rule 93 (expr -> BOTH SAEM expr AN expr .)
    DICT            reduce using rule 93 (expr -> BOTH SAEM expr AN expr .)
    A               reduce using rule 93 (expr -> BOTH SAEM expr AN expr .)
    YARN            reduce using rule 93 (expr -> BOTH SAEM expr AN expr .)
    NUMBR           reduce using rule 93 (expr -> BOTH SAEM expr AN expr .)
    NUMBAR          reduce using rule 93 (expr -> BOTH SAEM expr AN expr .)
    NOOB            reduce using rule 93 (expr -> BOTH SAEM expr AN expr .)
    BUKKIT          reduce using rule 93 (expr -> BOTH SAEM expr AN expr .)
    EXCLAMATION     reduce using rule 93 (expr -> BOTH SAEM expr AN expr .)


state 201

    (86) expr -> EITHER OF expr AN expr .

    NEWLINE         reduce using rule 86 (expr -> EITHER OF expr AN expr .)
    COMMA           reduce using rule 86 (expr -> EITHER OF expr AN expr .)
    AN              reduce using rule 86 (expr -> EITHER OF expr AN expr .)
    MKAY            reduce using rule 86 (expr -> EITHER OF expr AN expr .)
    I               reduce using rule 86 (expr -> EITHER OF expr AN expr .)
    SIZE            reduce using rule 86 (expr -> EITHER OF expr AN expr .)
    ABSLUT          reduce using rule 86 (expr -> EITHER OF expr AN expr .)
    SUM             reduce using rule 86 (expr -> EITHER OF expr AN expr .)
    DIFF            reduce using rule 86 (expr -> EITHER OF expr AN expr .)
    PRODUKT         reduce using rule 86 (expr -> EITHER OF expr AN expr .)
    QUOSHUNT        reduce using rule 86 (expr -> EITHER OF expr AN expr .)
    MOD             reduce using rule 86 (expr -> EITHER OF expr AN expr .)
    BIGGR           reduce using rule 86 (expr -> EITHER OF expr AN expr .)
    SMALLR          reduce using rule 86 (expr -> EITHER OF expr AN expr .)
    BOTH            reduce using rule 86 (expr -> EITHER OF expr AN expr .)
    EITHER          reduce using rule 86 (expr -> EITHER OF expr AN expr .)
    WON             reduce using rule 86 (expr -> EITHER OF expr AN expr .)
    NOT             reduce using rule 86 (expr -> EITHER OF expr AN expr .)
    ALL             reduce using rule 86 (expr -> EITHER OF expr AN expr .)
    ANY             reduce using rule 86 (expr -> EITHER OF expr AN expr .)
    DIFFRINT        reduce using rule 86 (expr -> EITHER OF expr AN expr .)
    SMOOSH          reduce using rule 86 (expr -> EITHER OF expr AN expr .)
    MAEK            reduce using rule 86 (expr -> EITHER OF expr AN expr .)
    ID              reduce using rule 86 (expr -> EITHER OF expr AN expr .)
    IT              reduce using rule 86 (expr -> EITHER OF expr AN expr .)
    STRING          reduce using rule 86 (expr -> EITHER OF expr AN expr .)
    FLOAT           reduce using rule 86 (expr -> EITHER OF expr AN expr .)
    INTEGER         reduce using rule 86 (expr -> EITHER OF expr AN expr .)
    WIN             reduce using rule 86 (expr -> EITHER OF expr AN expr .)
    FAIL            reduce using rule 86 (expr -> EITHER OF expr AN expr .)
    DICT            reduce using rule 86 (expr -> EITHER OF expr AN expr .)
    A               reduce using rule 86 (expr -> EITHER OF expr AN expr .)
    YARN            reduce using rule 86 (expr -> EITHER OF expr AN expr .)
    NUMBR           reduce using rule 86 (expr -> EITHER OF expr AN expr .)
    NUMBAR          reduce using rule 86 (expr -> EITHER OF expr AN expr .)
    NOOB            reduce using rule 86 (expr -> EITHER OF expr AN expr .)
    BUKKIT          reduce using rule 86 (expr -> EITHER OF expr AN expr .)
    EXCLAMATION     reduce using rule 86 (expr -> EITHER OF expr AN expr .)


state 202

    (87) expr -> WON OF expr AN expr .

    NEWLINE         reduce using rule 87 (expr -> WON OF expr AN expr .)
    COMMA           reduce using rule 87 (expr -> WON OF expr AN expr .)
    AN              reduce using rule 87 (expr -> WON OF expr AN expr .)
    MKAY            reduce using rule 87 (expr -> WON OF expr AN expr .)
    I               reduce using rule 87 (expr -> WON OF expr AN expr .)
    SIZE            reduce using rule 87 (expr -> WON OF expr AN expr .)
    ABSLUT          reduce using rule 87 (expr -> WON OF expr AN expr .)
    SUM             reduce using rule 87 (expr -> WON OF expr AN expr .)
    DIFF            reduce using rule 87 (expr -> WON OF expr AN expr .)
    PRODUKT         reduce using rule 87 (expr -> WON OF expr AN expr .)
    QUOSHUNT        reduce using rule 87 (expr -> WON OF expr AN expr .)
    MOD             reduce using rule 87 (expr -> WON OF expr AN expr .)
    BIGGR           reduce using rule 87 (expr -> WON OF expr AN expr .)
    SMALLR          reduce using rule 87 (expr -> WON OF expr AN expr .)
    BOTH            reduce using rule 87 (expr -> WON OF expr AN expr .)
    EITHER          reduce using rule 87 (expr -> WON OF expr AN expr .)
    WON             reduce using rule 87 (expr -> WON OF expr AN expr .)
    NOT             reduce using rule 87 (expr -> WON OF expr AN expr .)
    ALL             reduce using rule 87 (expr -> WON OF expr AN expr .)
    ANY             reduce using rule 87 (expr -> WON OF expr AN expr .)
    DIFFRINT        reduce using rule 87 (expr -> WON OF expr AN expr .)
    SMOOSH          reduce using rule 87 (expr -> WON OF expr AN expr .)
    MAEK            reduce using rule 87 (expr -> WON OF expr AN expr .)
    ID              reduce using rule 87 (expr -> WON OF expr AN expr .)
    IT              reduce using rule 87 (expr -> WON OF expr AN expr .)
    STRING          reduce using rule 87 (expr -> WON OF expr AN expr .)
    FLOAT           reduce using rule 87 (expr -> WON OF expr AN expr .)
    INTEGER         reduce using rule 87 (expr -> WON OF expr AN expr .)
    WIN             reduce using rule 87 (expr -> WON OF expr AN expr .)
    FAIL            reduce using rule 87 (expr -> WON OF expr AN expr .)
    DICT            reduce using rule 87 (expr -> WON OF expr AN expr .)
    A               reduce using rule 87 (expr -> WON OF expr AN expr .)
    YARN            reduce using rule 87 (expr -> WON OF expr AN expr .)
    NUMBR           reduce using rule 87 (expr -> WON OF expr AN expr .)
    NUMBAR          reduce using rule 87 (expr -> WON OF expr AN expr .)
    NOOB            reduce using rule 87 (expr -> WON OF expr AN expr .)
    BUKKIT          reduce using rule 87 (expr -> WON OF expr AN expr .)
    EXCLAMATION     reduce using rule 87 (expr -> WON OF expr AN expr .)


state 203

    (37) declare_bukkit_block -> O HAI IM variable NEWLINE . statements KTHX
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . command NEWLINE
    (5) statement -> . command COMMA
    (6) command -> . empty
    (7) command -> . expr
    (8) command -> . call
    (9) command -> . cast
    (10) command -> . decl
    (11) command -> . assign_bukkit
    (12) command -> . assign
    (13) command -> . declare_bukkit_block
    (14) command -> . if_else
    (15) command -> . bukkit_function
    (16) command -> . function
    (17) command -> . return
    (18) command -> . loop
    (19) command -> . export
    (20) command -> . import
    (102) empty -> .
    (40) expr -> . variable APOSTROPHE_Z variable
    (54) expr -> . I IZ ID YR sep_yr_args MKAY
    (55) expr -> . I IZ ID
    (56) expr -> . variable IZ ID YR sep_yr_args MKAY
    (57) expr -> . variable IZ ID
    (74) expr -> . SIZE OF expr
    (75) expr -> . ABSLUT OF expr
    (76) expr -> . value
    (77) expr -> . variable
    (78) expr -> . SUM OF expr AN expr
    (79) expr -> . DIFF OF expr AN expr
    (80) expr -> . PRODUKT OF expr AN expr
    (81) expr -> . QUOSHUNT OF expr AN expr
    (82) expr -> . MOD OF expr AN expr
    (83) expr -> . BIGGR OF expr AN expr
    (84) expr -> . SMALLR OF expr AN expr
    (85) expr -> . BOTH OF expr AN expr
    (86) expr -> . EITHER OF expr AN expr
    (87) expr -> . WON OF expr AN expr
    (88) expr -> . NOT expr
    (89) expr -> . ALL OF sep_args MKAY
    (90) expr -> . ANY OF sep_args MKAY
    (91) expr -> . ALL OF args MKAY
    (92) expr -> . ANY OF args MKAY
    (93) expr -> . BOTH SAEM expr AN expr
    (94) expr -> . DIFFRINT expr AN expr
    (95) expr -> . SMOOSH sep_args MKAY
    (96) expr -> . SMOOSH args MKAY
    (97) expr -> . MAEK expr A type
    (98) expr -> . MAEK expr type
    (71) call -> . VISIBLE args
    (72) call -> . VISIBLE args EXCLAMATION
    (73) call -> . GIMMEH variable
    (41) cast -> . variable IS NOW A type
    (42) cast -> . variable R MAEK variable A type
    (43) cast -> . variable R MAEK variable type
    (34) decl -> . I HAS A variable
    (35) decl -> . I HAS A variable ITZ expr
    (36) decl -> . I HAS A variable ITZ A type
    (38) assign_bukkit -> . variable HAS A variable ITZ expr
    (39) assign -> . variable R expr
    (37) declare_bukkit_block -> . O HAI IM variable NEWLINE statements KTHX
    (28) if_else -> . O RLY QUESTION NEWLINE YA RLY NEWLINE statements NO WAI NEWLINE statements OIC
    (29) if_else -> . O RLY QUESTION NEWLINE YA RLY NEWLINE statements OIC
    (30) if_else -> . O RLY QUESTION NEWLINE YA RLY NEWLINE statements elifs NO WAI NEWLINE statements OIC
    (50) bukkit_function -> . HOW IZ variable ID YR sep_yr_args NEWLINE statements IF U SAY SO
    (51) bukkit_function -> . HOW IZ variable ID NEWLINE statements IF U SAY SO
    (52) function -> . HOW IZ I ID YR sep_yr_args NEWLINE statements IF U SAY SO
    (53) function -> . HOW IZ I ID NEWLINE statements IF U SAY SO
    (58) return -> . FOUND YR expr
    (59) return -> . GTFO
    (21) loop -> . IM IN YR variable operation YR variable condition expr NEWLINE statements IM OUTTA YR variable
    (27) export -> . YOU CAN HAS sep_args MKAY
    (26) import -> . CAN HAS PATH QUESTION
    (99) variable -> . ID
    (100) variable -> . IT
    (65) value -> . STRING
    (66) value -> . FLOAT
    (67) value -> . INTEGER
    (68) value -> . WIN
    (69) value -> . FAIL
    (70) value -> . DICT

    NEWLINE         reduce using rule 102 (empty -> .)
    COMMA           reduce using rule 102 (empty -> .)
    I               shift and go to state 26
    SIZE            shift and go to state 28
    ABSLUT          shift and go to state 29
    SUM             shift and go to state 31
    DIFF            shift and go to state 32
    PRODUKT         shift and go to state 33
    QUOSHUNT        shift and go to state 34
    MOD             shift and go to state 35
    BIGGR           shift and go to state 36
    SMALLR          shift and go to state 37
    BOTH            shift and go to state 38
    EITHER          shift and go to state 39
    WON             shift and go to state 40
    NOT             shift and go to state 41
    ALL             shift and go to state 42
    ANY             shift and go to state 43
    DIFFRINT        shift and go to state 44
    SMOOSH          shift and go to state 45
    MAEK            shift and go to state 46
    VISIBLE         shift and go to state 47
    GIMMEH          shift and go to state 48
    O               shift and go to state 49
    HOW             shift and go to state 51
    FOUND           shift and go to state 52
    GTFO            shift and go to state 53
    IM              shift and go to state 50
    YOU             shift and go to state 54
    CAN             shift and go to state 55
    ID              shift and go to state 27
    IT              shift and go to state 56
    STRING          shift and go to state 57
    FLOAT           shift and go to state 6
    INTEGER         shift and go to state 58
    WIN             shift and go to state 59
    FAIL            shift and go to state 60
    DICT            shift and go to state 61

    variable                       shift and go to state 25
    statements                     shift and go to state 220
    statement                      shift and go to state 8
    command                        shift and go to state 9
    empty                          shift and go to state 10
    expr                           shift and go to state 11
    call                           shift and go to state 12
    cast                           shift and go to state 13
    decl                           shift and go to state 14
    assign_bukkit                  shift and go to state 15
    assign                         shift and go to state 16
    declare_bukkit_block           shift and go to state 17
    if_else                        shift and go to state 18
    bukkit_function                shift and go to state 19
    function                       shift and go to state 20
    return                         shift and go to state 21
    loop                           shift and go to state 22
    export                         shift and go to state 23
    import                         shift and go to state 24
    value                          shift and go to state 30

state 204

    (28) if_else -> O RLY QUESTION NEWLINE YA . RLY NEWLINE statements NO WAI NEWLINE statements OIC
    (29) if_else -> O RLY QUESTION NEWLINE YA . RLY NEWLINE statements OIC
    (30) if_else -> O RLY QUESTION NEWLINE YA . RLY NEWLINE statements elifs NO WAI NEWLINE statements OIC

    RLY             shift and go to state 221


state 205

    (21) loop -> IM IN YR variable operation . YR variable condition expr NEWLINE statements IM OUTTA YR variable

    YR              shift and go to state 222


state 206

    (22) operation -> UPPIN .

    YR              reduce using rule 22 (operation -> UPPIN .)


state 207

    (23) operation -> NERFIN .

    YR              reduce using rule 23 (operation -> NERFIN .)


state 208

    (50) bukkit_function -> HOW IZ variable ID YR . sep_yr_args NEWLINE statements IF U SAY SO
    (48) sep_yr_args -> . sep_yr_args AN YR expr
    (49) sep_yr_args -> . expr
    (40) expr -> . variable APOSTROPHE_Z variable
    (54) expr -> . I IZ ID YR sep_yr_args MKAY
    (55) expr -> . I IZ ID
    (56) expr -> . variable IZ ID YR sep_yr_args MKAY
    (57) expr -> . variable IZ ID
    (74) expr -> . SIZE OF expr
    (75) expr -> . ABSLUT OF expr
    (76) expr -> . value
    (77) expr -> . variable
    (78) expr -> . SUM OF expr AN expr
    (79) expr -> . DIFF OF expr AN expr
    (80) expr -> . PRODUKT OF expr AN expr
    (81) expr -> . QUOSHUNT OF expr AN expr
    (82) expr -> . MOD OF expr AN expr
    (83) expr -> . BIGGR OF expr AN expr
    (84) expr -> . SMALLR OF expr AN expr
    (85) expr -> . BOTH OF expr AN expr
    (86) expr -> . EITHER OF expr AN expr
    (87) expr -> . WON OF expr AN expr
    (88) expr -> . NOT expr
    (89) expr -> . ALL OF sep_args MKAY
    (90) expr -> . ANY OF sep_args MKAY
    (91) expr -> . ALL OF args MKAY
    (92) expr -> . ANY OF args MKAY
    (93) expr -> . BOTH SAEM expr AN expr
    (94) expr -> . DIFFRINT expr AN expr
    (95) expr -> . SMOOSH sep_args MKAY
    (96) expr -> . SMOOSH args MKAY
    (97) expr -> . MAEK expr A type
    (98) expr -> . MAEK expr type
    (99) variable -> . ID
    (100) variable -> . IT
    (65) value -> . STRING
    (66) value -> . FLOAT
    (67) value -> . INTEGER
    (68) value -> . WIN
    (69) value -> . FAIL
    (70) value -> . DICT

    I               shift and go to state 88
    SIZE            shift and go to state 28
    ABSLUT          shift and go to state 29
    SUM             shift and go to state 31
    DIFF            shift and go to state 32
    PRODUKT         shift and go to state 33
    QUOSHUNT        shift and go to state 34
    MOD             shift and go to state 35
    BIGGR           shift and go to state 36
    SMALLR          shift and go to state 37
    BOTH            shift and go to state 38
    EITHER          shift and go to state 39
    WON             shift and go to state 40
    NOT             shift and go to state 41
    ALL             shift and go to state 42
    ANY             shift and go to state 43
    DIFFRINT        shift and go to state 44
    SMOOSH          shift and go to state 45
    MAEK            shift and go to state 46
    ID              shift and go to state 27
    IT              shift and go to state 56
    STRING          shift and go to state 57
    FLOAT           shift and go to state 6
    INTEGER         shift and go to state 58
    WIN             shift and go to state 59
    FAIL            shift and go to state 60
    DICT            shift and go to state 61

    variable                       shift and go to state 87
    sep_yr_args                    shift and go to state 223
    expr                           shift and go to state 185
    value                          shift and go to state 30

state 209

    (51) bukkit_function -> HOW IZ variable ID NEWLINE . statements IF U SAY SO
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . command NEWLINE
    (5) statement -> . command COMMA
    (6) command -> . empty
    (7) command -> . expr
    (8) command -> . call
    (9) command -> . cast
    (10) command -> . decl
    (11) command -> . assign_bukkit
    (12) command -> . assign
    (13) command -> . declare_bukkit_block
    (14) command -> . if_else
    (15) command -> . bukkit_function
    (16) command -> . function
    (17) command -> . return
    (18) command -> . loop
    (19) command -> . export
    (20) command -> . import
    (102) empty -> .
    (40) expr -> . variable APOSTROPHE_Z variable
    (54) expr -> . I IZ ID YR sep_yr_args MKAY
    (55) expr -> . I IZ ID
    (56) expr -> . variable IZ ID YR sep_yr_args MKAY
    (57) expr -> . variable IZ ID
    (74) expr -> . SIZE OF expr
    (75) expr -> . ABSLUT OF expr
    (76) expr -> . value
    (77) expr -> . variable
    (78) expr -> . SUM OF expr AN expr
    (79) expr -> . DIFF OF expr AN expr
    (80) expr -> . PRODUKT OF expr AN expr
    (81) expr -> . QUOSHUNT OF expr AN expr
    (82) expr -> . MOD OF expr AN expr
    (83) expr -> . BIGGR OF expr AN expr
    (84) expr -> . SMALLR OF expr AN expr
    (85) expr -> . BOTH OF expr AN expr
    (86) expr -> . EITHER OF expr AN expr
    (87) expr -> . WON OF expr AN expr
    (88) expr -> . NOT expr
    (89) expr -> . ALL OF sep_args MKAY
    (90) expr -> . ANY OF sep_args MKAY
    (91) expr -> . ALL OF args MKAY
    (92) expr -> . ANY OF args MKAY
    (93) expr -> . BOTH SAEM expr AN expr
    (94) expr -> . DIFFRINT expr AN expr
    (95) expr -> . SMOOSH sep_args MKAY
    (96) expr -> . SMOOSH args MKAY
    (97) expr -> . MAEK expr A type
    (98) expr -> . MAEK expr type
    (71) call -> . VISIBLE args
    (72) call -> . VISIBLE args EXCLAMATION
    (73) call -> . GIMMEH variable
    (41) cast -> . variable IS NOW A type
    (42) cast -> . variable R MAEK variable A type
    (43) cast -> . variable R MAEK variable type
    (34) decl -> . I HAS A variable
    (35) decl -> . I HAS A variable ITZ expr
    (36) decl -> . I HAS A variable ITZ A type
    (38) assign_bukkit -> . variable HAS A variable ITZ expr
    (39) assign -> . variable R expr
    (37) declare_bukkit_block -> . O HAI IM variable NEWLINE statements KTHX
    (28) if_else -> . O RLY QUESTION NEWLINE YA RLY NEWLINE statements NO WAI NEWLINE statements OIC
    (29) if_else -> . O RLY QUESTION NEWLINE YA RLY NEWLINE statements OIC
    (30) if_else -> . O RLY QUESTION NEWLINE YA RLY NEWLINE statements elifs NO WAI NEWLINE statements OIC
    (50) bukkit_function -> . HOW IZ variable ID YR sep_yr_args NEWLINE statements IF U SAY SO
    (51) bukkit_function -> . HOW IZ variable ID NEWLINE statements IF U SAY SO
    (52) function -> . HOW IZ I ID YR sep_yr_args NEWLINE statements IF U SAY SO
    (53) function -> . HOW IZ I ID NEWLINE statements IF U SAY SO
    (58) return -> . FOUND YR expr
    (59) return -> . GTFO
    (21) loop -> . IM IN YR variable operation YR variable condition expr NEWLINE statements IM OUTTA YR variable
    (27) export -> . YOU CAN HAS sep_args MKAY
    (26) import -> . CAN HAS PATH QUESTION
    (99) variable -> . ID
    (100) variable -> . IT
    (65) value -> . STRING
    (66) value -> . FLOAT
    (67) value -> . INTEGER
    (68) value -> . WIN
    (69) value -> . FAIL
    (70) value -> . DICT

    NEWLINE         reduce using rule 102 (empty -> .)
    COMMA           reduce using rule 102 (empty -> .)
    I               shift and go to state 26
    SIZE            shift and go to state 28
    ABSLUT          shift and go to state 29
    SUM             shift and go to state 31
    DIFF            shift and go to state 32
    PRODUKT         shift and go to state 33
    QUOSHUNT        shift and go to state 34
    MOD             shift and go to state 35
    BIGGR           shift and go to state 36
    SMALLR          shift and go to state 37
    BOTH            shift and go to state 38
    EITHER          shift and go to state 39
    WON             shift and go to state 40
    NOT             shift and go to state 41
    ALL             shift and go to state 42
    ANY             shift and go to state 43
    DIFFRINT        shift and go to state 44
    SMOOSH          shift and go to state 45
    MAEK            shift and go to state 46
    VISIBLE         shift and go to state 47
    GIMMEH          shift and go to state 48
    O               shift and go to state 49
    HOW             shift and go to state 51
    FOUND           shift and go to state 52
    GTFO            shift and go to state 53
    IM              shift and go to state 50
    YOU             shift and go to state 54
    CAN             shift and go to state 55
    ID              shift and go to state 27
    IT              shift and go to state 56
    STRING          shift and go to state 57
    FLOAT           shift and go to state 6
    INTEGER         shift and go to state 58
    WIN             shift and go to state 59
    FAIL            shift and go to state 60
    DICT            shift and go to state 61

    variable                       shift and go to state 25
    statements                     shift and go to state 224
    statement                      shift and go to state 8
    command                        shift and go to state 9
    empty                          shift and go to state 10
    expr                           shift and go to state 11
    call                           shift and go to state 12
    cast                           shift and go to state 13
    decl                           shift and go to state 14
    assign_bukkit                  shift and go to state 15
    assign                         shift and go to state 16
    declare_bukkit_block           shift and go to state 17
    if_else                        shift and go to state 18
    bukkit_function                shift and go to state 19
    function                       shift and go to state 20
    return                         shift and go to state 21
    loop                           shift and go to state 22
    export                         shift and go to state 23
    import                         shift and go to state 24
    value                          shift and go to state 30

state 210

    (52) function -> HOW IZ I ID YR . sep_yr_args NEWLINE statements IF U SAY SO
    (48) sep_yr_args -> . sep_yr_args AN YR expr
    (49) sep_yr_args -> . expr
    (40) expr -> . variable APOSTROPHE_Z variable
    (54) expr -> . I IZ ID YR sep_yr_args MKAY
    (55) expr -> . I IZ ID
    (56) expr -> . variable IZ ID YR sep_yr_args MKAY
    (57) expr -> . variable IZ ID
    (74) expr -> . SIZE OF expr
    (75) expr -> . ABSLUT OF expr
    (76) expr -> . value
    (77) expr -> . variable
    (78) expr -> . SUM OF expr AN expr
    (79) expr -> . DIFF OF expr AN expr
    (80) expr -> . PRODUKT OF expr AN expr
    (81) expr -> . QUOSHUNT OF expr AN expr
    (82) expr -> . MOD OF expr AN expr
    (83) expr -> . BIGGR OF expr AN expr
    (84) expr -> . SMALLR OF expr AN expr
    (85) expr -> . BOTH OF expr AN expr
    (86) expr -> . EITHER OF expr AN expr
    (87) expr -> . WON OF expr AN expr
    (88) expr -> . NOT expr
    (89) expr -> . ALL OF sep_args MKAY
    (90) expr -> . ANY OF sep_args MKAY
    (91) expr -> . ALL OF args MKAY
    (92) expr -> . ANY OF args MKAY
    (93) expr -> . BOTH SAEM expr AN expr
    (94) expr -> . DIFFRINT expr AN expr
    (95) expr -> . SMOOSH sep_args MKAY
    (96) expr -> . SMOOSH args MKAY
    (97) expr -> . MAEK expr A type
    (98) expr -> . MAEK expr type
    (99) variable -> . ID
    (100) variable -> . IT
    (65) value -> . STRING
    (66) value -> . FLOAT
    (67) value -> . INTEGER
    (68) value -> . WIN
    (69) value -> . FAIL
    (70) value -> . DICT

    I               shift and go to state 88
    SIZE            shift and go to state 28
    ABSLUT          shift and go to state 29
    SUM             shift and go to state 31
    DIFF            shift and go to state 32
    PRODUKT         shift and go to state 33
    QUOSHUNT        shift and go to state 34
    MOD             shift and go to state 35
    BIGGR           shift and go to state 36
    SMALLR          shift and go to state 37
    BOTH            shift and go to state 38
    EITHER          shift and go to state 39
    WON             shift and go to state 40
    NOT             shift and go to state 41
    ALL             shift and go to state 42
    ANY             shift and go to state 43
    DIFFRINT        shift and go to state 44
    SMOOSH          shift and go to state 45
    MAEK            shift and go to state 46
    ID              shift and go to state 27
    IT              shift and go to state 56
    STRING          shift and go to state 57
    FLOAT           shift and go to state 6
    INTEGER         shift and go to state 58
    WIN             shift and go to state 59
    FAIL            shift and go to state 60
    DICT            shift and go to state 61

    sep_yr_args                    shift and go to state 225
    expr                           shift and go to state 185
    variable                       shift and go to state 87
    value                          shift and go to state 30

state 211

    (53) function -> HOW IZ I ID NEWLINE . statements IF U SAY SO
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . command NEWLINE
    (5) statement -> . command COMMA
    (6) command -> . empty
    (7) command -> . expr
    (8) command -> . call
    (9) command -> . cast
    (10) command -> . decl
    (11) command -> . assign_bukkit
    (12) command -> . assign
    (13) command -> . declare_bukkit_block
    (14) command -> . if_else
    (15) command -> . bukkit_function
    (16) command -> . function
    (17) command -> . return
    (18) command -> . loop
    (19) command -> . export
    (20) command -> . import
    (102) empty -> .
    (40) expr -> . variable APOSTROPHE_Z variable
    (54) expr -> . I IZ ID YR sep_yr_args MKAY
    (55) expr -> . I IZ ID
    (56) expr -> . variable IZ ID YR sep_yr_args MKAY
    (57) expr -> . variable IZ ID
    (74) expr -> . SIZE OF expr
    (75) expr -> . ABSLUT OF expr
    (76) expr -> . value
    (77) expr -> . variable
    (78) expr -> . SUM OF expr AN expr
    (79) expr -> . DIFF OF expr AN expr
    (80) expr -> . PRODUKT OF expr AN expr
    (81) expr -> . QUOSHUNT OF expr AN expr
    (82) expr -> . MOD OF expr AN expr
    (83) expr -> . BIGGR OF expr AN expr
    (84) expr -> . SMALLR OF expr AN expr
    (85) expr -> . BOTH OF expr AN expr
    (86) expr -> . EITHER OF expr AN expr
    (87) expr -> . WON OF expr AN expr
    (88) expr -> . NOT expr
    (89) expr -> . ALL OF sep_args MKAY
    (90) expr -> . ANY OF sep_args MKAY
    (91) expr -> . ALL OF args MKAY
    (92) expr -> . ANY OF args MKAY
    (93) expr -> . BOTH SAEM expr AN expr
    (94) expr -> . DIFFRINT expr AN expr
    (95) expr -> . SMOOSH sep_args MKAY
    (96) expr -> . SMOOSH args MKAY
    (97) expr -> . MAEK expr A type
    (98) expr -> . MAEK expr type
    (71) call -> . VISIBLE args
    (72) call -> . VISIBLE args EXCLAMATION
    (73) call -> . GIMMEH variable
    (41) cast -> . variable IS NOW A type
    (42) cast -> . variable R MAEK variable A type
    (43) cast -> . variable R MAEK variable type
    (34) decl -> . I HAS A variable
    (35) decl -> . I HAS A variable ITZ expr
    (36) decl -> . I HAS A variable ITZ A type
    (38) assign_bukkit -> . variable HAS A variable ITZ expr
    (39) assign -> . variable R expr
    (37) declare_bukkit_block -> . O HAI IM variable NEWLINE statements KTHX
    (28) if_else -> . O RLY QUESTION NEWLINE YA RLY NEWLINE statements NO WAI NEWLINE statements OIC
    (29) if_else -> . O RLY QUESTION NEWLINE YA RLY NEWLINE statements OIC
    (30) if_else -> . O RLY QUESTION NEWLINE YA RLY NEWLINE statements elifs NO WAI NEWLINE statements OIC
    (50) bukkit_function -> . HOW IZ variable ID YR sep_yr_args NEWLINE statements IF U SAY SO
    (51) bukkit_function -> . HOW IZ variable ID NEWLINE statements IF U SAY SO
    (52) function -> . HOW IZ I ID YR sep_yr_args NEWLINE statements IF U SAY SO
    (53) function -> . HOW IZ I ID NEWLINE statements IF U SAY SO
    (58) return -> . FOUND YR expr
    (59) return -> . GTFO
    (21) loop -> . IM IN YR variable operation YR variable condition expr NEWLINE statements IM OUTTA YR variable
    (27) export -> . YOU CAN HAS sep_args MKAY
    (26) import -> . CAN HAS PATH QUESTION
    (99) variable -> . ID
    (100) variable -> . IT
    (65) value -> . STRING
    (66) value -> . FLOAT
    (67) value -> . INTEGER
    (68) value -> . WIN
    (69) value -> . FAIL
    (70) value -> . DICT

    NEWLINE         reduce using rule 102 (empty -> .)
    COMMA           reduce using rule 102 (empty -> .)
    I               shift and go to state 26
    SIZE            shift and go to state 28
    ABSLUT          shift and go to state 29
    SUM             shift and go to state 31
    DIFF            shift and go to state 32
    PRODUKT         shift and go to state 33
    QUOSHUNT        shift and go to state 34
    MOD             shift and go to state 35
    BIGGR           shift and go to state 36
    SMALLR          shift and go to state 37
    BOTH            shift and go to state 38
    EITHER          shift and go to state 39
    WON             shift and go to state 40
    NOT             shift and go to state 41
    ALL             shift and go to state 42
    ANY             shift and go to state 43
    DIFFRINT        shift and go to state 44
    SMOOSH          shift and go to state 45
    MAEK            shift and go to state 46
    VISIBLE         shift and go to state 47
    GIMMEH          shift and go to state 48
    O               shift and go to state 49
    HOW             shift and go to state 51
    FOUND           shift and go to state 52
    GTFO            shift and go to state 53
    IM              shift and go to state 50
    YOU             shift and go to state 54
    CAN             shift and go to state 55
    ID              shift and go to state 27
    IT              shift and go to state 56
    STRING          shift and go to state 57
    FLOAT           shift and go to state 6
    INTEGER         shift and go to state 58
    WIN             shift and go to state 59
    FAIL            shift and go to state 60
    DICT            shift and go to state 61

    statements                     shift and go to state 226
    statement                      shift and go to state 8
    command                        shift and go to state 9
    empty                          shift and go to state 10
    expr                           shift and go to state 11
    call                           shift and go to state 12
    cast                           shift and go to state 13
    decl                           shift and go to state 14
    assign_bukkit                  shift and go to state 15
    assign                         shift and go to state 16
    declare_bukkit_block           shift and go to state 17
    if_else                        shift and go to state 18
    bukkit_function                shift and go to state 19
    function                       shift and go to state 20
    return                         shift and go to state 21
    loop                           shift and go to state 22
    export                         shift and go to state 23
    import                         shift and go to state 24
    variable                       shift and go to state 25
    value                          shift and go to state 30

state 212

    (27) export -> YOU CAN HAS sep_args MKAY .

    NEWLINE         reduce using rule 27 (export -> YOU CAN HAS sep_args MKAY .)
    COMMA           reduce using rule 27 (export -> YOU CAN HAS sep_args MKAY .)


state 213

    (56) expr -> variable IZ ID YR sep_yr_args MKAY .

    NEWLINE         reduce using rule 56 (expr -> variable IZ ID YR sep_yr_args MKAY .)
    COMMA           reduce using rule 56 (expr -> variable IZ ID YR sep_yr_args MKAY .)
    AN              reduce using rule 56 (expr -> variable IZ ID YR sep_yr_args MKAY .)
    MKAY            reduce using rule 56 (expr -> variable IZ ID YR sep_yr_args MKAY .)
    I               reduce using rule 56 (expr -> variable IZ ID YR sep_yr_args MKAY .)
    SIZE            reduce using rule 56 (expr -> variable IZ ID YR sep_yr_args MKAY .)
    ABSLUT          reduce using rule 56 (expr -> variable IZ ID YR sep_yr_args MKAY .)
    SUM             reduce using rule 56 (expr -> variable IZ ID YR sep_yr_args MKAY .)
    DIFF            reduce using rule 56 (expr -> variable IZ ID YR sep_yr_args MKAY .)
    PRODUKT         reduce using rule 56 (expr -> variable IZ ID YR sep_yr_args MKAY .)
    QUOSHUNT        reduce using rule 56 (expr -> variable IZ ID YR sep_yr_args MKAY .)
    MOD             reduce using rule 56 (expr -> variable IZ ID YR sep_yr_args MKAY .)
    BIGGR           reduce using rule 56 (expr -> variable IZ ID YR sep_yr_args MKAY .)
    SMALLR          reduce using rule 56 (expr -> variable IZ ID YR sep_yr_args MKAY .)
    BOTH            reduce using rule 56 (expr -> variable IZ ID YR sep_yr_args MKAY .)
    EITHER          reduce using rule 56 (expr -> variable IZ ID YR sep_yr_args MKAY .)
    WON             reduce using rule 56 (expr -> variable IZ ID YR sep_yr_args MKAY .)
    NOT             reduce using rule 56 (expr -> variable IZ ID YR sep_yr_args MKAY .)
    ALL             reduce using rule 56 (expr -> variable IZ ID YR sep_yr_args MKAY .)
    ANY             reduce using rule 56 (expr -> variable IZ ID YR sep_yr_args MKAY .)
    DIFFRINT        reduce using rule 56 (expr -> variable IZ ID YR sep_yr_args MKAY .)
    SMOOSH          reduce using rule 56 (expr -> variable IZ ID YR sep_yr_args MKAY .)
    MAEK            reduce using rule 56 (expr -> variable IZ ID YR sep_yr_args MKAY .)
    ID              reduce using rule 56 (expr -> variable IZ ID YR sep_yr_args MKAY .)
    IT              reduce using rule 56 (expr -> variable IZ ID YR sep_yr_args MKAY .)
    STRING          reduce using rule 56 (expr -> variable IZ ID YR sep_yr_args MKAY .)
    FLOAT           reduce using rule 56 (expr -> variable IZ ID YR sep_yr_args MKAY .)
    INTEGER         reduce using rule 56 (expr -> variable IZ ID YR sep_yr_args MKAY .)
    WIN             reduce using rule 56 (expr -> variable IZ ID YR sep_yr_args MKAY .)
    FAIL            reduce using rule 56 (expr -> variable IZ ID YR sep_yr_args MKAY .)
    DICT            reduce using rule 56 (expr -> variable IZ ID YR sep_yr_args MKAY .)
    A               reduce using rule 56 (expr -> variable IZ ID YR sep_yr_args MKAY .)
    YARN            reduce using rule 56 (expr -> variable IZ ID YR sep_yr_args MKAY .)
    NUMBR           reduce using rule 56 (expr -> variable IZ ID YR sep_yr_args MKAY .)
    NUMBAR          reduce using rule 56 (expr -> variable IZ ID YR sep_yr_args MKAY .)
    NOOB            reduce using rule 56 (expr -> variable IZ ID YR sep_yr_args MKAY .)
    BUKKIT          reduce using rule 56 (expr -> variable IZ ID YR sep_yr_args MKAY .)
    EXCLAMATION     reduce using rule 56 (expr -> variable IZ ID YR sep_yr_args MKAY .)


state 214

    (48) sep_yr_args -> sep_yr_args AN . YR expr

    YR              shift and go to state 227


state 215

    (42) cast -> variable R MAEK variable A type .

    NEWLINE         reduce using rule 42 (cast -> variable R MAEK variable A type .)
    COMMA           reduce using rule 42 (cast -> variable R MAEK variable A type .)


state 216

    (38) assign_bukkit -> variable HAS A variable ITZ expr .

    NEWLINE         reduce using rule 38 (assign_bukkit -> variable HAS A variable ITZ expr .)
    COMMA           reduce using rule 38 (assign_bukkit -> variable HAS A variable ITZ expr .)


state 217

    (54) expr -> I IZ ID YR sep_yr_args MKAY .

    NEWLINE         reduce using rule 54 (expr -> I IZ ID YR sep_yr_args MKAY .)
    COMMA           reduce using rule 54 (expr -> I IZ ID YR sep_yr_args MKAY .)
    AN              reduce using rule 54 (expr -> I IZ ID YR sep_yr_args MKAY .)
    MKAY            reduce using rule 54 (expr -> I IZ ID YR sep_yr_args MKAY .)
    I               reduce using rule 54 (expr -> I IZ ID YR sep_yr_args MKAY .)
    SIZE            reduce using rule 54 (expr -> I IZ ID YR sep_yr_args MKAY .)
    ABSLUT          reduce using rule 54 (expr -> I IZ ID YR sep_yr_args MKAY .)
    SUM             reduce using rule 54 (expr -> I IZ ID YR sep_yr_args MKAY .)
    DIFF            reduce using rule 54 (expr -> I IZ ID YR sep_yr_args MKAY .)
    PRODUKT         reduce using rule 54 (expr -> I IZ ID YR sep_yr_args MKAY .)
    QUOSHUNT        reduce using rule 54 (expr -> I IZ ID YR sep_yr_args MKAY .)
    MOD             reduce using rule 54 (expr -> I IZ ID YR sep_yr_args MKAY .)
    BIGGR           reduce using rule 54 (expr -> I IZ ID YR sep_yr_args MKAY .)
    SMALLR          reduce using rule 54 (expr -> I IZ ID YR sep_yr_args MKAY .)
    BOTH            reduce using rule 54 (expr -> I IZ ID YR sep_yr_args MKAY .)
    EITHER          reduce using rule 54 (expr -> I IZ ID YR sep_yr_args MKAY .)
    WON             reduce using rule 54 (expr -> I IZ ID YR sep_yr_args MKAY .)
    NOT             reduce using rule 54 (expr -> I IZ ID YR sep_yr_args MKAY .)
    ALL             reduce using rule 54 (expr -> I IZ ID YR sep_yr_args MKAY .)
    ANY             reduce using rule 54 (expr -> I IZ ID YR sep_yr_args MKAY .)
    DIFFRINT        reduce using rule 54 (expr -> I IZ ID YR sep_yr_args MKAY .)
    SMOOSH          reduce using rule 54 (expr -> I IZ ID YR sep_yr_args MKAY .)
    MAEK            reduce using rule 54 (expr -> I IZ ID YR sep_yr_args MKAY .)
    ID              reduce using rule 54 (expr -> I IZ ID YR sep_yr_args MKAY .)
    IT              reduce using rule 54 (expr -> I IZ ID YR sep_yr_args MKAY .)
    STRING          reduce using rule 54 (expr -> I IZ ID YR sep_yr_args MKAY .)
    FLOAT           reduce using rule 54 (expr -> I IZ ID YR sep_yr_args MKAY .)
    INTEGER         reduce using rule 54 (expr -> I IZ ID YR sep_yr_args MKAY .)
    WIN             reduce using rule 54 (expr -> I IZ ID YR sep_yr_args MKAY .)
    FAIL            reduce using rule 54 (expr -> I IZ ID YR sep_yr_args MKAY .)
    DICT            reduce using rule 54 (expr -> I IZ ID YR sep_yr_args MKAY .)
    A               reduce using rule 54 (expr -> I IZ ID YR sep_yr_args MKAY .)
    YARN            reduce using rule 54 (expr -> I IZ ID YR sep_yr_args MKAY .)
    NUMBR           reduce using rule 54 (expr -> I IZ ID YR sep_yr_args MKAY .)
    NUMBAR          reduce using rule 54 (expr -> I IZ ID YR sep_yr_args MKAY .)
    NOOB            reduce using rule 54 (expr -> I IZ ID YR sep_yr_args MKAY .)
    BUKKIT          reduce using rule 54 (expr -> I IZ ID YR sep_yr_args MKAY .)
    EXCLAMATION     reduce using rule 54 (expr -> I IZ ID YR sep_yr_args MKAY .)


state 218

    (36) decl -> I HAS A variable ITZ A . type
    (60) type -> . YARN
    (61) type -> . NUMBR
    (62) type -> . NUMBAR
    (63) type -> . NOOB
    (64) type -> . BUKKIT

    YARN            shift and go to state 138
    NUMBR           shift and go to state 139
    NUMBAR          shift and go to state 140
    NOOB            shift and go to state 141
    BUKKIT          shift and go to state 142

    type                           shift and go to state 228

state 219

    (35) decl -> I HAS A variable ITZ expr .

    NEWLINE         reduce using rule 35 (decl -> I HAS A variable ITZ expr .)
    COMMA           reduce using rule 35 (decl -> I HAS A variable ITZ expr .)


state 220

    (37) declare_bukkit_block -> O HAI IM variable NEWLINE statements . KTHX
    (2) statements -> statements . statement
    (4) statement -> . command NEWLINE
    (5) statement -> . command COMMA
    (6) command -> . empty
    (7) command -> . expr
    (8) command -> . call
    (9) command -> . cast
    (10) command -> . decl
    (11) command -> . assign_bukkit
    (12) command -> . assign
    (13) command -> . declare_bukkit_block
    (14) command -> . if_else
    (15) command -> . bukkit_function
    (16) command -> . function
    (17) command -> . return
    (18) command -> . loop
    (19) command -> . export
    (20) command -> . import
    (102) empty -> .
    (40) expr -> . variable APOSTROPHE_Z variable
    (54) expr -> . I IZ ID YR sep_yr_args MKAY
    (55) expr -> . I IZ ID
    (56) expr -> . variable IZ ID YR sep_yr_args MKAY
    (57) expr -> . variable IZ ID
    (74) expr -> . SIZE OF expr
    (75) expr -> . ABSLUT OF expr
    (76) expr -> . value
    (77) expr -> . variable
    (78) expr -> . SUM OF expr AN expr
    (79) expr -> . DIFF OF expr AN expr
    (80) expr -> . PRODUKT OF expr AN expr
    (81) expr -> . QUOSHUNT OF expr AN expr
    (82) expr -> . MOD OF expr AN expr
    (83) expr -> . BIGGR OF expr AN expr
    (84) expr -> . SMALLR OF expr AN expr
    (85) expr -> . BOTH OF expr AN expr
    (86) expr -> . EITHER OF expr AN expr
    (87) expr -> . WON OF expr AN expr
    (88) expr -> . NOT expr
    (89) expr -> . ALL OF sep_args MKAY
    (90) expr -> . ANY OF sep_args MKAY
    (91) expr -> . ALL OF args MKAY
    (92) expr -> . ANY OF args MKAY
    (93) expr -> . BOTH SAEM expr AN expr
    (94) expr -> . DIFFRINT expr AN expr
    (95) expr -> . SMOOSH sep_args MKAY
    (96) expr -> . SMOOSH args MKAY
    (97) expr -> . MAEK expr A type
    (98) expr -> . MAEK expr type
    (71) call -> . VISIBLE args
    (72) call -> . VISIBLE args EXCLAMATION
    (73) call -> . GIMMEH variable
    (41) cast -> . variable IS NOW A type
    (42) cast -> . variable R MAEK variable A type
    (43) cast -> . variable R MAEK variable type
    (34) decl -> . I HAS A variable
    (35) decl -> . I HAS A variable ITZ expr
    (36) decl -> . I HAS A variable ITZ A type
    (38) assign_bukkit -> . variable HAS A variable ITZ expr
    (39) assign -> . variable R expr
    (37) declare_bukkit_block -> . O HAI IM variable NEWLINE statements KTHX
    (28) if_else -> . O RLY QUESTION NEWLINE YA RLY NEWLINE statements NO WAI NEWLINE statements OIC
    (29) if_else -> . O RLY QUESTION NEWLINE YA RLY NEWLINE statements OIC
    (30) if_else -> . O RLY QUESTION NEWLINE YA RLY NEWLINE statements elifs NO WAI NEWLINE statements OIC
    (50) bukkit_function -> . HOW IZ variable ID YR sep_yr_args NEWLINE statements IF U SAY SO
    (51) bukkit_function -> . HOW IZ variable ID NEWLINE statements IF U SAY SO
    (52) function -> . HOW IZ I ID YR sep_yr_args NEWLINE statements IF U SAY SO
    (53) function -> . HOW IZ I ID NEWLINE statements IF U SAY SO
    (58) return -> . FOUND YR expr
    (59) return -> . GTFO
    (21) loop -> . IM IN YR variable operation YR variable condition expr NEWLINE statements IM OUTTA YR variable
    (27) export -> . YOU CAN HAS sep_args MKAY
    (26) import -> . CAN HAS PATH QUESTION
    (99) variable -> . ID
    (100) variable -> . IT
    (65) value -> . STRING
    (66) value -> . FLOAT
    (67) value -> . INTEGER
    (68) value -> . WIN
    (69) value -> . FAIL
    (70) value -> . DICT

    KTHX            shift and go to state 229
    NEWLINE         reduce using rule 102 (empty -> .)
    COMMA           reduce using rule 102 (empty -> .)
    I               shift and go to state 26
    SIZE            shift and go to state 28
    ABSLUT          shift and go to state 29
    SUM             shift and go to state 31
    DIFF            shift and go to state 32
    PRODUKT         shift and go to state 33
    QUOSHUNT        shift and go to state 34
    MOD             shift and go to state 35
    BIGGR           shift and go to state 36
    SMALLR          shift and go to state 37
    BOTH            shift and go to state 38
    EITHER          shift and go to state 39
    WON             shift and go to state 40
    NOT             shift and go to state 41
    ALL             shift and go to state 42
    ANY             shift and go to state 43
    DIFFRINT        shift and go to state 44
    SMOOSH          shift and go to state 45
    MAEK            shift and go to state 46
    VISIBLE         shift and go to state 47
    GIMMEH          shift and go to state 48
    O               shift and go to state 49
    HOW             shift and go to state 51
    FOUND           shift and go to state 52
    GTFO            shift and go to state 53
    IM              shift and go to state 50
    YOU             shift and go to state 54
    CAN             shift and go to state 55
    ID              shift and go to state 27
    IT              shift and go to state 56
    STRING          shift and go to state 57
    FLOAT           shift and go to state 6
    INTEGER         shift and go to state 58
    WIN             shift and go to state 59
    FAIL            shift and go to state 60
    DICT            shift and go to state 61

    variable                       shift and go to state 25
    statement                      shift and go to state 63
    command                        shift and go to state 9
    empty                          shift and go to state 10
    expr                           shift and go to state 11
    call                           shift and go to state 12
    cast                           shift and go to state 13
    decl                           shift and go to state 14
    assign_bukkit                  shift and go to state 15
    assign                         shift and go to state 16
    declare_bukkit_block           shift and go to state 17
    if_else                        shift and go to state 18
    bukkit_function                shift and go to state 19
    function                       shift and go to state 20
    return                         shift and go to state 21
    loop                           shift and go to state 22
    export                         shift and go to state 23
    import                         shift and go to state 24
    value                          shift and go to state 30

state 221

    (28) if_else -> O RLY QUESTION NEWLINE YA RLY . NEWLINE statements NO WAI NEWLINE statements OIC
    (29) if_else -> O RLY QUESTION NEWLINE YA RLY . NEWLINE statements OIC
    (30) if_else -> O RLY QUESTION NEWLINE YA RLY . NEWLINE statements elifs NO WAI NEWLINE statements OIC

    NEWLINE         shift and go to state 230


state 222

    (21) loop -> IM IN YR variable operation YR . variable condition expr NEWLINE statements IM OUTTA YR variable
    (99) variable -> . ID
    (100) variable -> . IT

    ID              shift and go to state 27
    IT              shift and go to state 56

    variable                       shift and go to state 231

state 223

    (50) bukkit_function -> HOW IZ variable ID YR sep_yr_args . NEWLINE statements IF U SAY SO
    (48) sep_yr_args -> sep_yr_args . AN YR expr

    NEWLINE         shift and go to state 232
    AN              shift and go to state 214


state 224

    (51) bukkit_function -> HOW IZ variable ID NEWLINE statements . IF U SAY SO
    (2) statements -> statements . statement
    (4) statement -> . command NEWLINE
    (5) statement -> . command COMMA
    (6) command -> . empty
    (7) command -> . expr
    (8) command -> . call
    (9) command -> . cast
    (10) command -> . decl
    (11) command -> . assign_bukkit
    (12) command -> . assign
    (13) command -> . declare_bukkit_block
    (14) command -> . if_else
    (15) command -> . bukkit_function
    (16) command -> . function
    (17) command -> . return
    (18) command -> . loop
    (19) command -> . export
    (20) command -> . import
    (102) empty -> .
    (40) expr -> . variable APOSTROPHE_Z variable
    (54) expr -> . I IZ ID YR sep_yr_args MKAY
    (55) expr -> . I IZ ID
    (56) expr -> . variable IZ ID YR sep_yr_args MKAY
    (57) expr -> . variable IZ ID
    (74) expr -> . SIZE OF expr
    (75) expr -> . ABSLUT OF expr
    (76) expr -> . value
    (77) expr -> . variable
    (78) expr -> . SUM OF expr AN expr
    (79) expr -> . DIFF OF expr AN expr
    (80) expr -> . PRODUKT OF expr AN expr
    (81) expr -> . QUOSHUNT OF expr AN expr
    (82) expr -> . MOD OF expr AN expr
    (83) expr -> . BIGGR OF expr AN expr
    (84) expr -> . SMALLR OF expr AN expr
    (85) expr -> . BOTH OF expr AN expr
    (86) expr -> . EITHER OF expr AN expr
    (87) expr -> . WON OF expr AN expr
    (88) expr -> . NOT expr
    (89) expr -> . ALL OF sep_args MKAY
    (90) expr -> . ANY OF sep_args MKAY
    (91) expr -> . ALL OF args MKAY
    (92) expr -> . ANY OF args MKAY
    (93) expr -> . BOTH SAEM expr AN expr
    (94) expr -> . DIFFRINT expr AN expr
    (95) expr -> . SMOOSH sep_args MKAY
    (96) expr -> . SMOOSH args MKAY
    (97) expr -> . MAEK expr A type
    (98) expr -> . MAEK expr type
    (71) call -> . VISIBLE args
    (72) call -> . VISIBLE args EXCLAMATION
    (73) call -> . GIMMEH variable
    (41) cast -> . variable IS NOW A type
    (42) cast -> . variable R MAEK variable A type
    (43) cast -> . variable R MAEK variable type
    (34) decl -> . I HAS A variable
    (35) decl -> . I HAS A variable ITZ expr
    (36) decl -> . I HAS A variable ITZ A type
    (38) assign_bukkit -> . variable HAS A variable ITZ expr
    (39) assign -> . variable R expr
    (37) declare_bukkit_block -> . O HAI IM variable NEWLINE statements KTHX
    (28) if_else -> . O RLY QUESTION NEWLINE YA RLY NEWLINE statements NO WAI NEWLINE statements OIC
    (29) if_else -> . O RLY QUESTION NEWLINE YA RLY NEWLINE statements OIC
    (30) if_else -> . O RLY QUESTION NEWLINE YA RLY NEWLINE statements elifs NO WAI NEWLINE statements OIC
    (50) bukkit_function -> . HOW IZ variable ID YR sep_yr_args NEWLINE statements IF U SAY SO
    (51) bukkit_function -> . HOW IZ variable ID NEWLINE statements IF U SAY SO
    (52) function -> . HOW IZ I ID YR sep_yr_args NEWLINE statements IF U SAY SO
    (53) function -> . HOW IZ I ID NEWLINE statements IF U SAY SO
    (58) return -> . FOUND YR expr
    (59) return -> . GTFO
    (21) loop -> . IM IN YR variable operation YR variable condition expr NEWLINE statements IM OUTTA YR variable
    (27) export -> . YOU CAN HAS sep_args MKAY
    (26) import -> . CAN HAS PATH QUESTION
    (99) variable -> . ID
    (100) variable -> . IT
    (65) value -> . STRING
    (66) value -> . FLOAT
    (67) value -> . INTEGER
    (68) value -> . WIN
    (69) value -> . FAIL
    (70) value -> . DICT

    IF              shift and go to state 233
    NEWLINE         reduce using rule 102 (empty -> .)
    COMMA           reduce using rule 102 (empty -> .)
    I               shift and go to state 26
    SIZE            shift and go to state 28
    ABSLUT          shift and go to state 29
    SUM             shift and go to state 31
    DIFF            shift and go to state 32
    PRODUKT         shift and go to state 33
    QUOSHUNT        shift and go to state 34
    MOD             shift and go to state 35
    BIGGR           shift and go to state 36
    SMALLR          shift and go to state 37
    BOTH            shift and go to state 38
    EITHER          shift and go to state 39
    WON             shift and go to state 40
    NOT             shift and go to state 41
    ALL             shift and go to state 42
    ANY             shift and go to state 43
    DIFFRINT        shift and go to state 44
    SMOOSH          shift and go to state 45
    MAEK            shift and go to state 46
    VISIBLE         shift and go to state 47
    GIMMEH          shift and go to state 48
    O               shift and go to state 49
    HOW             shift and go to state 51
    FOUND           shift and go to state 52
    GTFO            shift and go to state 53
    IM              shift and go to state 50
    YOU             shift and go to state 54
    CAN             shift and go to state 55
    ID              shift and go to state 27
    IT              shift and go to state 56
    STRING          shift and go to state 57
    FLOAT           shift and go to state 6
    INTEGER         shift and go to state 58
    WIN             shift and go to state 59
    FAIL            shift and go to state 60
    DICT            shift and go to state 61

    variable                       shift and go to state 25
    statement                      shift and go to state 63
    command                        shift and go to state 9
    empty                          shift and go to state 10
    expr                           shift and go to state 11
    call                           shift and go to state 12
    cast                           shift and go to state 13
    decl                           shift and go to state 14
    assign_bukkit                  shift and go to state 15
    assign                         shift and go to state 16
    declare_bukkit_block           shift and go to state 17
    if_else                        shift and go to state 18
    bukkit_function                shift and go to state 19
    function                       shift and go to state 20
    return                         shift and go to state 21
    loop                           shift and go to state 22
    export                         shift and go to state 23
    import                         shift and go to state 24
    value                          shift and go to state 30

state 225

    (52) function -> HOW IZ I ID YR sep_yr_args . NEWLINE statements IF U SAY SO
    (48) sep_yr_args -> sep_yr_args . AN YR expr

    NEWLINE         shift and go to state 234
    AN              shift and go to state 214


state 226

    (53) function -> HOW IZ I ID NEWLINE statements . IF U SAY SO
    (2) statements -> statements . statement
    (4) statement -> . command NEWLINE
    (5) statement -> . command COMMA
    (6) command -> . empty
    (7) command -> . expr
    (8) command -> . call
    (9) command -> . cast
    (10) command -> . decl
    (11) command -> . assign_bukkit
    (12) command -> . assign
    (13) command -> . declare_bukkit_block
    (14) command -> . if_else
    (15) command -> . bukkit_function
    (16) command -> . function
    (17) command -> . return
    (18) command -> . loop
    (19) command -> . export
    (20) command -> . import
    (102) empty -> .
    (40) expr -> . variable APOSTROPHE_Z variable
    (54) expr -> . I IZ ID YR sep_yr_args MKAY
    (55) expr -> . I IZ ID
    (56) expr -> . variable IZ ID YR sep_yr_args MKAY
    (57) expr -> . variable IZ ID
    (74) expr -> . SIZE OF expr
    (75) expr -> . ABSLUT OF expr
    (76) expr -> . value
    (77) expr -> . variable
    (78) expr -> . SUM OF expr AN expr
    (79) expr -> . DIFF OF expr AN expr
    (80) expr -> . PRODUKT OF expr AN expr
    (81) expr -> . QUOSHUNT OF expr AN expr
    (82) expr -> . MOD OF expr AN expr
    (83) expr -> . BIGGR OF expr AN expr
    (84) expr -> . SMALLR OF expr AN expr
    (85) expr -> . BOTH OF expr AN expr
    (86) expr -> . EITHER OF expr AN expr
    (87) expr -> . WON OF expr AN expr
    (88) expr -> . NOT expr
    (89) expr -> . ALL OF sep_args MKAY
    (90) expr -> . ANY OF sep_args MKAY
    (91) expr -> . ALL OF args MKAY
    (92) expr -> . ANY OF args MKAY
    (93) expr -> . BOTH SAEM expr AN expr
    (94) expr -> . DIFFRINT expr AN expr
    (95) expr -> . SMOOSH sep_args MKAY
    (96) expr -> . SMOOSH args MKAY
    (97) expr -> . MAEK expr A type
    (98) expr -> . MAEK expr type
    (71) call -> . VISIBLE args
    (72) call -> . VISIBLE args EXCLAMATION
    (73) call -> . GIMMEH variable
    (41) cast -> . variable IS NOW A type
    (42) cast -> . variable R MAEK variable A type
    (43) cast -> . variable R MAEK variable type
    (34) decl -> . I HAS A variable
    (35) decl -> . I HAS A variable ITZ expr
    (36) decl -> . I HAS A variable ITZ A type
    (38) assign_bukkit -> . variable HAS A variable ITZ expr
    (39) assign -> . variable R expr
    (37) declare_bukkit_block -> . O HAI IM variable NEWLINE statements KTHX
    (28) if_else -> . O RLY QUESTION NEWLINE YA RLY NEWLINE statements NO WAI NEWLINE statements OIC
    (29) if_else -> . O RLY QUESTION NEWLINE YA RLY NEWLINE statements OIC
    (30) if_else -> . O RLY QUESTION NEWLINE YA RLY NEWLINE statements elifs NO WAI NEWLINE statements OIC
    (50) bukkit_function -> . HOW IZ variable ID YR sep_yr_args NEWLINE statements IF U SAY SO
    (51) bukkit_function -> . HOW IZ variable ID NEWLINE statements IF U SAY SO
    (52) function -> . HOW IZ I ID YR sep_yr_args NEWLINE statements IF U SAY SO
    (53) function -> . HOW IZ I ID NEWLINE statements IF U SAY SO
    (58) return -> . FOUND YR expr
    (59) return -> . GTFO
    (21) loop -> . IM IN YR variable operation YR variable condition expr NEWLINE statements IM OUTTA YR variable
    (27) export -> . YOU CAN HAS sep_args MKAY
    (26) import -> . CAN HAS PATH QUESTION
    (99) variable -> . ID
    (100) variable -> . IT
    (65) value -> . STRING
    (66) value -> . FLOAT
    (67) value -> . INTEGER
    (68) value -> . WIN
    (69) value -> . FAIL
    (70) value -> . DICT

    IF              shift and go to state 235
    NEWLINE         reduce using rule 102 (empty -> .)
    COMMA           reduce using rule 102 (empty -> .)
    I               shift and go to state 26
    SIZE            shift and go to state 28
    ABSLUT          shift and go to state 29
    SUM             shift and go to state 31
    DIFF            shift and go to state 32
    PRODUKT         shift and go to state 33
    QUOSHUNT        shift and go to state 34
    MOD             shift and go to state 35
    BIGGR           shift and go to state 36
    SMALLR          shift and go to state 37
    BOTH            shift and go to state 38
    EITHER          shift and go to state 39
    WON             shift and go to state 40
    NOT             shift and go to state 41
    ALL             shift and go to state 42
    ANY             shift and go to state 43
    DIFFRINT        shift and go to state 44
    SMOOSH          shift and go to state 45
    MAEK            shift and go to state 46
    VISIBLE         shift and go to state 47
    GIMMEH          shift and go to state 48
    O               shift and go to state 49
    HOW             shift and go to state 51
    FOUND           shift and go to state 52
    GTFO            shift and go to state 53
    IM              shift and go to state 50
    YOU             shift and go to state 54
    CAN             shift and go to state 55
    ID              shift and go to state 27
    IT              shift and go to state 56
    STRING          shift and go to state 57
    FLOAT           shift and go to state 6
    INTEGER         shift and go to state 58
    WIN             shift and go to state 59
    FAIL            shift and go to state 60
    DICT            shift and go to state 61

    statement                      shift and go to state 63
    command                        shift and go to state 9
    empty                          shift and go to state 10
    expr                           shift and go to state 11
    call                           shift and go to state 12
    cast                           shift and go to state 13
    decl                           shift and go to state 14
    assign_bukkit                  shift and go to state 15
    assign                         shift and go to state 16
    declare_bukkit_block           shift and go to state 17
    if_else                        shift and go to state 18
    bukkit_function                shift and go to state 19
    function                       shift and go to state 20
    return                         shift and go to state 21
    loop                           shift and go to state 22
    export                         shift and go to state 23
    import                         shift and go to state 24
    variable                       shift and go to state 25
    value                          shift and go to state 30

state 227

    (48) sep_yr_args -> sep_yr_args AN YR . expr
    (40) expr -> . variable APOSTROPHE_Z variable
    (54) expr -> . I IZ ID YR sep_yr_args MKAY
    (55) expr -> . I IZ ID
    (56) expr -> . variable IZ ID YR sep_yr_args MKAY
    (57) expr -> . variable IZ ID
    (74) expr -> . SIZE OF expr
    (75) expr -> . ABSLUT OF expr
    (76) expr -> . value
    (77) expr -> . variable
    (78) expr -> . SUM OF expr AN expr
    (79) expr -> . DIFF OF expr AN expr
    (80) expr -> . PRODUKT OF expr AN expr
    (81) expr -> . QUOSHUNT OF expr AN expr
    (82) expr -> . MOD OF expr AN expr
    (83) expr -> . BIGGR OF expr AN expr
    (84) expr -> . SMALLR OF expr AN expr
    (85) expr -> . BOTH OF expr AN expr
    (86) expr -> . EITHER OF expr AN expr
    (87) expr -> . WON OF expr AN expr
    (88) expr -> . NOT expr
    (89) expr -> . ALL OF sep_args MKAY
    (90) expr -> . ANY OF sep_args MKAY
    (91) expr -> . ALL OF args MKAY
    (92) expr -> . ANY OF args MKAY
    (93) expr -> . BOTH SAEM expr AN expr
    (94) expr -> . DIFFRINT expr AN expr
    (95) expr -> . SMOOSH sep_args MKAY
    (96) expr -> . SMOOSH args MKAY
    (97) expr -> . MAEK expr A type
    (98) expr -> . MAEK expr type
    (99) variable -> . ID
    (100) variable -> . IT
    (65) value -> . STRING
    (66) value -> . FLOAT
    (67) value -> . INTEGER
    (68) value -> . WIN
    (69) value -> . FAIL
    (70) value -> . DICT

    I               shift and go to state 88
    SIZE            shift and go to state 28
    ABSLUT          shift and go to state 29
    SUM             shift and go to state 31
    DIFF            shift and go to state 32
    PRODUKT         shift and go to state 33
    QUOSHUNT        shift and go to state 34
    MOD             shift and go to state 35
    BIGGR           shift and go to state 36
    SMALLR          shift and go to state 37
    BOTH            shift and go to state 38
    EITHER          shift and go to state 39
    WON             shift and go to state 40
    NOT             shift and go to state 41
    ALL             shift and go to state 42
    ANY             shift and go to state 43
    DIFFRINT        shift and go to state 44
    SMOOSH          shift and go to state 45
    MAEK            shift and go to state 46
    ID              shift and go to state 27
    IT              shift and go to state 56
    STRING          shift and go to state 57
    FLOAT           shift and go to state 6
    INTEGER         shift and go to state 58
    WIN             shift and go to state 59
    FAIL            shift and go to state 60
    DICT            shift and go to state 61

    expr                           shift and go to state 236
    variable                       shift and go to state 87
    value                          shift and go to state 30

state 228

    (36) decl -> I HAS A variable ITZ A type .

    NEWLINE         reduce using rule 36 (decl -> I HAS A variable ITZ A type .)
    COMMA           reduce using rule 36 (decl -> I HAS A variable ITZ A type .)


state 229

    (37) declare_bukkit_block -> O HAI IM variable NEWLINE statements KTHX .

    NEWLINE         reduce using rule 37 (declare_bukkit_block -> O HAI IM variable NEWLINE statements KTHX .)
    COMMA           reduce using rule 37 (declare_bukkit_block -> O HAI IM variable NEWLINE statements KTHX .)


state 230

    (28) if_else -> O RLY QUESTION NEWLINE YA RLY NEWLINE . statements NO WAI NEWLINE statements OIC
    (29) if_else -> O RLY QUESTION NEWLINE YA RLY NEWLINE . statements OIC
    (30) if_else -> O RLY QUESTION NEWLINE YA RLY NEWLINE . statements elifs NO WAI NEWLINE statements OIC
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . command NEWLINE
    (5) statement -> . command COMMA
    (6) command -> . empty
    (7) command -> . expr
    (8) command -> . call
    (9) command -> . cast
    (10) command -> . decl
    (11) command -> . assign_bukkit
    (12) command -> . assign
    (13) command -> . declare_bukkit_block
    (14) command -> . if_else
    (15) command -> . bukkit_function
    (16) command -> . function
    (17) command -> . return
    (18) command -> . loop
    (19) command -> . export
    (20) command -> . import
    (102) empty -> .
    (40) expr -> . variable APOSTROPHE_Z variable
    (54) expr -> . I IZ ID YR sep_yr_args MKAY
    (55) expr -> . I IZ ID
    (56) expr -> . variable IZ ID YR sep_yr_args MKAY
    (57) expr -> . variable IZ ID
    (74) expr -> . SIZE OF expr
    (75) expr -> . ABSLUT OF expr
    (76) expr -> . value
    (77) expr -> . variable
    (78) expr -> . SUM OF expr AN expr
    (79) expr -> . DIFF OF expr AN expr
    (80) expr -> . PRODUKT OF expr AN expr
    (81) expr -> . QUOSHUNT OF expr AN expr
    (82) expr -> . MOD OF expr AN expr
    (83) expr -> . BIGGR OF expr AN expr
    (84) expr -> . SMALLR OF expr AN expr
    (85) expr -> . BOTH OF expr AN expr
    (86) expr -> . EITHER OF expr AN expr
    (87) expr -> . WON OF expr AN expr
    (88) expr -> . NOT expr
    (89) expr -> . ALL OF sep_args MKAY
    (90) expr -> . ANY OF sep_args MKAY
    (91) expr -> . ALL OF args MKAY
    (92) expr -> . ANY OF args MKAY
    (93) expr -> . BOTH SAEM expr AN expr
    (94) expr -> . DIFFRINT expr AN expr
    (95) expr -> . SMOOSH sep_args MKAY
    (96) expr -> . SMOOSH args MKAY
    (97) expr -> . MAEK expr A type
    (98) expr -> . MAEK expr type
    (71) call -> . VISIBLE args
    (72) call -> . VISIBLE args EXCLAMATION
    (73) call -> . GIMMEH variable
    (41) cast -> . variable IS NOW A type
    (42) cast -> . variable R MAEK variable A type
    (43) cast -> . variable R MAEK variable type
    (34) decl -> . I HAS A variable
    (35) decl -> . I HAS A variable ITZ expr
    (36) decl -> . I HAS A variable ITZ A type
    (38) assign_bukkit -> . variable HAS A variable ITZ expr
    (39) assign -> . variable R expr
    (37) declare_bukkit_block -> . O HAI IM variable NEWLINE statements KTHX
    (28) if_else -> . O RLY QUESTION NEWLINE YA RLY NEWLINE statements NO WAI NEWLINE statements OIC
    (29) if_else -> . O RLY QUESTION NEWLINE YA RLY NEWLINE statements OIC
    (30) if_else -> . O RLY QUESTION NEWLINE YA RLY NEWLINE statements elifs NO WAI NEWLINE statements OIC
    (50) bukkit_function -> . HOW IZ variable ID YR sep_yr_args NEWLINE statements IF U SAY SO
    (51) bukkit_function -> . HOW IZ variable ID NEWLINE statements IF U SAY SO
    (52) function -> . HOW IZ I ID YR sep_yr_args NEWLINE statements IF U SAY SO
    (53) function -> . HOW IZ I ID NEWLINE statements IF U SAY SO
    (58) return -> . FOUND YR expr
    (59) return -> . GTFO
    (21) loop -> . IM IN YR variable operation YR variable condition expr NEWLINE statements IM OUTTA YR variable
    (27) export -> . YOU CAN HAS sep_args MKAY
    (26) import -> . CAN HAS PATH QUESTION
    (99) variable -> . ID
    (100) variable -> . IT
    (65) value -> . STRING
    (66) value -> . FLOAT
    (67) value -> . INTEGER
    (68) value -> . WIN
    (69) value -> . FAIL
    (70) value -> . DICT

    NEWLINE         reduce using rule 102 (empty -> .)
    COMMA           reduce using rule 102 (empty -> .)
    I               shift and go to state 26
    SIZE            shift and go to state 28
    ABSLUT          shift and go to state 29
    SUM             shift and go to state 31
    DIFF            shift and go to state 32
    PRODUKT         shift and go to state 33
    QUOSHUNT        shift and go to state 34
    MOD             shift and go to state 35
    BIGGR           shift and go to state 36
    SMALLR          shift and go to state 37
    BOTH            shift and go to state 38
    EITHER          shift and go to state 39
    WON             shift and go to state 40
    NOT             shift and go to state 41
    ALL             shift and go to state 42
    ANY             shift and go to state 43
    DIFFRINT        shift and go to state 44
    SMOOSH          shift and go to state 45
    MAEK            shift and go to state 46
    VISIBLE         shift and go to state 47
    GIMMEH          shift and go to state 48
    O               shift and go to state 49
    HOW             shift and go to state 51
    FOUND           shift and go to state 52
    GTFO            shift and go to state 53
    IM              shift and go to state 50
    YOU             shift and go to state 54
    CAN             shift and go to state 55
    ID              shift and go to state 27
    IT              shift and go to state 56
    STRING          shift and go to state 57
    FLOAT           shift and go to state 6
    INTEGER         shift and go to state 58
    WIN             shift and go to state 59
    FAIL            shift and go to state 60
    DICT            shift and go to state 61

    statements                     shift and go to state 237
    statement                      shift and go to state 8
    command                        shift and go to state 9
    empty                          shift and go to state 10
    expr                           shift and go to state 11
    call                           shift and go to state 12
    cast                           shift and go to state 13
    decl                           shift and go to state 14
    assign_bukkit                  shift and go to state 15
    assign                         shift and go to state 16
    declare_bukkit_block           shift and go to state 17
    if_else                        shift and go to state 18
    bukkit_function                shift and go to state 19
    function                       shift and go to state 20
    return                         shift and go to state 21
    loop                           shift and go to state 22
    export                         shift and go to state 23
    import                         shift and go to state 24
    variable                       shift and go to state 25
    value                          shift and go to state 30

state 231

    (21) loop -> IM IN YR variable operation YR variable . condition expr NEWLINE statements IM OUTTA YR variable
    (24) condition -> . TIL
    (25) condition -> . WILE

    TIL             shift and go to state 239
    WILE            shift and go to state 240

    condition                      shift and go to state 238

state 232

    (50) bukkit_function -> HOW IZ variable ID YR sep_yr_args NEWLINE . statements IF U SAY SO
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . command NEWLINE
    (5) statement -> . command COMMA
    (6) command -> . empty
    (7) command -> . expr
    (8) command -> . call
    (9) command -> . cast
    (10) command -> . decl
    (11) command -> . assign_bukkit
    (12) command -> . assign
    (13) command -> . declare_bukkit_block
    (14) command -> . if_else
    (15) command -> . bukkit_function
    (16) command -> . function
    (17) command -> . return
    (18) command -> . loop
    (19) command -> . export
    (20) command -> . import
    (102) empty -> .
    (40) expr -> . variable APOSTROPHE_Z variable
    (54) expr -> . I IZ ID YR sep_yr_args MKAY
    (55) expr -> . I IZ ID
    (56) expr -> . variable IZ ID YR sep_yr_args MKAY
    (57) expr -> . variable IZ ID
    (74) expr -> . SIZE OF expr
    (75) expr -> . ABSLUT OF expr
    (76) expr -> . value
    (77) expr -> . variable
    (78) expr -> . SUM OF expr AN expr
    (79) expr -> . DIFF OF expr AN expr
    (80) expr -> . PRODUKT OF expr AN expr
    (81) expr -> . QUOSHUNT OF expr AN expr
    (82) expr -> . MOD OF expr AN expr
    (83) expr -> . BIGGR OF expr AN expr
    (84) expr -> . SMALLR OF expr AN expr
    (85) expr -> . BOTH OF expr AN expr
    (86) expr -> . EITHER OF expr AN expr
    (87) expr -> . WON OF expr AN expr
    (88) expr -> . NOT expr
    (89) expr -> . ALL OF sep_args MKAY
    (90) expr -> . ANY OF sep_args MKAY
    (91) expr -> . ALL OF args MKAY
    (92) expr -> . ANY OF args MKAY
    (93) expr -> . BOTH SAEM expr AN expr
    (94) expr -> . DIFFRINT expr AN expr
    (95) expr -> . SMOOSH sep_args MKAY
    (96) expr -> . SMOOSH args MKAY
    (97) expr -> . MAEK expr A type
    (98) expr -> . MAEK expr type
    (71) call -> . VISIBLE args
    (72) call -> . VISIBLE args EXCLAMATION
    (73) call -> . GIMMEH variable
    (41) cast -> . variable IS NOW A type
    (42) cast -> . variable R MAEK variable A type
    (43) cast -> . variable R MAEK variable type
    (34) decl -> . I HAS A variable
    (35) decl -> . I HAS A variable ITZ expr
    (36) decl -> . I HAS A variable ITZ A type
    (38) assign_bukkit -> . variable HAS A variable ITZ expr
    (39) assign -> . variable R expr
    (37) declare_bukkit_block -> . O HAI IM variable NEWLINE statements KTHX
    (28) if_else -> . O RLY QUESTION NEWLINE YA RLY NEWLINE statements NO WAI NEWLINE statements OIC
    (29) if_else -> . O RLY QUESTION NEWLINE YA RLY NEWLINE statements OIC
    (30) if_else -> . O RLY QUESTION NEWLINE YA RLY NEWLINE statements elifs NO WAI NEWLINE statements OIC
    (50) bukkit_function -> . HOW IZ variable ID YR sep_yr_args NEWLINE statements IF U SAY SO
    (51) bukkit_function -> . HOW IZ variable ID NEWLINE statements IF U SAY SO
    (52) function -> . HOW IZ I ID YR sep_yr_args NEWLINE statements IF U SAY SO
    (53) function -> . HOW IZ I ID NEWLINE statements IF U SAY SO
    (58) return -> . FOUND YR expr
    (59) return -> . GTFO
    (21) loop -> . IM IN YR variable operation YR variable condition expr NEWLINE statements IM OUTTA YR variable
    (27) export -> . YOU CAN HAS sep_args MKAY
    (26) import -> . CAN HAS PATH QUESTION
    (99) variable -> . ID
    (100) variable -> . IT
    (65) value -> . STRING
    (66) value -> . FLOAT
    (67) value -> . INTEGER
    (68) value -> . WIN
    (69) value -> . FAIL
    (70) value -> . DICT

    NEWLINE         reduce using rule 102 (empty -> .)
    COMMA           reduce using rule 102 (empty -> .)
    I               shift and go to state 26
    SIZE            shift and go to state 28
    ABSLUT          shift and go to state 29
    SUM             shift and go to state 31
    DIFF            shift and go to state 32
    PRODUKT         shift and go to state 33
    QUOSHUNT        shift and go to state 34
    MOD             shift and go to state 35
    BIGGR           shift and go to state 36
    SMALLR          shift and go to state 37
    BOTH            shift and go to state 38
    EITHER          shift and go to state 39
    WON             shift and go to state 40
    NOT             shift and go to state 41
    ALL             shift and go to state 42
    ANY             shift and go to state 43
    DIFFRINT        shift and go to state 44
    SMOOSH          shift and go to state 45
    MAEK            shift and go to state 46
    VISIBLE         shift and go to state 47
    GIMMEH          shift and go to state 48
    O               shift and go to state 49
    HOW             shift and go to state 51
    FOUND           shift and go to state 52
    GTFO            shift and go to state 53
    IM              shift and go to state 50
    YOU             shift and go to state 54
    CAN             shift and go to state 55
    ID              shift and go to state 27
    IT              shift and go to state 56
    STRING          shift and go to state 57
    FLOAT           shift and go to state 6
    INTEGER         shift and go to state 58
    WIN             shift and go to state 59
    FAIL            shift and go to state 60
    DICT            shift and go to state 61

    variable                       shift and go to state 25
    statements                     shift and go to state 241
    statement                      shift and go to state 8
    command                        shift and go to state 9
    empty                          shift and go to state 10
    expr                           shift and go to state 11
    call                           shift and go to state 12
    cast                           shift and go to state 13
    decl                           shift and go to state 14
    assign_bukkit                  shift and go to state 15
    assign                         shift and go to state 16
    declare_bukkit_block           shift and go to state 17
    if_else                        shift and go to state 18
    bukkit_function                shift and go to state 19
    function                       shift and go to state 20
    return                         shift and go to state 21
    loop                           shift and go to state 22
    export                         shift and go to state 23
    import                         shift and go to state 24
    value                          shift and go to state 30

state 233

    (51) bukkit_function -> HOW IZ variable ID NEWLINE statements IF . U SAY SO

    U               shift and go to state 242


state 234

    (52) function -> HOW IZ I ID YR sep_yr_args NEWLINE . statements IF U SAY SO
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . command NEWLINE
    (5) statement -> . command COMMA
    (6) command -> . empty
    (7) command -> . expr
    (8) command -> . call
    (9) command -> . cast
    (10) command -> . decl
    (11) command -> . assign_bukkit
    (12) command -> . assign
    (13) command -> . declare_bukkit_block
    (14) command -> . if_else
    (15) command -> . bukkit_function
    (16) command -> . function
    (17) command -> . return
    (18) command -> . loop
    (19) command -> . export
    (20) command -> . import
    (102) empty -> .
    (40) expr -> . variable APOSTROPHE_Z variable
    (54) expr -> . I IZ ID YR sep_yr_args MKAY
    (55) expr -> . I IZ ID
    (56) expr -> . variable IZ ID YR sep_yr_args MKAY
    (57) expr -> . variable IZ ID
    (74) expr -> . SIZE OF expr
    (75) expr -> . ABSLUT OF expr
    (76) expr -> . value
    (77) expr -> . variable
    (78) expr -> . SUM OF expr AN expr
    (79) expr -> . DIFF OF expr AN expr
    (80) expr -> . PRODUKT OF expr AN expr
    (81) expr -> . QUOSHUNT OF expr AN expr
    (82) expr -> . MOD OF expr AN expr
    (83) expr -> . BIGGR OF expr AN expr
    (84) expr -> . SMALLR OF expr AN expr
    (85) expr -> . BOTH OF expr AN expr
    (86) expr -> . EITHER OF expr AN expr
    (87) expr -> . WON OF expr AN expr
    (88) expr -> . NOT expr
    (89) expr -> . ALL OF sep_args MKAY
    (90) expr -> . ANY OF sep_args MKAY
    (91) expr -> . ALL OF args MKAY
    (92) expr -> . ANY OF args MKAY
    (93) expr -> . BOTH SAEM expr AN expr
    (94) expr -> . DIFFRINT expr AN expr
    (95) expr -> . SMOOSH sep_args MKAY
    (96) expr -> . SMOOSH args MKAY
    (97) expr -> . MAEK expr A type
    (98) expr -> . MAEK expr type
    (71) call -> . VISIBLE args
    (72) call -> . VISIBLE args EXCLAMATION
    (73) call -> . GIMMEH variable
    (41) cast -> . variable IS NOW A type
    (42) cast -> . variable R MAEK variable A type
    (43) cast -> . variable R MAEK variable type
    (34) decl -> . I HAS A variable
    (35) decl -> . I HAS A variable ITZ expr
    (36) decl -> . I HAS A variable ITZ A type
    (38) assign_bukkit -> . variable HAS A variable ITZ expr
    (39) assign -> . variable R expr
    (37) declare_bukkit_block -> . O HAI IM variable NEWLINE statements KTHX
    (28) if_else -> . O RLY QUESTION NEWLINE YA RLY NEWLINE statements NO WAI NEWLINE statements OIC
    (29) if_else -> . O RLY QUESTION NEWLINE YA RLY NEWLINE statements OIC
    (30) if_else -> . O RLY QUESTION NEWLINE YA RLY NEWLINE statements elifs NO WAI NEWLINE statements OIC
    (50) bukkit_function -> . HOW IZ variable ID YR sep_yr_args NEWLINE statements IF U SAY SO
    (51) bukkit_function -> . HOW IZ variable ID NEWLINE statements IF U SAY SO
    (52) function -> . HOW IZ I ID YR sep_yr_args NEWLINE statements IF U SAY SO
    (53) function -> . HOW IZ I ID NEWLINE statements IF U SAY SO
    (58) return -> . FOUND YR expr
    (59) return -> . GTFO
    (21) loop -> . IM IN YR variable operation YR variable condition expr NEWLINE statements IM OUTTA YR variable
    (27) export -> . YOU CAN HAS sep_args MKAY
    (26) import -> . CAN HAS PATH QUESTION
    (99) variable -> . ID
    (100) variable -> . IT
    (65) value -> . STRING
    (66) value -> . FLOAT
    (67) value -> . INTEGER
    (68) value -> . WIN
    (69) value -> . FAIL
    (70) value -> . DICT

    NEWLINE         reduce using rule 102 (empty -> .)
    COMMA           reduce using rule 102 (empty -> .)
    I               shift and go to state 26
    SIZE            shift and go to state 28
    ABSLUT          shift and go to state 29
    SUM             shift and go to state 31
    DIFF            shift and go to state 32
    PRODUKT         shift and go to state 33
    QUOSHUNT        shift and go to state 34
    MOD             shift and go to state 35
    BIGGR           shift and go to state 36
    SMALLR          shift and go to state 37
    BOTH            shift and go to state 38
    EITHER          shift and go to state 39
    WON             shift and go to state 40
    NOT             shift and go to state 41
    ALL             shift and go to state 42
    ANY             shift and go to state 43
    DIFFRINT        shift and go to state 44
    SMOOSH          shift and go to state 45
    MAEK            shift and go to state 46
    VISIBLE         shift and go to state 47
    GIMMEH          shift and go to state 48
    O               shift and go to state 49
    HOW             shift and go to state 51
    FOUND           shift and go to state 52
    GTFO            shift and go to state 53
    IM              shift and go to state 50
    YOU             shift and go to state 54
    CAN             shift and go to state 55
    ID              shift and go to state 27
    IT              shift and go to state 56
    STRING          shift and go to state 57
    FLOAT           shift and go to state 6
    INTEGER         shift and go to state 58
    WIN             shift and go to state 59
    FAIL            shift and go to state 60
    DICT            shift and go to state 61

    statements                     shift and go to state 243
    statement                      shift and go to state 8
    command                        shift and go to state 9
    empty                          shift and go to state 10
    expr                           shift and go to state 11
    call                           shift and go to state 12
    cast                           shift and go to state 13
    decl                           shift and go to state 14
    assign_bukkit                  shift and go to state 15
    assign                         shift and go to state 16
    declare_bukkit_block           shift and go to state 17
    if_else                        shift and go to state 18
    bukkit_function                shift and go to state 19
    function                       shift and go to state 20
    return                         shift and go to state 21
    loop                           shift and go to state 22
    export                         shift and go to state 23
    import                         shift and go to state 24
    variable                       shift and go to state 25
    value                          shift and go to state 30

state 235

    (53) function -> HOW IZ I ID NEWLINE statements IF . U SAY SO

    U               shift and go to state 244


state 236

    (48) sep_yr_args -> sep_yr_args AN YR expr .

    MKAY            reduce using rule 48 (sep_yr_args -> sep_yr_args AN YR expr .)
    AN              reduce using rule 48 (sep_yr_args -> sep_yr_args AN YR expr .)
    NEWLINE         reduce using rule 48 (sep_yr_args -> sep_yr_args AN YR expr .)


state 237

    (28) if_else -> O RLY QUESTION NEWLINE YA RLY NEWLINE statements . NO WAI NEWLINE statements OIC
    (29) if_else -> O RLY QUESTION NEWLINE YA RLY NEWLINE statements . OIC
    (30) if_else -> O RLY QUESTION NEWLINE YA RLY NEWLINE statements . elifs NO WAI NEWLINE statements OIC
    (2) statements -> statements . statement
    (31) elifs -> . elifs elif
    (32) elifs -> . elif
    (4) statement -> . command NEWLINE
    (5) statement -> . command COMMA
    (33) elif -> . MEBBE expr NEWLINE statements
    (6) command -> . empty
    (7) command -> . expr
    (8) command -> . call
    (9) command -> . cast
    (10) command -> . decl
    (11) command -> . assign_bukkit
    (12) command -> . assign
    (13) command -> . declare_bukkit_block
    (14) command -> . if_else
    (15) command -> . bukkit_function
    (16) command -> . function
    (17) command -> . return
    (18) command -> . loop
    (19) command -> . export
    (20) command -> . import
    (102) empty -> .
    (40) expr -> . variable APOSTROPHE_Z variable
    (54) expr -> . I IZ ID YR sep_yr_args MKAY
    (55) expr -> . I IZ ID
    (56) expr -> . variable IZ ID YR sep_yr_args MKAY
    (57) expr -> . variable IZ ID
    (74) expr -> . SIZE OF expr
    (75) expr -> . ABSLUT OF expr
    (76) expr -> . value
    (77) expr -> . variable
    (78) expr -> . SUM OF expr AN expr
    (79) expr -> . DIFF OF expr AN expr
    (80) expr -> . PRODUKT OF expr AN expr
    (81) expr -> . QUOSHUNT OF expr AN expr
    (82) expr -> . MOD OF expr AN expr
    (83) expr -> . BIGGR OF expr AN expr
    (84) expr -> . SMALLR OF expr AN expr
    (85) expr -> . BOTH OF expr AN expr
    (86) expr -> . EITHER OF expr AN expr
    (87) expr -> . WON OF expr AN expr
    (88) expr -> . NOT expr
    (89) expr -> . ALL OF sep_args MKAY
    (90) expr -> . ANY OF sep_args MKAY
    (91) expr -> . ALL OF args MKAY
    (92) expr -> . ANY OF args MKAY
    (93) expr -> . BOTH SAEM expr AN expr
    (94) expr -> . DIFFRINT expr AN expr
    (95) expr -> . SMOOSH sep_args MKAY
    (96) expr -> . SMOOSH args MKAY
    (97) expr -> . MAEK expr A type
    (98) expr -> . MAEK expr type
    (71) call -> . VISIBLE args
    (72) call -> . VISIBLE args EXCLAMATION
    (73) call -> . GIMMEH variable
    (41) cast -> . variable IS NOW A type
    (42) cast -> . variable R MAEK variable A type
    (43) cast -> . variable R MAEK variable type
    (34) decl -> . I HAS A variable
    (35) decl -> . I HAS A variable ITZ expr
    (36) decl -> . I HAS A variable ITZ A type
    (38) assign_bukkit -> . variable HAS A variable ITZ expr
    (39) assign -> . variable R expr
    (37) declare_bukkit_block -> . O HAI IM variable NEWLINE statements KTHX
    (28) if_else -> . O RLY QUESTION NEWLINE YA RLY NEWLINE statements NO WAI NEWLINE statements OIC
    (29) if_else -> . O RLY QUESTION NEWLINE YA RLY NEWLINE statements OIC
    (30) if_else -> . O RLY QUESTION NEWLINE YA RLY NEWLINE statements elifs NO WAI NEWLINE statements OIC
    (50) bukkit_function -> . HOW IZ variable ID YR sep_yr_args NEWLINE statements IF U SAY SO
    (51) bukkit_function -> . HOW IZ variable ID NEWLINE statements IF U SAY SO
    (52) function -> . HOW IZ I ID YR sep_yr_args NEWLINE statements IF U SAY SO
    (53) function -> . HOW IZ I ID NEWLINE statements IF U SAY SO
    (58) return -> . FOUND YR expr
    (59) return -> . GTFO
    (21) loop -> . IM IN YR variable operation YR variable condition expr NEWLINE statements IM OUTTA YR variable
    (27) export -> . YOU CAN HAS sep_args MKAY
    (26) import -> . CAN HAS PATH QUESTION
    (99) variable -> . ID
    (100) variable -> . IT
    (65) value -> . STRING
    (66) value -> . FLOAT
    (67) value -> . INTEGER
    (68) value -> . WIN
    (69) value -> . FAIL
    (70) value -> . DICT

    NO              shift and go to state 245
    OIC             shift and go to state 246
    MEBBE           shift and go to state 249
    NEWLINE         reduce using rule 102 (empty -> .)
    COMMA           reduce using rule 102 (empty -> .)
    I               shift and go to state 26
    SIZE            shift and go to state 28
    ABSLUT          shift and go to state 29
    SUM             shift and go to state 31
    DIFF            shift and go to state 32
    PRODUKT         shift and go to state 33
    QUOSHUNT        shift and go to state 34
    MOD             shift and go to state 35
    BIGGR           shift and go to state 36
    SMALLR          shift and go to state 37
    BOTH            shift and go to state 38
    EITHER          shift and go to state 39
    WON             shift and go to state 40
    NOT             shift and go to state 41
    ALL             shift and go to state 42
    ANY             shift and go to state 43
    DIFFRINT        shift and go to state 44
    SMOOSH          shift and go to state 45
    MAEK            shift and go to state 46
    VISIBLE         shift and go to state 47
    GIMMEH          shift and go to state 48
    O               shift and go to state 49
    HOW             shift and go to state 51
    FOUND           shift and go to state 52
    GTFO            shift and go to state 53
    IM              shift and go to state 50
    YOU             shift and go to state 54
    CAN             shift and go to state 55
    ID              shift and go to state 27
    IT              shift and go to state 56
    STRING          shift and go to state 57
    FLOAT           shift and go to state 6
    INTEGER         shift and go to state 58
    WIN             shift and go to state 59
    FAIL            shift and go to state 60
    DICT            shift and go to state 61

    elifs                          shift and go to state 247
    statement                      shift and go to state 63
    elif                           shift and go to state 248
    command                        shift and go to state 9
    expr                           shift and go to state 11
    empty                          shift and go to state 10
    call                           shift and go to state 12
    cast                           shift and go to state 13
    decl                           shift and go to state 14
    assign_bukkit                  shift and go to state 15
    assign                         shift and go to state 16
    declare_bukkit_block           shift and go to state 17
    if_else                        shift and go to state 18
    bukkit_function                shift and go to state 19
    function                       shift and go to state 20
    return                         shift and go to state 21
    loop                           shift and go to state 22
    export                         shift and go to state 23
    import                         shift and go to state 24
    variable                       shift and go to state 25
    value                          shift and go to state 30

state 238

    (21) loop -> IM IN YR variable operation YR variable condition . expr NEWLINE statements IM OUTTA YR variable
    (40) expr -> . variable APOSTROPHE_Z variable
    (54) expr -> . I IZ ID YR sep_yr_args MKAY
    (55) expr -> . I IZ ID
    (56) expr -> . variable IZ ID YR sep_yr_args MKAY
    (57) expr -> . variable IZ ID
    (74) expr -> . SIZE OF expr
    (75) expr -> . ABSLUT OF expr
    (76) expr -> . value
    (77) expr -> . variable
    (78) expr -> . SUM OF expr AN expr
    (79) expr -> . DIFF OF expr AN expr
    (80) expr -> . PRODUKT OF expr AN expr
    (81) expr -> . QUOSHUNT OF expr AN expr
    (82) expr -> . MOD OF expr AN expr
    (83) expr -> . BIGGR OF expr AN expr
    (84) expr -> . SMALLR OF expr AN expr
    (85) expr -> . BOTH OF expr AN expr
    (86) expr -> . EITHER OF expr AN expr
    (87) expr -> . WON OF expr AN expr
    (88) expr -> . NOT expr
    (89) expr -> . ALL OF sep_args MKAY
    (90) expr -> . ANY OF sep_args MKAY
    (91) expr -> . ALL OF args MKAY
    (92) expr -> . ANY OF args MKAY
    (93) expr -> . BOTH SAEM expr AN expr
    (94) expr -> . DIFFRINT expr AN expr
    (95) expr -> . SMOOSH sep_args MKAY
    (96) expr -> . SMOOSH args MKAY
    (97) expr -> . MAEK expr A type
    (98) expr -> . MAEK expr type
    (99) variable -> . ID
    (100) variable -> . IT
    (65) value -> . STRING
    (66) value -> . FLOAT
    (67) value -> . INTEGER
    (68) value -> . WIN
    (69) value -> . FAIL
    (70) value -> . DICT

    I               shift and go to state 88
    SIZE            shift and go to state 28
    ABSLUT          shift and go to state 29
    SUM             shift and go to state 31
    DIFF            shift and go to state 32
    PRODUKT         shift and go to state 33
    QUOSHUNT        shift and go to state 34
    MOD             shift and go to state 35
    BIGGR           shift and go to state 36
    SMALLR          shift and go to state 37
    BOTH            shift and go to state 38
    EITHER          shift and go to state 39
    WON             shift and go to state 40
    NOT             shift and go to state 41
    ALL             shift and go to state 42
    ANY             shift and go to state 43
    DIFFRINT        shift and go to state 44
    SMOOSH          shift and go to state 45
    MAEK            shift and go to state 46
    ID              shift and go to state 27
    IT              shift and go to state 56
    STRING          shift and go to state 57
    FLOAT           shift and go to state 6
    INTEGER         shift and go to state 58
    WIN             shift and go to state 59
    FAIL            shift and go to state 60
    DICT            shift and go to state 61

    variable                       shift and go to state 87
    expr                           shift and go to state 250
    value                          shift and go to state 30

state 239

    (24) condition -> TIL .

    I               reduce using rule 24 (condition -> TIL .)
    SIZE            reduce using rule 24 (condition -> TIL .)
    ABSLUT          reduce using rule 24 (condition -> TIL .)
    SUM             reduce using rule 24 (condition -> TIL .)
    DIFF            reduce using rule 24 (condition -> TIL .)
    PRODUKT         reduce using rule 24 (condition -> TIL .)
    QUOSHUNT        reduce using rule 24 (condition -> TIL .)
    MOD             reduce using rule 24 (condition -> TIL .)
    BIGGR           reduce using rule 24 (condition -> TIL .)
    SMALLR          reduce using rule 24 (condition -> TIL .)
    BOTH            reduce using rule 24 (condition -> TIL .)
    EITHER          reduce using rule 24 (condition -> TIL .)
    WON             reduce using rule 24 (condition -> TIL .)
    NOT             reduce using rule 24 (condition -> TIL .)
    ALL             reduce using rule 24 (condition -> TIL .)
    ANY             reduce using rule 24 (condition -> TIL .)
    DIFFRINT        reduce using rule 24 (condition -> TIL .)
    SMOOSH          reduce using rule 24 (condition -> TIL .)
    MAEK            reduce using rule 24 (condition -> TIL .)
    ID              reduce using rule 24 (condition -> TIL .)
    IT              reduce using rule 24 (condition -> TIL .)
    STRING          reduce using rule 24 (condition -> TIL .)
    FLOAT           reduce using rule 24 (condition -> TIL .)
    INTEGER         reduce using rule 24 (condition -> TIL .)
    WIN             reduce using rule 24 (condition -> TIL .)
    FAIL            reduce using rule 24 (condition -> TIL .)
    DICT            reduce using rule 24 (condition -> TIL .)


state 240

    (25) condition -> WILE .

    I               reduce using rule 25 (condition -> WILE .)
    SIZE            reduce using rule 25 (condition -> WILE .)
    ABSLUT          reduce using rule 25 (condition -> WILE .)
    SUM             reduce using rule 25 (condition -> WILE .)
    DIFF            reduce using rule 25 (condition -> WILE .)
    PRODUKT         reduce using rule 25 (condition -> WILE .)
    QUOSHUNT        reduce using rule 25 (condition -> WILE .)
    MOD             reduce using rule 25 (condition -> WILE .)
    BIGGR           reduce using rule 25 (condition -> WILE .)
    SMALLR          reduce using rule 25 (condition -> WILE .)
    BOTH            reduce using rule 25 (condition -> WILE .)
    EITHER          reduce using rule 25 (condition -> WILE .)
    WON             reduce using rule 25 (condition -> WILE .)
    NOT             reduce using rule 25 (condition -> WILE .)
    ALL             reduce using rule 25 (condition -> WILE .)
    ANY             reduce using rule 25 (condition -> WILE .)
    DIFFRINT        reduce using rule 25 (condition -> WILE .)
    SMOOSH          reduce using rule 25 (condition -> WILE .)
    MAEK            reduce using rule 25 (condition -> WILE .)
    ID              reduce using rule 25 (condition -> WILE .)
    IT              reduce using rule 25 (condition -> WILE .)
    STRING          reduce using rule 25 (condition -> WILE .)
    FLOAT           reduce using rule 25 (condition -> WILE .)
    INTEGER         reduce using rule 25 (condition -> WILE .)
    WIN             reduce using rule 25 (condition -> WILE .)
    FAIL            reduce using rule 25 (condition -> WILE .)
    DICT            reduce using rule 25 (condition -> WILE .)


state 241

    (50) bukkit_function -> HOW IZ variable ID YR sep_yr_args NEWLINE statements . IF U SAY SO
    (2) statements -> statements . statement
    (4) statement -> . command NEWLINE
    (5) statement -> . command COMMA
    (6) command -> . empty
    (7) command -> . expr
    (8) command -> . call
    (9) command -> . cast
    (10) command -> . decl
    (11) command -> . assign_bukkit
    (12) command -> . assign
    (13) command -> . declare_bukkit_block
    (14) command -> . if_else
    (15) command -> . bukkit_function
    (16) command -> . function
    (17) command -> . return
    (18) command -> . loop
    (19) command -> . export
    (20) command -> . import
    (102) empty -> .
    (40) expr -> . variable APOSTROPHE_Z variable
    (54) expr -> . I IZ ID YR sep_yr_args MKAY
    (55) expr -> . I IZ ID
    (56) expr -> . variable IZ ID YR sep_yr_args MKAY
    (57) expr -> . variable IZ ID
    (74) expr -> . SIZE OF expr
    (75) expr -> . ABSLUT OF expr
    (76) expr -> . value
    (77) expr -> . variable
    (78) expr -> . SUM OF expr AN expr
    (79) expr -> . DIFF OF expr AN expr
    (80) expr -> . PRODUKT OF expr AN expr
    (81) expr -> . QUOSHUNT OF expr AN expr
    (82) expr -> . MOD OF expr AN expr
    (83) expr -> . BIGGR OF expr AN expr
    (84) expr -> . SMALLR OF expr AN expr
    (85) expr -> . BOTH OF expr AN expr
    (86) expr -> . EITHER OF expr AN expr
    (87) expr -> . WON OF expr AN expr
    (88) expr -> . NOT expr
    (89) expr -> . ALL OF sep_args MKAY
    (90) expr -> . ANY OF sep_args MKAY
    (91) expr -> . ALL OF args MKAY
    (92) expr -> . ANY OF args MKAY
    (93) expr -> . BOTH SAEM expr AN expr
    (94) expr -> . DIFFRINT expr AN expr
    (95) expr -> . SMOOSH sep_args MKAY
    (96) expr -> . SMOOSH args MKAY
    (97) expr -> . MAEK expr A type
    (98) expr -> . MAEK expr type
    (71) call -> . VISIBLE args
    (72) call -> . VISIBLE args EXCLAMATION
    (73) call -> . GIMMEH variable
    (41) cast -> . variable IS NOW A type
    (42) cast -> . variable R MAEK variable A type
    (43) cast -> . variable R MAEK variable type
    (34) decl -> . I HAS A variable
    (35) decl -> . I HAS A variable ITZ expr
    (36) decl -> . I HAS A variable ITZ A type
    (38) assign_bukkit -> . variable HAS A variable ITZ expr
    (39) assign -> . variable R expr
    (37) declare_bukkit_block -> . O HAI IM variable NEWLINE statements KTHX
    (28) if_else -> . O RLY QUESTION NEWLINE YA RLY NEWLINE statements NO WAI NEWLINE statements OIC
    (29) if_else -> . O RLY QUESTION NEWLINE YA RLY NEWLINE statements OIC
    (30) if_else -> . O RLY QUESTION NEWLINE YA RLY NEWLINE statements elifs NO WAI NEWLINE statements OIC
    (50) bukkit_function -> . HOW IZ variable ID YR sep_yr_args NEWLINE statements IF U SAY SO
    (51) bukkit_function -> . HOW IZ variable ID NEWLINE statements IF U SAY SO
    (52) function -> . HOW IZ I ID YR sep_yr_args NEWLINE statements IF U SAY SO
    (53) function -> . HOW IZ I ID NEWLINE statements IF U SAY SO
    (58) return -> . FOUND YR expr
    (59) return -> . GTFO
    (21) loop -> . IM IN YR variable operation YR variable condition expr NEWLINE statements IM OUTTA YR variable
    (27) export -> . YOU CAN HAS sep_args MKAY
    (26) import -> . CAN HAS PATH QUESTION
    (99) variable -> . ID
    (100) variable -> . IT
    (65) value -> . STRING
    (66) value -> . FLOAT
    (67) value -> . INTEGER
    (68) value -> . WIN
    (69) value -> . FAIL
    (70) value -> . DICT

    IF              shift and go to state 251
    NEWLINE         reduce using rule 102 (empty -> .)
    COMMA           reduce using rule 102 (empty -> .)
    I               shift and go to state 26
    SIZE            shift and go to state 28
    ABSLUT          shift and go to state 29
    SUM             shift and go to state 31
    DIFF            shift and go to state 32
    PRODUKT         shift and go to state 33
    QUOSHUNT        shift and go to state 34
    MOD             shift and go to state 35
    BIGGR           shift and go to state 36
    SMALLR          shift and go to state 37
    BOTH            shift and go to state 38
    EITHER          shift and go to state 39
    WON             shift and go to state 40
    NOT             shift and go to state 41
    ALL             shift and go to state 42
    ANY             shift and go to state 43
    DIFFRINT        shift and go to state 44
    SMOOSH          shift and go to state 45
    MAEK            shift and go to state 46
    VISIBLE         shift and go to state 47
    GIMMEH          shift and go to state 48
    O               shift and go to state 49
    HOW             shift and go to state 51
    FOUND           shift and go to state 52
    GTFO            shift and go to state 53
    IM              shift and go to state 50
    YOU             shift and go to state 54
    CAN             shift and go to state 55
    ID              shift and go to state 27
    IT              shift and go to state 56
    STRING          shift and go to state 57
    FLOAT           shift and go to state 6
    INTEGER         shift and go to state 58
    WIN             shift and go to state 59
    FAIL            shift and go to state 60
    DICT            shift and go to state 61

    variable                       shift and go to state 25
    statement                      shift and go to state 63
    command                        shift and go to state 9
    empty                          shift and go to state 10
    expr                           shift and go to state 11
    call                           shift and go to state 12
    cast                           shift and go to state 13
    decl                           shift and go to state 14
    assign_bukkit                  shift and go to state 15
    assign                         shift and go to state 16
    declare_bukkit_block           shift and go to state 17
    if_else                        shift and go to state 18
    bukkit_function                shift and go to state 19
    function                       shift and go to state 20
    return                         shift and go to state 21
    loop                           shift and go to state 22
    export                         shift and go to state 23
    import                         shift and go to state 24
    value                          shift and go to state 30

state 242

    (51) bukkit_function -> HOW IZ variable ID NEWLINE statements IF U . SAY SO

    SAY             shift and go to state 252


state 243

    (52) function -> HOW IZ I ID YR sep_yr_args NEWLINE statements . IF U SAY SO
    (2) statements -> statements . statement
    (4) statement -> . command NEWLINE
    (5) statement -> . command COMMA
    (6) command -> . empty
    (7) command -> . expr
    (8) command -> . call
    (9) command -> . cast
    (10) command -> . decl
    (11) command -> . assign_bukkit
    (12) command -> . assign
    (13) command -> . declare_bukkit_block
    (14) command -> . if_else
    (15) command -> . bukkit_function
    (16) command -> . function
    (17) command -> . return
    (18) command -> . loop
    (19) command -> . export
    (20) command -> . import
    (102) empty -> .
    (40) expr -> . variable APOSTROPHE_Z variable
    (54) expr -> . I IZ ID YR sep_yr_args MKAY
    (55) expr -> . I IZ ID
    (56) expr -> . variable IZ ID YR sep_yr_args MKAY
    (57) expr -> . variable IZ ID
    (74) expr -> . SIZE OF expr
    (75) expr -> . ABSLUT OF expr
    (76) expr -> . value
    (77) expr -> . variable
    (78) expr -> . SUM OF expr AN expr
    (79) expr -> . DIFF OF expr AN expr
    (80) expr -> . PRODUKT OF expr AN expr
    (81) expr -> . QUOSHUNT OF expr AN expr
    (82) expr -> . MOD OF expr AN expr
    (83) expr -> . BIGGR OF expr AN expr
    (84) expr -> . SMALLR OF expr AN expr
    (85) expr -> . BOTH OF expr AN expr
    (86) expr -> . EITHER OF expr AN expr
    (87) expr -> . WON OF expr AN expr
    (88) expr -> . NOT expr
    (89) expr -> . ALL OF sep_args MKAY
    (90) expr -> . ANY OF sep_args MKAY
    (91) expr -> . ALL OF args MKAY
    (92) expr -> . ANY OF args MKAY
    (93) expr -> . BOTH SAEM expr AN expr
    (94) expr -> . DIFFRINT expr AN expr
    (95) expr -> . SMOOSH sep_args MKAY
    (96) expr -> . SMOOSH args MKAY
    (97) expr -> . MAEK expr A type
    (98) expr -> . MAEK expr type
    (71) call -> . VISIBLE args
    (72) call -> . VISIBLE args EXCLAMATION
    (73) call -> . GIMMEH variable
    (41) cast -> . variable IS NOW A type
    (42) cast -> . variable R MAEK variable A type
    (43) cast -> . variable R MAEK variable type
    (34) decl -> . I HAS A variable
    (35) decl -> . I HAS A variable ITZ expr
    (36) decl -> . I HAS A variable ITZ A type
    (38) assign_bukkit -> . variable HAS A variable ITZ expr
    (39) assign -> . variable R expr
    (37) declare_bukkit_block -> . O HAI IM variable NEWLINE statements KTHX
    (28) if_else -> . O RLY QUESTION NEWLINE YA RLY NEWLINE statements NO WAI NEWLINE statements OIC
    (29) if_else -> . O RLY QUESTION NEWLINE YA RLY NEWLINE statements OIC
    (30) if_else -> . O RLY QUESTION NEWLINE YA RLY NEWLINE statements elifs NO WAI NEWLINE statements OIC
    (50) bukkit_function -> . HOW IZ variable ID YR sep_yr_args NEWLINE statements IF U SAY SO
    (51) bukkit_function -> . HOW IZ variable ID NEWLINE statements IF U SAY SO
    (52) function -> . HOW IZ I ID YR sep_yr_args NEWLINE statements IF U SAY SO
    (53) function -> . HOW IZ I ID NEWLINE statements IF U SAY SO
    (58) return -> . FOUND YR expr
    (59) return -> . GTFO
    (21) loop -> . IM IN YR variable operation YR variable condition expr NEWLINE statements IM OUTTA YR variable
    (27) export -> . YOU CAN HAS sep_args MKAY
    (26) import -> . CAN HAS PATH QUESTION
    (99) variable -> . ID
    (100) variable -> . IT
    (65) value -> . STRING
    (66) value -> . FLOAT
    (67) value -> . INTEGER
    (68) value -> . WIN
    (69) value -> . FAIL
    (70) value -> . DICT

    IF              shift and go to state 253
    NEWLINE         reduce using rule 102 (empty -> .)
    COMMA           reduce using rule 102 (empty -> .)
    I               shift and go to state 26
    SIZE            shift and go to state 28
    ABSLUT          shift and go to state 29
    SUM             shift and go to state 31
    DIFF            shift and go to state 32
    PRODUKT         shift and go to state 33
    QUOSHUNT        shift and go to state 34
    MOD             shift and go to state 35
    BIGGR           shift and go to state 36
    SMALLR          shift and go to state 37
    BOTH            shift and go to state 38
    EITHER          shift and go to state 39
    WON             shift and go to state 40
    NOT             shift and go to state 41
    ALL             shift and go to state 42
    ANY             shift and go to state 43
    DIFFRINT        shift and go to state 44
    SMOOSH          shift and go to state 45
    MAEK            shift and go to state 46
    VISIBLE         shift and go to state 47
    GIMMEH          shift and go to state 48
    O               shift and go to state 49
    HOW             shift and go to state 51
    FOUND           shift and go to state 52
    GTFO            shift and go to state 53
    IM              shift and go to state 50
    YOU             shift and go to state 54
    CAN             shift and go to state 55
    ID              shift and go to state 27
    IT              shift and go to state 56
    STRING          shift and go to state 57
    FLOAT           shift and go to state 6
    INTEGER         shift and go to state 58
    WIN             shift and go to state 59
    FAIL            shift and go to state 60
    DICT            shift and go to state 61

    statement                      shift and go to state 63
    command                        shift and go to state 9
    empty                          shift and go to state 10
    expr                           shift and go to state 11
    call                           shift and go to state 12
    cast                           shift and go to state 13
    decl                           shift and go to state 14
    assign_bukkit                  shift and go to state 15
    assign                         shift and go to state 16
    declare_bukkit_block           shift and go to state 17
    if_else                        shift and go to state 18
    bukkit_function                shift and go to state 19
    function                       shift and go to state 20
    return                         shift and go to state 21
    loop                           shift and go to state 22
    export                         shift and go to state 23
    import                         shift and go to state 24
    variable                       shift and go to state 25
    value                          shift and go to state 30

state 244

    (53) function -> HOW IZ I ID NEWLINE statements IF U . SAY SO

    SAY             shift and go to state 254


state 245

    (28) if_else -> O RLY QUESTION NEWLINE YA RLY NEWLINE statements NO . WAI NEWLINE statements OIC

    WAI             shift and go to state 255


state 246

    (29) if_else -> O RLY QUESTION NEWLINE YA RLY NEWLINE statements OIC .

    NEWLINE         reduce using rule 29 (if_else -> O RLY QUESTION NEWLINE YA RLY NEWLINE statements OIC .)
    COMMA           reduce using rule 29 (if_else -> O RLY QUESTION NEWLINE YA RLY NEWLINE statements OIC .)


state 247

    (30) if_else -> O RLY QUESTION NEWLINE YA RLY NEWLINE statements elifs . NO WAI NEWLINE statements OIC
    (31) elifs -> elifs . elif
    (33) elif -> . MEBBE expr NEWLINE statements

    NO              shift and go to state 256
    MEBBE           shift and go to state 249

    elif                           shift and go to state 257

state 248

    (32) elifs -> elif .

    NO              reduce using rule 32 (elifs -> elif .)
    MEBBE           reduce using rule 32 (elifs -> elif .)


state 249

    (33) elif -> MEBBE . expr NEWLINE statements
    (40) expr -> . variable APOSTROPHE_Z variable
    (54) expr -> . I IZ ID YR sep_yr_args MKAY
    (55) expr -> . I IZ ID
    (56) expr -> . variable IZ ID YR sep_yr_args MKAY
    (57) expr -> . variable IZ ID
    (74) expr -> . SIZE OF expr
    (75) expr -> . ABSLUT OF expr
    (76) expr -> . value
    (77) expr -> . variable
    (78) expr -> . SUM OF expr AN expr
    (79) expr -> . DIFF OF expr AN expr
    (80) expr -> . PRODUKT OF expr AN expr
    (81) expr -> . QUOSHUNT OF expr AN expr
    (82) expr -> . MOD OF expr AN expr
    (83) expr -> . BIGGR OF expr AN expr
    (84) expr -> . SMALLR OF expr AN expr
    (85) expr -> . BOTH OF expr AN expr
    (86) expr -> . EITHER OF expr AN expr
    (87) expr -> . WON OF expr AN expr
    (88) expr -> . NOT expr
    (89) expr -> . ALL OF sep_args MKAY
    (90) expr -> . ANY OF sep_args MKAY
    (91) expr -> . ALL OF args MKAY
    (92) expr -> . ANY OF args MKAY
    (93) expr -> . BOTH SAEM expr AN expr
    (94) expr -> . DIFFRINT expr AN expr
    (95) expr -> . SMOOSH sep_args MKAY
    (96) expr -> . SMOOSH args MKAY
    (97) expr -> . MAEK expr A type
    (98) expr -> . MAEK expr type
    (99) variable -> . ID
    (100) variable -> . IT
    (65) value -> . STRING
    (66) value -> . FLOAT
    (67) value -> . INTEGER
    (68) value -> . WIN
    (69) value -> . FAIL
    (70) value -> . DICT

    I               shift and go to state 88
    SIZE            shift and go to state 28
    ABSLUT          shift and go to state 29
    SUM             shift and go to state 31
    DIFF            shift and go to state 32
    PRODUKT         shift and go to state 33
    QUOSHUNT        shift and go to state 34
    MOD             shift and go to state 35
    BIGGR           shift and go to state 36
    SMALLR          shift and go to state 37
    BOTH            shift and go to state 38
    EITHER          shift and go to state 39
    WON             shift and go to state 40
    NOT             shift and go to state 41
    ALL             shift and go to state 42
    ANY             shift and go to state 43
    DIFFRINT        shift and go to state 44
    SMOOSH          shift and go to state 45
    MAEK            shift and go to state 46
    ID              shift and go to state 27
    IT              shift and go to state 56
    STRING          shift and go to state 57
    FLOAT           shift and go to state 6
    INTEGER         shift and go to state 58
    WIN             shift and go to state 59
    FAIL            shift and go to state 60
    DICT            shift and go to state 61

    expr                           shift and go to state 258
    variable                       shift and go to state 87
    value                          shift and go to state 30

state 250

    (21) loop -> IM IN YR variable operation YR variable condition expr . NEWLINE statements IM OUTTA YR variable

    NEWLINE         shift and go to state 259


state 251

    (50) bukkit_function -> HOW IZ variable ID YR sep_yr_args NEWLINE statements IF . U SAY SO

    U               shift and go to state 260


state 252

    (51) bukkit_function -> HOW IZ variable ID NEWLINE statements IF U SAY . SO

    SO              shift and go to state 261


state 253

    (52) function -> HOW IZ I ID YR sep_yr_args NEWLINE statements IF . U SAY SO

    U               shift and go to state 262


state 254

    (53) function -> HOW IZ I ID NEWLINE statements IF U SAY . SO

    SO              shift and go to state 263


state 255

    (28) if_else -> O RLY QUESTION NEWLINE YA RLY NEWLINE statements NO WAI . NEWLINE statements OIC

    NEWLINE         shift and go to state 264


state 256

    (30) if_else -> O RLY QUESTION NEWLINE YA RLY NEWLINE statements elifs NO . WAI NEWLINE statements OIC

    WAI             shift and go to state 265


state 257

    (31) elifs -> elifs elif .

    NO              reduce using rule 31 (elifs -> elifs elif .)
    MEBBE           reduce using rule 31 (elifs -> elifs elif .)


state 258

    (33) elif -> MEBBE expr . NEWLINE statements

    NEWLINE         shift and go to state 266


state 259

    (21) loop -> IM IN YR variable operation YR variable condition expr NEWLINE . statements IM OUTTA YR variable
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . command NEWLINE
    (5) statement -> . command COMMA
    (6) command -> . empty
    (7) command -> . expr
    (8) command -> . call
    (9) command -> . cast
    (10) command -> . decl
    (11) command -> . assign_bukkit
    (12) command -> . assign
    (13) command -> . declare_bukkit_block
    (14) command -> . if_else
    (15) command -> . bukkit_function
    (16) command -> . function
    (17) command -> . return
    (18) command -> . loop
    (19) command -> . export
    (20) command -> . import
    (102) empty -> .
    (40) expr -> . variable APOSTROPHE_Z variable
    (54) expr -> . I IZ ID YR sep_yr_args MKAY
    (55) expr -> . I IZ ID
    (56) expr -> . variable IZ ID YR sep_yr_args MKAY
    (57) expr -> . variable IZ ID
    (74) expr -> . SIZE OF expr
    (75) expr -> . ABSLUT OF expr
    (76) expr -> . value
    (77) expr -> . variable
    (78) expr -> . SUM OF expr AN expr
    (79) expr -> . DIFF OF expr AN expr
    (80) expr -> . PRODUKT OF expr AN expr
    (81) expr -> . QUOSHUNT OF expr AN expr
    (82) expr -> . MOD OF expr AN expr
    (83) expr -> . BIGGR OF expr AN expr
    (84) expr -> . SMALLR OF expr AN expr
    (85) expr -> . BOTH OF expr AN expr
    (86) expr -> . EITHER OF expr AN expr
    (87) expr -> . WON OF expr AN expr
    (88) expr -> . NOT expr
    (89) expr -> . ALL OF sep_args MKAY
    (90) expr -> . ANY OF sep_args MKAY
    (91) expr -> . ALL OF args MKAY
    (92) expr -> . ANY OF args MKAY
    (93) expr -> . BOTH SAEM expr AN expr
    (94) expr -> . DIFFRINT expr AN expr
    (95) expr -> . SMOOSH sep_args MKAY
    (96) expr -> . SMOOSH args MKAY
    (97) expr -> . MAEK expr A type
    (98) expr -> . MAEK expr type
    (71) call -> . VISIBLE args
    (72) call -> . VISIBLE args EXCLAMATION
    (73) call -> . GIMMEH variable
    (41) cast -> . variable IS NOW A type
    (42) cast -> . variable R MAEK variable A type
    (43) cast -> . variable R MAEK variable type
    (34) decl -> . I HAS A variable
    (35) decl -> . I HAS A variable ITZ expr
    (36) decl -> . I HAS A variable ITZ A type
    (38) assign_bukkit -> . variable HAS A variable ITZ expr
    (39) assign -> . variable R expr
    (37) declare_bukkit_block -> . O HAI IM variable NEWLINE statements KTHX
    (28) if_else -> . O RLY QUESTION NEWLINE YA RLY NEWLINE statements NO WAI NEWLINE statements OIC
    (29) if_else -> . O RLY QUESTION NEWLINE YA RLY NEWLINE statements OIC
    (30) if_else -> . O RLY QUESTION NEWLINE YA RLY NEWLINE statements elifs NO WAI NEWLINE statements OIC
    (50) bukkit_function -> . HOW IZ variable ID YR sep_yr_args NEWLINE statements IF U SAY SO
    (51) bukkit_function -> . HOW IZ variable ID NEWLINE statements IF U SAY SO
    (52) function -> . HOW IZ I ID YR sep_yr_args NEWLINE statements IF U SAY SO
    (53) function -> . HOW IZ I ID NEWLINE statements IF U SAY SO
    (58) return -> . FOUND YR expr
    (59) return -> . GTFO
    (21) loop -> . IM IN YR variable operation YR variable condition expr NEWLINE statements IM OUTTA YR variable
    (27) export -> . YOU CAN HAS sep_args MKAY
    (26) import -> . CAN HAS PATH QUESTION
    (99) variable -> . ID
    (100) variable -> . IT
    (65) value -> . STRING
    (66) value -> . FLOAT
    (67) value -> . INTEGER
    (68) value -> . WIN
    (69) value -> . FAIL
    (70) value -> . DICT

    NEWLINE         reduce using rule 102 (empty -> .)
    COMMA           reduce using rule 102 (empty -> .)
    I               shift and go to state 26
    SIZE            shift and go to state 28
    ABSLUT          shift and go to state 29
    SUM             shift and go to state 31
    DIFF            shift and go to state 32
    PRODUKT         shift and go to state 33
    QUOSHUNT        shift and go to state 34
    MOD             shift and go to state 35
    BIGGR           shift and go to state 36
    SMALLR          shift and go to state 37
    BOTH            shift and go to state 38
    EITHER          shift and go to state 39
    WON             shift and go to state 40
    NOT             shift and go to state 41
    ALL             shift and go to state 42
    ANY             shift and go to state 43
    DIFFRINT        shift and go to state 44
    SMOOSH          shift and go to state 45
    MAEK            shift and go to state 46
    VISIBLE         shift and go to state 47
    GIMMEH          shift and go to state 48
    O               shift and go to state 49
    HOW             shift and go to state 51
    FOUND           shift and go to state 52
    GTFO            shift and go to state 53
    IM              shift and go to state 50
    YOU             shift and go to state 54
    CAN             shift and go to state 55
    ID              shift and go to state 27
    IT              shift and go to state 56
    STRING          shift and go to state 57
    FLOAT           shift and go to state 6
    INTEGER         shift and go to state 58
    WIN             shift and go to state 59
    FAIL            shift and go to state 60
    DICT            shift and go to state 61

    variable                       shift and go to state 25
    expr                           shift and go to state 11
    statements                     shift and go to state 267
    statement                      shift and go to state 8
    command                        shift and go to state 9
    empty                          shift and go to state 10
    call                           shift and go to state 12
    cast                           shift and go to state 13
    decl                           shift and go to state 14
    assign_bukkit                  shift and go to state 15
    assign                         shift and go to state 16
    declare_bukkit_block           shift and go to state 17
    if_else                        shift and go to state 18
    bukkit_function                shift and go to state 19
    function                       shift and go to state 20
    return                         shift and go to state 21
    loop                           shift and go to state 22
    export                         shift and go to state 23
    import                         shift and go to state 24
    value                          shift and go to state 30

state 260

    (50) bukkit_function -> HOW IZ variable ID YR sep_yr_args NEWLINE statements IF U . SAY SO

    SAY             shift and go to state 268


state 261

    (51) bukkit_function -> HOW IZ variable ID NEWLINE statements IF U SAY SO .

    NEWLINE         reduce using rule 51 (bukkit_function -> HOW IZ variable ID NEWLINE statements IF U SAY SO .)
    COMMA           reduce using rule 51 (bukkit_function -> HOW IZ variable ID NEWLINE statements IF U SAY SO .)


state 262

    (52) function -> HOW IZ I ID YR sep_yr_args NEWLINE statements IF U . SAY SO

    SAY             shift and go to state 269


state 263

    (53) function -> HOW IZ I ID NEWLINE statements IF U SAY SO .

    NEWLINE         reduce using rule 53 (function -> HOW IZ I ID NEWLINE statements IF U SAY SO .)
    COMMA           reduce using rule 53 (function -> HOW IZ I ID NEWLINE statements IF U SAY SO .)


state 264

    (28) if_else -> O RLY QUESTION NEWLINE YA RLY NEWLINE statements NO WAI NEWLINE . statements OIC
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . command NEWLINE
    (5) statement -> . command COMMA
    (6) command -> . empty
    (7) command -> . expr
    (8) command -> . call
    (9) command -> . cast
    (10) command -> . decl
    (11) command -> . assign_bukkit
    (12) command -> . assign
    (13) command -> . declare_bukkit_block
    (14) command -> . if_else
    (15) command -> . bukkit_function
    (16) command -> . function
    (17) command -> . return
    (18) command -> . loop
    (19) command -> . export
    (20) command -> . import
    (102) empty -> .
    (40) expr -> . variable APOSTROPHE_Z variable
    (54) expr -> . I IZ ID YR sep_yr_args MKAY
    (55) expr -> . I IZ ID
    (56) expr -> . variable IZ ID YR sep_yr_args MKAY
    (57) expr -> . variable IZ ID
    (74) expr -> . SIZE OF expr
    (75) expr -> . ABSLUT OF expr
    (76) expr -> . value
    (77) expr -> . variable
    (78) expr -> . SUM OF expr AN expr
    (79) expr -> . DIFF OF expr AN expr
    (80) expr -> . PRODUKT OF expr AN expr
    (81) expr -> . QUOSHUNT OF expr AN expr
    (82) expr -> . MOD OF expr AN expr
    (83) expr -> . BIGGR OF expr AN expr
    (84) expr -> . SMALLR OF expr AN expr
    (85) expr -> . BOTH OF expr AN expr
    (86) expr -> . EITHER OF expr AN expr
    (87) expr -> . WON OF expr AN expr
    (88) expr -> . NOT expr
    (89) expr -> . ALL OF sep_args MKAY
    (90) expr -> . ANY OF sep_args MKAY
    (91) expr -> . ALL OF args MKAY
    (92) expr -> . ANY OF args MKAY
    (93) expr -> . BOTH SAEM expr AN expr
    (94) expr -> . DIFFRINT expr AN expr
    (95) expr -> . SMOOSH sep_args MKAY
    (96) expr -> . SMOOSH args MKAY
    (97) expr -> . MAEK expr A type
    (98) expr -> . MAEK expr type
    (71) call -> . VISIBLE args
    (72) call -> . VISIBLE args EXCLAMATION
    (73) call -> . GIMMEH variable
    (41) cast -> . variable IS NOW A type
    (42) cast -> . variable R MAEK variable A type
    (43) cast -> . variable R MAEK variable type
    (34) decl -> . I HAS A variable
    (35) decl -> . I HAS A variable ITZ expr
    (36) decl -> . I HAS A variable ITZ A type
    (38) assign_bukkit -> . variable HAS A variable ITZ expr
    (39) assign -> . variable R expr
    (37) declare_bukkit_block -> . O HAI IM variable NEWLINE statements KTHX
    (28) if_else -> . O RLY QUESTION NEWLINE YA RLY NEWLINE statements NO WAI NEWLINE statements OIC
    (29) if_else -> . O RLY QUESTION NEWLINE YA RLY NEWLINE statements OIC
    (30) if_else -> . O RLY QUESTION NEWLINE YA RLY NEWLINE statements elifs NO WAI NEWLINE statements OIC
    (50) bukkit_function -> . HOW IZ variable ID YR sep_yr_args NEWLINE statements IF U SAY SO
    (51) bukkit_function -> . HOW IZ variable ID NEWLINE statements IF U SAY SO
    (52) function -> . HOW IZ I ID YR sep_yr_args NEWLINE statements IF U SAY SO
    (53) function -> . HOW IZ I ID NEWLINE statements IF U SAY SO
    (58) return -> . FOUND YR expr
    (59) return -> . GTFO
    (21) loop -> . IM IN YR variable operation YR variable condition expr NEWLINE statements IM OUTTA YR variable
    (27) export -> . YOU CAN HAS sep_args MKAY
    (26) import -> . CAN HAS PATH QUESTION
    (99) variable -> . ID
    (100) variable -> . IT
    (65) value -> . STRING
    (66) value -> . FLOAT
    (67) value -> . INTEGER
    (68) value -> . WIN
    (69) value -> . FAIL
    (70) value -> . DICT

    NEWLINE         reduce using rule 102 (empty -> .)
    COMMA           reduce using rule 102 (empty -> .)
    I               shift and go to state 26
    SIZE            shift and go to state 28
    ABSLUT          shift and go to state 29
    SUM             shift and go to state 31
    DIFF            shift and go to state 32
    PRODUKT         shift and go to state 33
    QUOSHUNT        shift and go to state 34
    MOD             shift and go to state 35
    BIGGR           shift and go to state 36
    SMALLR          shift and go to state 37
    BOTH            shift and go to state 38
    EITHER          shift and go to state 39
    WON             shift and go to state 40
    NOT             shift and go to state 41
    ALL             shift and go to state 42
    ANY             shift and go to state 43
    DIFFRINT        shift and go to state 44
    SMOOSH          shift and go to state 45
    MAEK            shift and go to state 46
    VISIBLE         shift and go to state 47
    GIMMEH          shift and go to state 48
    O               shift and go to state 49
    HOW             shift and go to state 51
    FOUND           shift and go to state 52
    GTFO            shift and go to state 53
    IM              shift and go to state 50
    YOU             shift and go to state 54
    CAN             shift and go to state 55
    ID              shift and go to state 27
    IT              shift and go to state 56
    STRING          shift and go to state 57
    FLOAT           shift and go to state 6
    INTEGER         shift and go to state 58
    WIN             shift and go to state 59
    FAIL            shift and go to state 60
    DICT            shift and go to state 61

    statements                     shift and go to state 270
    statement                      shift and go to state 8
    command                        shift and go to state 9
    empty                          shift and go to state 10
    expr                           shift and go to state 11
    call                           shift and go to state 12
    cast                           shift and go to state 13
    decl                           shift and go to state 14
    assign_bukkit                  shift and go to state 15
    assign                         shift and go to state 16
    declare_bukkit_block           shift and go to state 17
    if_else                        shift and go to state 18
    bukkit_function                shift and go to state 19
    function                       shift and go to state 20
    return                         shift and go to state 21
    loop                           shift and go to state 22
    export                         shift and go to state 23
    import                         shift and go to state 24
    variable                       shift and go to state 25
    value                          shift and go to state 30

state 265

    (30) if_else -> O RLY QUESTION NEWLINE YA RLY NEWLINE statements elifs NO WAI . NEWLINE statements OIC

    NEWLINE         shift and go to state 271


state 266

    (33) elif -> MEBBE expr NEWLINE . statements
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . command NEWLINE
    (5) statement -> . command COMMA
    (6) command -> . empty
    (7) command -> . expr
    (8) command -> . call
    (9) command -> . cast
    (10) command -> . decl
    (11) command -> . assign_bukkit
    (12) command -> . assign
    (13) command -> . declare_bukkit_block
    (14) command -> . if_else
    (15) command -> . bukkit_function
    (16) command -> . function
    (17) command -> . return
    (18) command -> . loop
    (19) command -> . export
    (20) command -> . import
    (102) empty -> .
    (40) expr -> . variable APOSTROPHE_Z variable
    (54) expr -> . I IZ ID YR sep_yr_args MKAY
    (55) expr -> . I IZ ID
    (56) expr -> . variable IZ ID YR sep_yr_args MKAY
    (57) expr -> . variable IZ ID
    (74) expr -> . SIZE OF expr
    (75) expr -> . ABSLUT OF expr
    (76) expr -> . value
    (77) expr -> . variable
    (78) expr -> . SUM OF expr AN expr
    (79) expr -> . DIFF OF expr AN expr
    (80) expr -> . PRODUKT OF expr AN expr
    (81) expr -> . QUOSHUNT OF expr AN expr
    (82) expr -> . MOD OF expr AN expr
    (83) expr -> . BIGGR OF expr AN expr
    (84) expr -> . SMALLR OF expr AN expr
    (85) expr -> . BOTH OF expr AN expr
    (86) expr -> . EITHER OF expr AN expr
    (87) expr -> . WON OF expr AN expr
    (88) expr -> . NOT expr
    (89) expr -> . ALL OF sep_args MKAY
    (90) expr -> . ANY OF sep_args MKAY
    (91) expr -> . ALL OF args MKAY
    (92) expr -> . ANY OF args MKAY
    (93) expr -> . BOTH SAEM expr AN expr
    (94) expr -> . DIFFRINT expr AN expr
    (95) expr -> . SMOOSH sep_args MKAY
    (96) expr -> . SMOOSH args MKAY
    (97) expr -> . MAEK expr A type
    (98) expr -> . MAEK expr type
    (71) call -> . VISIBLE args
    (72) call -> . VISIBLE args EXCLAMATION
    (73) call -> . GIMMEH variable
    (41) cast -> . variable IS NOW A type
    (42) cast -> . variable R MAEK variable A type
    (43) cast -> . variable R MAEK variable type
    (34) decl -> . I HAS A variable
    (35) decl -> . I HAS A variable ITZ expr
    (36) decl -> . I HAS A variable ITZ A type
    (38) assign_bukkit -> . variable HAS A variable ITZ expr
    (39) assign -> . variable R expr
    (37) declare_bukkit_block -> . O HAI IM variable NEWLINE statements KTHX
    (28) if_else -> . O RLY QUESTION NEWLINE YA RLY NEWLINE statements NO WAI NEWLINE statements OIC
    (29) if_else -> . O RLY QUESTION NEWLINE YA RLY NEWLINE statements OIC
    (30) if_else -> . O RLY QUESTION NEWLINE YA RLY NEWLINE statements elifs NO WAI NEWLINE statements OIC
    (50) bukkit_function -> . HOW IZ variable ID YR sep_yr_args NEWLINE statements IF U SAY SO
    (51) bukkit_function -> . HOW IZ variable ID NEWLINE statements IF U SAY SO
    (52) function -> . HOW IZ I ID YR sep_yr_args NEWLINE statements IF U SAY SO
    (53) function -> . HOW IZ I ID NEWLINE statements IF U SAY SO
    (58) return -> . FOUND YR expr
    (59) return -> . GTFO
    (21) loop -> . IM IN YR variable operation YR variable condition expr NEWLINE statements IM OUTTA YR variable
    (27) export -> . YOU CAN HAS sep_args MKAY
    (26) import -> . CAN HAS PATH QUESTION
    (99) variable -> . ID
    (100) variable -> . IT
    (65) value -> . STRING
    (66) value -> . FLOAT
    (67) value -> . INTEGER
    (68) value -> . WIN
    (69) value -> . FAIL
    (70) value -> . DICT

    NEWLINE         reduce using rule 102 (empty -> .)
    COMMA           reduce using rule 102 (empty -> .)
    I               shift and go to state 26
    SIZE            shift and go to state 28
    ABSLUT          shift and go to state 29
    SUM             shift and go to state 31
    DIFF            shift and go to state 32
    PRODUKT         shift and go to state 33
    QUOSHUNT        shift and go to state 34
    MOD             shift and go to state 35
    BIGGR           shift and go to state 36
    SMALLR          shift and go to state 37
    BOTH            shift and go to state 38
    EITHER          shift and go to state 39
    WON             shift and go to state 40
    NOT             shift and go to state 41
    ALL             shift and go to state 42
    ANY             shift and go to state 43
    DIFFRINT        shift and go to state 44
    SMOOSH          shift and go to state 45
    MAEK            shift and go to state 46
    VISIBLE         shift and go to state 47
    GIMMEH          shift and go to state 48
    O               shift and go to state 49
    HOW             shift and go to state 51
    FOUND           shift and go to state 52
    GTFO            shift and go to state 53
    IM              shift and go to state 50
    YOU             shift and go to state 54
    CAN             shift and go to state 55
    ID              shift and go to state 27
    IT              shift and go to state 56
    STRING          shift and go to state 57
    FLOAT           shift and go to state 6
    INTEGER         shift and go to state 58
    WIN             shift and go to state 59
    FAIL            shift and go to state 60
    DICT            shift and go to state 61

    expr                           shift and go to state 11
    statements                     shift and go to state 272
    statement                      shift and go to state 8
    command                        shift and go to state 9
    empty                          shift and go to state 10
    call                           shift and go to state 12
    cast                           shift and go to state 13
    decl                           shift and go to state 14
    assign_bukkit                  shift and go to state 15
    assign                         shift and go to state 16
    declare_bukkit_block           shift and go to state 17
    if_else                        shift and go to state 18
    bukkit_function                shift and go to state 19
    function                       shift and go to state 20
    return                         shift and go to state 21
    loop                           shift and go to state 22
    export                         shift and go to state 23
    import                         shift and go to state 24
    variable                       shift and go to state 25
    value                          shift and go to state 30

state 267

    (21) loop -> IM IN YR variable operation YR variable condition expr NEWLINE statements . IM OUTTA YR variable
    (2) statements -> statements . statement
    (4) statement -> . command NEWLINE
    (5) statement -> . command COMMA
    (6) command -> . empty
    (7) command -> . expr
    (8) command -> . call
    (9) command -> . cast
    (10) command -> . decl
    (11) command -> . assign_bukkit
    (12) command -> . assign
    (13) command -> . declare_bukkit_block
    (14) command -> . if_else
    (15) command -> . bukkit_function
    (16) command -> . function
    (17) command -> . return
    (18) command -> . loop
    (19) command -> . export
    (20) command -> . import
    (102) empty -> .
    (40) expr -> . variable APOSTROPHE_Z variable
    (54) expr -> . I IZ ID YR sep_yr_args MKAY
    (55) expr -> . I IZ ID
    (56) expr -> . variable IZ ID YR sep_yr_args MKAY
    (57) expr -> . variable IZ ID
    (74) expr -> . SIZE OF expr
    (75) expr -> . ABSLUT OF expr
    (76) expr -> . value
    (77) expr -> . variable
    (78) expr -> . SUM OF expr AN expr
    (79) expr -> . DIFF OF expr AN expr
    (80) expr -> . PRODUKT OF expr AN expr
    (81) expr -> . QUOSHUNT OF expr AN expr
    (82) expr -> . MOD OF expr AN expr
    (83) expr -> . BIGGR OF expr AN expr
    (84) expr -> . SMALLR OF expr AN expr
    (85) expr -> . BOTH OF expr AN expr
    (86) expr -> . EITHER OF expr AN expr
    (87) expr -> . WON OF expr AN expr
    (88) expr -> . NOT expr
    (89) expr -> . ALL OF sep_args MKAY
    (90) expr -> . ANY OF sep_args MKAY
    (91) expr -> . ALL OF args MKAY
    (92) expr -> . ANY OF args MKAY
    (93) expr -> . BOTH SAEM expr AN expr
    (94) expr -> . DIFFRINT expr AN expr
    (95) expr -> . SMOOSH sep_args MKAY
    (96) expr -> . SMOOSH args MKAY
    (97) expr -> . MAEK expr A type
    (98) expr -> . MAEK expr type
    (71) call -> . VISIBLE args
    (72) call -> . VISIBLE args EXCLAMATION
    (73) call -> . GIMMEH variable
    (41) cast -> . variable IS NOW A type
    (42) cast -> . variable R MAEK variable A type
    (43) cast -> . variable R MAEK variable type
    (34) decl -> . I HAS A variable
    (35) decl -> . I HAS A variable ITZ expr
    (36) decl -> . I HAS A variable ITZ A type
    (38) assign_bukkit -> . variable HAS A variable ITZ expr
    (39) assign -> . variable R expr
    (37) declare_bukkit_block -> . O HAI IM variable NEWLINE statements KTHX
    (28) if_else -> . O RLY QUESTION NEWLINE YA RLY NEWLINE statements NO WAI NEWLINE statements OIC
    (29) if_else -> . O RLY QUESTION NEWLINE YA RLY NEWLINE statements OIC
    (30) if_else -> . O RLY QUESTION NEWLINE YA RLY NEWLINE statements elifs NO WAI NEWLINE statements OIC
    (50) bukkit_function -> . HOW IZ variable ID YR sep_yr_args NEWLINE statements IF U SAY SO
    (51) bukkit_function -> . HOW IZ variable ID NEWLINE statements IF U SAY SO
    (52) function -> . HOW IZ I ID YR sep_yr_args NEWLINE statements IF U SAY SO
    (53) function -> . HOW IZ I ID NEWLINE statements IF U SAY SO
    (58) return -> . FOUND YR expr
    (59) return -> . GTFO
    (21) loop -> . IM IN YR variable operation YR variable condition expr NEWLINE statements IM OUTTA YR variable
    (27) export -> . YOU CAN HAS sep_args MKAY
    (26) import -> . CAN HAS PATH QUESTION
    (99) variable -> . ID
    (100) variable -> . IT
    (65) value -> . STRING
    (66) value -> . FLOAT
    (67) value -> . INTEGER
    (68) value -> . WIN
    (69) value -> . FAIL
    (70) value -> . DICT

    IM              shift and go to state 273
    NEWLINE         reduce using rule 102 (empty -> .)
    COMMA           reduce using rule 102 (empty -> .)
    I               shift and go to state 26
    SIZE            shift and go to state 28
    ABSLUT          shift and go to state 29
    SUM             shift and go to state 31
    DIFF            shift and go to state 32
    PRODUKT         shift and go to state 33
    QUOSHUNT        shift and go to state 34
    MOD             shift and go to state 35
    BIGGR           shift and go to state 36
    SMALLR          shift and go to state 37
    BOTH            shift and go to state 38
    EITHER          shift and go to state 39
    WON             shift and go to state 40
    NOT             shift and go to state 41
    ALL             shift and go to state 42
    ANY             shift and go to state 43
    DIFFRINT        shift and go to state 44
    SMOOSH          shift and go to state 45
    MAEK            shift and go to state 46
    VISIBLE         shift and go to state 47
    GIMMEH          shift and go to state 48
    O               shift and go to state 49
    HOW             shift and go to state 51
    FOUND           shift and go to state 52
    GTFO            shift and go to state 53
    YOU             shift and go to state 54
    CAN             shift and go to state 55
    ID              shift and go to state 27
    IT              shift and go to state 56
    STRING          shift and go to state 57
    FLOAT           shift and go to state 6
    INTEGER         shift and go to state 58
    WIN             shift and go to state 59
    FAIL            shift and go to state 60
    DICT            shift and go to state 61

    variable                       shift and go to state 25
    expr                           shift and go to state 11
    statement                      shift and go to state 63
    command                        shift and go to state 9
    empty                          shift and go to state 10
    call                           shift and go to state 12
    cast                           shift and go to state 13
    decl                           shift and go to state 14
    assign_bukkit                  shift and go to state 15
    assign                         shift and go to state 16
    declare_bukkit_block           shift and go to state 17
    if_else                        shift and go to state 18
    bukkit_function                shift and go to state 19
    function                       shift and go to state 20
    return                         shift and go to state 21
    loop                           shift and go to state 22
    export                         shift and go to state 23
    import                         shift and go to state 24
    value                          shift and go to state 30

state 268

    (50) bukkit_function -> HOW IZ variable ID YR sep_yr_args NEWLINE statements IF U SAY . SO

    SO              shift and go to state 274


state 269

    (52) function -> HOW IZ I ID YR sep_yr_args NEWLINE statements IF U SAY . SO

    SO              shift and go to state 275


state 270

    (28) if_else -> O RLY QUESTION NEWLINE YA RLY NEWLINE statements NO WAI NEWLINE statements . OIC
    (2) statements -> statements . statement
    (4) statement -> . command NEWLINE
    (5) statement -> . command COMMA
    (6) command -> . empty
    (7) command -> . expr
    (8) command -> . call
    (9) command -> . cast
    (10) command -> . decl
    (11) command -> . assign_bukkit
    (12) command -> . assign
    (13) command -> . declare_bukkit_block
    (14) command -> . if_else
    (15) command -> . bukkit_function
    (16) command -> . function
    (17) command -> . return
    (18) command -> . loop
    (19) command -> . export
    (20) command -> . import
    (102) empty -> .
    (40) expr -> . variable APOSTROPHE_Z variable
    (54) expr -> . I IZ ID YR sep_yr_args MKAY
    (55) expr -> . I IZ ID
    (56) expr -> . variable IZ ID YR sep_yr_args MKAY
    (57) expr -> . variable IZ ID
    (74) expr -> . SIZE OF expr
    (75) expr -> . ABSLUT OF expr
    (76) expr -> . value
    (77) expr -> . variable
    (78) expr -> . SUM OF expr AN expr
    (79) expr -> . DIFF OF expr AN expr
    (80) expr -> . PRODUKT OF expr AN expr
    (81) expr -> . QUOSHUNT OF expr AN expr
    (82) expr -> . MOD OF expr AN expr
    (83) expr -> . BIGGR OF expr AN expr
    (84) expr -> . SMALLR OF expr AN expr
    (85) expr -> . BOTH OF expr AN expr
    (86) expr -> . EITHER OF expr AN expr
    (87) expr -> . WON OF expr AN expr
    (88) expr -> . NOT expr
    (89) expr -> . ALL OF sep_args MKAY
    (90) expr -> . ANY OF sep_args MKAY
    (91) expr -> . ALL OF args MKAY
    (92) expr -> . ANY OF args MKAY
    (93) expr -> . BOTH SAEM expr AN expr
    (94) expr -> . DIFFRINT expr AN expr
    (95) expr -> . SMOOSH sep_args MKAY
    (96) expr -> . SMOOSH args MKAY
    (97) expr -> . MAEK expr A type
    (98) expr -> . MAEK expr type
    (71) call -> . VISIBLE args
    (72) call -> . VISIBLE args EXCLAMATION
    (73) call -> . GIMMEH variable
    (41) cast -> . variable IS NOW A type
    (42) cast -> . variable R MAEK variable A type
    (43) cast -> . variable R MAEK variable type
    (34) decl -> . I HAS A variable
    (35) decl -> . I HAS A variable ITZ expr
    (36) decl -> . I HAS A variable ITZ A type
    (38) assign_bukkit -> . variable HAS A variable ITZ expr
    (39) assign -> . variable R expr
    (37) declare_bukkit_block -> . O HAI IM variable NEWLINE statements KTHX
    (28) if_else -> . O RLY QUESTION NEWLINE YA RLY NEWLINE statements NO WAI NEWLINE statements OIC
    (29) if_else -> . O RLY QUESTION NEWLINE YA RLY NEWLINE statements OIC
    (30) if_else -> . O RLY QUESTION NEWLINE YA RLY NEWLINE statements elifs NO WAI NEWLINE statements OIC
    (50) bukkit_function -> . HOW IZ variable ID YR sep_yr_args NEWLINE statements IF U SAY SO
    (51) bukkit_function -> . HOW IZ variable ID NEWLINE statements IF U SAY SO
    (52) function -> . HOW IZ I ID YR sep_yr_args NEWLINE statements IF U SAY SO
    (53) function -> . HOW IZ I ID NEWLINE statements IF U SAY SO
    (58) return -> . FOUND YR expr
    (59) return -> . GTFO
    (21) loop -> . IM IN YR variable operation YR variable condition expr NEWLINE statements IM OUTTA YR variable
    (27) export -> . YOU CAN HAS sep_args MKAY
    (26) import -> . CAN HAS PATH QUESTION
    (99) variable -> . ID
    (100) variable -> . IT
    (65) value -> . STRING
    (66) value -> . FLOAT
    (67) value -> . INTEGER
    (68) value -> . WIN
    (69) value -> . FAIL
    (70) value -> . DICT

    OIC             shift and go to state 276
    NEWLINE         reduce using rule 102 (empty -> .)
    COMMA           reduce using rule 102 (empty -> .)
    I               shift and go to state 26
    SIZE            shift and go to state 28
    ABSLUT          shift and go to state 29
    SUM             shift and go to state 31
    DIFF            shift and go to state 32
    PRODUKT         shift and go to state 33
    QUOSHUNT        shift and go to state 34
    MOD             shift and go to state 35
    BIGGR           shift and go to state 36
    SMALLR          shift and go to state 37
    BOTH            shift and go to state 38
    EITHER          shift and go to state 39
    WON             shift and go to state 40
    NOT             shift and go to state 41
    ALL             shift and go to state 42
    ANY             shift and go to state 43
    DIFFRINT        shift and go to state 44
    SMOOSH          shift and go to state 45
    MAEK            shift and go to state 46
    VISIBLE         shift and go to state 47
    GIMMEH          shift and go to state 48
    O               shift and go to state 49
    HOW             shift and go to state 51
    FOUND           shift and go to state 52
    GTFO            shift and go to state 53
    IM              shift and go to state 50
    YOU             shift and go to state 54
    CAN             shift and go to state 55
    ID              shift and go to state 27
    IT              shift and go to state 56
    STRING          shift and go to state 57
    FLOAT           shift and go to state 6
    INTEGER         shift and go to state 58
    WIN             shift and go to state 59
    FAIL            shift and go to state 60
    DICT            shift and go to state 61

    statement                      shift and go to state 63
    command                        shift and go to state 9
    empty                          shift and go to state 10
    expr                           shift and go to state 11
    call                           shift and go to state 12
    cast                           shift and go to state 13
    decl                           shift and go to state 14
    assign_bukkit                  shift and go to state 15
    assign                         shift and go to state 16
    declare_bukkit_block           shift and go to state 17
    if_else                        shift and go to state 18
    bukkit_function                shift and go to state 19
    function                       shift and go to state 20
    return                         shift and go to state 21
    loop                           shift and go to state 22
    export                         shift and go to state 23
    import                         shift and go to state 24
    variable                       shift and go to state 25
    value                          shift and go to state 30

state 271

    (30) if_else -> O RLY QUESTION NEWLINE YA RLY NEWLINE statements elifs NO WAI NEWLINE . statements OIC
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . command NEWLINE
    (5) statement -> . command COMMA
    (6) command -> . empty
    (7) command -> . expr
    (8) command -> . call
    (9) command -> . cast
    (10) command -> . decl
    (11) command -> . assign_bukkit
    (12) command -> . assign
    (13) command -> . declare_bukkit_block
    (14) command -> . if_else
    (15) command -> . bukkit_function
    (16) command -> . function
    (17) command -> . return
    (18) command -> . loop
    (19) command -> . export
    (20) command -> . import
    (102) empty -> .
    (40) expr -> . variable APOSTROPHE_Z variable
    (54) expr -> . I IZ ID YR sep_yr_args MKAY
    (55) expr -> . I IZ ID
    (56) expr -> . variable IZ ID YR sep_yr_args MKAY
    (57) expr -> . variable IZ ID
    (74) expr -> . SIZE OF expr
    (75) expr -> . ABSLUT OF expr
    (76) expr -> . value
    (77) expr -> . variable
    (78) expr -> . SUM OF expr AN expr
    (79) expr -> . DIFF OF expr AN expr
    (80) expr -> . PRODUKT OF expr AN expr
    (81) expr -> . QUOSHUNT OF expr AN expr
    (82) expr -> . MOD OF expr AN expr
    (83) expr -> . BIGGR OF expr AN expr
    (84) expr -> . SMALLR OF expr AN expr
    (85) expr -> . BOTH OF expr AN expr
    (86) expr -> . EITHER OF expr AN expr
    (87) expr -> . WON OF expr AN expr
    (88) expr -> . NOT expr
    (89) expr -> . ALL OF sep_args MKAY
    (90) expr -> . ANY OF sep_args MKAY
    (91) expr -> . ALL OF args MKAY
    (92) expr -> . ANY OF args MKAY
    (93) expr -> . BOTH SAEM expr AN expr
    (94) expr -> . DIFFRINT expr AN expr
    (95) expr -> . SMOOSH sep_args MKAY
    (96) expr -> . SMOOSH args MKAY
    (97) expr -> . MAEK expr A type
    (98) expr -> . MAEK expr type
    (71) call -> . VISIBLE args
    (72) call -> . VISIBLE args EXCLAMATION
    (73) call -> . GIMMEH variable
    (41) cast -> . variable IS NOW A type
    (42) cast -> . variable R MAEK variable A type
    (43) cast -> . variable R MAEK variable type
    (34) decl -> . I HAS A variable
    (35) decl -> . I HAS A variable ITZ expr
    (36) decl -> . I HAS A variable ITZ A type
    (38) assign_bukkit -> . variable HAS A variable ITZ expr
    (39) assign -> . variable R expr
    (37) declare_bukkit_block -> . O HAI IM variable NEWLINE statements KTHX
    (28) if_else -> . O RLY QUESTION NEWLINE YA RLY NEWLINE statements NO WAI NEWLINE statements OIC
    (29) if_else -> . O RLY QUESTION NEWLINE YA RLY NEWLINE statements OIC
    (30) if_else -> . O RLY QUESTION NEWLINE YA RLY NEWLINE statements elifs NO WAI NEWLINE statements OIC
    (50) bukkit_function -> . HOW IZ variable ID YR sep_yr_args NEWLINE statements IF U SAY SO
    (51) bukkit_function -> . HOW IZ variable ID NEWLINE statements IF U SAY SO
    (52) function -> . HOW IZ I ID YR sep_yr_args NEWLINE statements IF U SAY SO
    (53) function -> . HOW IZ I ID NEWLINE statements IF U SAY SO
    (58) return -> . FOUND YR expr
    (59) return -> . GTFO
    (21) loop -> . IM IN YR variable operation YR variable condition expr NEWLINE statements IM OUTTA YR variable
    (27) export -> . YOU CAN HAS sep_args MKAY
    (26) import -> . CAN HAS PATH QUESTION
    (99) variable -> . ID
    (100) variable -> . IT
    (65) value -> . STRING
    (66) value -> . FLOAT
    (67) value -> . INTEGER
    (68) value -> . WIN
    (69) value -> . FAIL
    (70) value -> . DICT

    NEWLINE         reduce using rule 102 (empty -> .)
    COMMA           reduce using rule 102 (empty -> .)
    I               shift and go to state 26
    SIZE            shift and go to state 28
    ABSLUT          shift and go to state 29
    SUM             shift and go to state 31
    DIFF            shift and go to state 32
    PRODUKT         shift and go to state 33
    QUOSHUNT        shift and go to state 34
    MOD             shift and go to state 35
    BIGGR           shift and go to state 36
    SMALLR          shift and go to state 37
    BOTH            shift and go to state 38
    EITHER          shift and go to state 39
    WON             shift and go to state 40
    NOT             shift and go to state 41
    ALL             shift and go to state 42
    ANY             shift and go to state 43
    DIFFRINT        shift and go to state 44
    SMOOSH          shift and go to state 45
    MAEK            shift and go to state 46
    VISIBLE         shift and go to state 47
    GIMMEH          shift and go to state 48
    O               shift and go to state 49
    HOW             shift and go to state 51
    FOUND           shift and go to state 52
    GTFO            shift and go to state 53
    IM              shift and go to state 50
    YOU             shift and go to state 54
    CAN             shift and go to state 55
    ID              shift and go to state 27
    IT              shift and go to state 56
    STRING          shift and go to state 57
    FLOAT           shift and go to state 6
    INTEGER         shift and go to state 58
    WIN             shift and go to state 59
    FAIL            shift and go to state 60
    DICT            shift and go to state 61

    statements                     shift and go to state 277
    statement                      shift and go to state 8
    command                        shift and go to state 9
    empty                          shift and go to state 10
    expr                           shift and go to state 11
    call                           shift and go to state 12
    cast                           shift and go to state 13
    decl                           shift and go to state 14
    assign_bukkit                  shift and go to state 15
    assign                         shift and go to state 16
    declare_bukkit_block           shift and go to state 17
    if_else                        shift and go to state 18
    bukkit_function                shift and go to state 19
    function                       shift and go to state 20
    return                         shift and go to state 21
    loop                           shift and go to state 22
    export                         shift and go to state 23
    import                         shift and go to state 24
    variable                       shift and go to state 25
    value                          shift and go to state 30

state 272

    (33) elif -> MEBBE expr NEWLINE statements .
    (2) statements -> statements . statement
    (4) statement -> . command NEWLINE
    (5) statement -> . command COMMA
    (6) command -> . empty
    (7) command -> . expr
    (8) command -> . call
    (9) command -> . cast
    (10) command -> . decl
    (11) command -> . assign_bukkit
    (12) command -> . assign
    (13) command -> . declare_bukkit_block
    (14) command -> . if_else
    (15) command -> . bukkit_function
    (16) command -> . function
    (17) command -> . return
    (18) command -> . loop
    (19) command -> . export
    (20) command -> . import
    (102) empty -> .
    (40) expr -> . variable APOSTROPHE_Z variable
    (54) expr -> . I IZ ID YR sep_yr_args MKAY
    (55) expr -> . I IZ ID
    (56) expr -> . variable IZ ID YR sep_yr_args MKAY
    (57) expr -> . variable IZ ID
    (74) expr -> . SIZE OF expr
    (75) expr -> . ABSLUT OF expr
    (76) expr -> . value
    (77) expr -> . variable
    (78) expr -> . SUM OF expr AN expr
    (79) expr -> . DIFF OF expr AN expr
    (80) expr -> . PRODUKT OF expr AN expr
    (81) expr -> . QUOSHUNT OF expr AN expr
    (82) expr -> . MOD OF expr AN expr
    (83) expr -> . BIGGR OF expr AN expr
    (84) expr -> . SMALLR OF expr AN expr
    (85) expr -> . BOTH OF expr AN expr
    (86) expr -> . EITHER OF expr AN expr
    (87) expr -> . WON OF expr AN expr
    (88) expr -> . NOT expr
    (89) expr -> . ALL OF sep_args MKAY
    (90) expr -> . ANY OF sep_args MKAY
    (91) expr -> . ALL OF args MKAY
    (92) expr -> . ANY OF args MKAY
    (93) expr -> . BOTH SAEM expr AN expr
    (94) expr -> . DIFFRINT expr AN expr
    (95) expr -> . SMOOSH sep_args MKAY
    (96) expr -> . SMOOSH args MKAY
    (97) expr -> . MAEK expr A type
    (98) expr -> . MAEK expr type
    (71) call -> . VISIBLE args
    (72) call -> . VISIBLE args EXCLAMATION
    (73) call -> . GIMMEH variable
    (41) cast -> . variable IS NOW A type
    (42) cast -> . variable R MAEK variable A type
    (43) cast -> . variable R MAEK variable type
    (34) decl -> . I HAS A variable
    (35) decl -> . I HAS A variable ITZ expr
    (36) decl -> . I HAS A variable ITZ A type
    (38) assign_bukkit -> . variable HAS A variable ITZ expr
    (39) assign -> . variable R expr
    (37) declare_bukkit_block -> . O HAI IM variable NEWLINE statements KTHX
    (28) if_else -> . O RLY QUESTION NEWLINE YA RLY NEWLINE statements NO WAI NEWLINE statements OIC
    (29) if_else -> . O RLY QUESTION NEWLINE YA RLY NEWLINE statements OIC
    (30) if_else -> . O RLY QUESTION NEWLINE YA RLY NEWLINE statements elifs NO WAI NEWLINE statements OIC
    (50) bukkit_function -> . HOW IZ variable ID YR sep_yr_args NEWLINE statements IF U SAY SO
    (51) bukkit_function -> . HOW IZ variable ID NEWLINE statements IF U SAY SO
    (52) function -> . HOW IZ I ID YR sep_yr_args NEWLINE statements IF U SAY SO
    (53) function -> . HOW IZ I ID NEWLINE statements IF U SAY SO
    (58) return -> . FOUND YR expr
    (59) return -> . GTFO
    (21) loop -> . IM IN YR variable operation YR variable condition expr NEWLINE statements IM OUTTA YR variable
    (27) export -> . YOU CAN HAS sep_args MKAY
    (26) import -> . CAN HAS PATH QUESTION
    (99) variable -> . ID
    (100) variable -> . IT
    (65) value -> . STRING
    (66) value -> . FLOAT
    (67) value -> . INTEGER
    (68) value -> . WIN
    (69) value -> . FAIL
    (70) value -> . DICT

    NO              reduce using rule 33 (elif -> MEBBE expr NEWLINE statements .)
    MEBBE           reduce using rule 33 (elif -> MEBBE expr NEWLINE statements .)
    NEWLINE         reduce using rule 102 (empty -> .)
    COMMA           reduce using rule 102 (empty -> .)
    I               shift and go to state 26
    SIZE            shift and go to state 28
    ABSLUT          shift and go to state 29
    SUM             shift and go to state 31
    DIFF            shift and go to state 32
    PRODUKT         shift and go to state 33
    QUOSHUNT        shift and go to state 34
    MOD             shift and go to state 35
    BIGGR           shift and go to state 36
    SMALLR          shift and go to state 37
    BOTH            shift and go to state 38
    EITHER          shift and go to state 39
    WON             shift and go to state 40
    NOT             shift and go to state 41
    ALL             shift and go to state 42
    ANY             shift and go to state 43
    DIFFRINT        shift and go to state 44
    SMOOSH          shift and go to state 45
    MAEK            shift and go to state 46
    VISIBLE         shift and go to state 47
    GIMMEH          shift and go to state 48
    O               shift and go to state 49
    HOW             shift and go to state 51
    FOUND           shift and go to state 52
    GTFO            shift and go to state 53
    IM              shift and go to state 50
    YOU             shift and go to state 54
    CAN             shift and go to state 55
    ID              shift and go to state 27
    IT              shift and go to state 56
    STRING          shift and go to state 57
    FLOAT           shift and go to state 6
    INTEGER         shift and go to state 58
    WIN             shift and go to state 59
    FAIL            shift and go to state 60
    DICT            shift and go to state 61

    expr                           shift and go to state 11
    statement                      shift and go to state 63
    command                        shift and go to state 9
    empty                          shift and go to state 10
    call                           shift and go to state 12
    cast                           shift and go to state 13
    decl                           shift and go to state 14
    assign_bukkit                  shift and go to state 15
    assign                         shift and go to state 16
    declare_bukkit_block           shift and go to state 17
    if_else                        shift and go to state 18
    bukkit_function                shift and go to state 19
    function                       shift and go to state 20
    return                         shift and go to state 21
    loop                           shift and go to state 22
    export                         shift and go to state 23
    import                         shift and go to state 24
    variable                       shift and go to state 25
    value                          shift and go to state 30

state 273

    (21) loop -> IM IN YR variable operation YR variable condition expr NEWLINE statements IM . OUTTA YR variable
    (21) loop -> IM . IN YR variable operation YR variable condition expr NEWLINE statements IM OUTTA YR variable

    OUTTA           shift and go to state 278
    IN              shift and go to state 101


state 274

    (50) bukkit_function -> HOW IZ variable ID YR sep_yr_args NEWLINE statements IF U SAY SO .

    NEWLINE         reduce using rule 50 (bukkit_function -> HOW IZ variable ID YR sep_yr_args NEWLINE statements IF U SAY SO .)
    COMMA           reduce using rule 50 (bukkit_function -> HOW IZ variable ID YR sep_yr_args NEWLINE statements IF U SAY SO .)


state 275

    (52) function -> HOW IZ I ID YR sep_yr_args NEWLINE statements IF U SAY SO .

    NEWLINE         reduce using rule 52 (function -> HOW IZ I ID YR sep_yr_args NEWLINE statements IF U SAY SO .)
    COMMA           reduce using rule 52 (function -> HOW IZ I ID YR sep_yr_args NEWLINE statements IF U SAY SO .)


state 276

    (28) if_else -> O RLY QUESTION NEWLINE YA RLY NEWLINE statements NO WAI NEWLINE statements OIC .

    NEWLINE         reduce using rule 28 (if_else -> O RLY QUESTION NEWLINE YA RLY NEWLINE statements NO WAI NEWLINE statements OIC .)
    COMMA           reduce using rule 28 (if_else -> O RLY QUESTION NEWLINE YA RLY NEWLINE statements NO WAI NEWLINE statements OIC .)


state 277

    (30) if_else -> O RLY QUESTION NEWLINE YA RLY NEWLINE statements elifs NO WAI NEWLINE statements . OIC
    (2) statements -> statements . statement
    (4) statement -> . command NEWLINE
    (5) statement -> . command COMMA
    (6) command -> . empty
    (7) command -> . expr
    (8) command -> . call
    (9) command -> . cast
    (10) command -> . decl
    (11) command -> . assign_bukkit
    (12) command -> . assign
    (13) command -> . declare_bukkit_block
    (14) command -> . if_else
    (15) command -> . bukkit_function
    (16) command -> . function
    (17) command -> . return
    (18) command -> . loop
    (19) command -> . export
    (20) command -> . import
    (102) empty -> .
    (40) expr -> . variable APOSTROPHE_Z variable
    (54) expr -> . I IZ ID YR sep_yr_args MKAY
    (55) expr -> . I IZ ID
    (56) expr -> . variable IZ ID YR sep_yr_args MKAY
    (57) expr -> . variable IZ ID
    (74) expr -> . SIZE OF expr
    (75) expr -> . ABSLUT OF expr
    (76) expr -> . value
    (77) expr -> . variable
    (78) expr -> . SUM OF expr AN expr
    (79) expr -> . DIFF OF expr AN expr
    (80) expr -> . PRODUKT OF expr AN expr
    (81) expr -> . QUOSHUNT OF expr AN expr
    (82) expr -> . MOD OF expr AN expr
    (83) expr -> . BIGGR OF expr AN expr
    (84) expr -> . SMALLR OF expr AN expr
    (85) expr -> . BOTH OF expr AN expr
    (86) expr -> . EITHER OF expr AN expr
    (87) expr -> . WON OF expr AN expr
    (88) expr -> . NOT expr
    (89) expr -> . ALL OF sep_args MKAY
    (90) expr -> . ANY OF sep_args MKAY
    (91) expr -> . ALL OF args MKAY
    (92) expr -> . ANY OF args MKAY
    (93) expr -> . BOTH SAEM expr AN expr
    (94) expr -> . DIFFRINT expr AN expr
    (95) expr -> . SMOOSH sep_args MKAY
    (96) expr -> . SMOOSH args MKAY
    (97) expr -> . MAEK expr A type
    (98) expr -> . MAEK expr type
    (71) call -> . VISIBLE args
    (72) call -> . VISIBLE args EXCLAMATION
    (73) call -> . GIMMEH variable
    (41) cast -> . variable IS NOW A type
    (42) cast -> . variable R MAEK variable A type
    (43) cast -> . variable R MAEK variable type
    (34) decl -> . I HAS A variable
    (35) decl -> . I HAS A variable ITZ expr
    (36) decl -> . I HAS A variable ITZ A type
    (38) assign_bukkit -> . variable HAS A variable ITZ expr
    (39) assign -> . variable R expr
    (37) declare_bukkit_block -> . O HAI IM variable NEWLINE statements KTHX
    (28) if_else -> . O RLY QUESTION NEWLINE YA RLY NEWLINE statements NO WAI NEWLINE statements OIC
    (29) if_else -> . O RLY QUESTION NEWLINE YA RLY NEWLINE statements OIC
    (30) if_else -> . O RLY QUESTION NEWLINE YA RLY NEWLINE statements elifs NO WAI NEWLINE statements OIC
    (50) bukkit_function -> . HOW IZ variable ID YR sep_yr_args NEWLINE statements IF U SAY SO
    (51) bukkit_function -> . HOW IZ variable ID NEWLINE statements IF U SAY SO
    (52) function -> . HOW IZ I ID YR sep_yr_args NEWLINE statements IF U SAY SO
    (53) function -> . HOW IZ I ID NEWLINE statements IF U SAY SO
    (58) return -> . FOUND YR expr
    (59) return -> . GTFO
    (21) loop -> . IM IN YR variable operation YR variable condition expr NEWLINE statements IM OUTTA YR variable
    (27) export -> . YOU CAN HAS sep_args MKAY
    (26) import -> . CAN HAS PATH QUESTION
    (99) variable -> . ID
    (100) variable -> . IT
    (65) value -> . STRING
    (66) value -> . FLOAT
    (67) value -> . INTEGER
    (68) value -> . WIN
    (69) value -> . FAIL
    (70) value -> . DICT

    OIC             shift and go to state 279
    NEWLINE         reduce using rule 102 (empty -> .)
    COMMA           reduce using rule 102 (empty -> .)
    I               shift and go to state 26
    SIZE            shift and go to state 28
    ABSLUT          shift and go to state 29
    SUM             shift and go to state 31
    DIFF            shift and go to state 32
    PRODUKT         shift and go to state 33
    QUOSHUNT        shift and go to state 34
    MOD             shift and go to state 35
    BIGGR           shift and go to state 36
    SMALLR          shift and go to state 37
    BOTH            shift and go to state 38
    EITHER          shift and go to state 39
    WON             shift and go to state 40
    NOT             shift and go to state 41
    ALL             shift and go to state 42
    ANY             shift and go to state 43
    DIFFRINT        shift and go to state 44
    SMOOSH          shift and go to state 45
    MAEK            shift and go to state 46
    VISIBLE         shift and go to state 47
    GIMMEH          shift and go to state 48
    O               shift and go to state 49
    HOW             shift and go to state 51
    FOUND           shift and go to state 52
    GTFO            shift and go to state 53
    IM              shift and go to state 50
    YOU             shift and go to state 54
    CAN             shift and go to state 55
    ID              shift and go to state 27
    IT              shift and go to state 56
    STRING          shift and go to state 57
    FLOAT           shift and go to state 6
    INTEGER         shift and go to state 58
    WIN             shift and go to state 59
    FAIL            shift and go to state 60
    DICT            shift and go to state 61

    statement                      shift and go to state 63
    command                        shift and go to state 9
    empty                          shift and go to state 10
    expr                           shift and go to state 11
    call                           shift and go to state 12
    cast                           shift and go to state 13
    decl                           shift and go to state 14
    assign_bukkit                  shift and go to state 15
    assign                         shift and go to state 16
    declare_bukkit_block           shift and go to state 17
    if_else                        shift and go to state 18
    bukkit_function                shift and go to state 19
    function                       shift and go to state 20
    return                         shift and go to state 21
    loop                           shift and go to state 22
    export                         shift and go to state 23
    import                         shift and go to state 24
    variable                       shift and go to state 25
    value                          shift and go to state 30

state 278

    (21) loop -> IM IN YR variable operation YR variable condition expr NEWLINE statements IM OUTTA . YR variable

    YR              shift and go to state 280


state 279

    (30) if_else -> O RLY QUESTION NEWLINE YA RLY NEWLINE statements elifs NO WAI NEWLINE statements OIC .

    NEWLINE         reduce using rule 30 (if_else -> O RLY QUESTION NEWLINE YA RLY NEWLINE statements elifs NO WAI NEWLINE statements OIC .)
    COMMA           reduce using rule 30 (if_else -> O RLY QUESTION NEWLINE YA RLY NEWLINE statements elifs NO WAI NEWLINE statements OIC .)


state 280

    (21) loop -> IM IN YR variable operation YR variable condition expr NEWLINE statements IM OUTTA YR . variable
    (99) variable -> . ID
    (100) variable -> . IT

    ID              shift and go to state 27
    IT              shift and go to state 56

    variable                       shift and go to state 281

state 281

    (21) loop -> IM IN YR variable operation YR variable condition expr NEWLINE statements IM OUTTA YR variable .

    NEWLINE         reduce using rule 21 (loop -> IM IN YR variable operation YR variable condition expr NEWLINE statements IM OUTTA YR variable .)
    COMMA           reduce using rule 21 (loop -> IM IN YR variable operation YR variable condition expr NEWLINE statements IM OUTTA YR variable .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for A in state 154 resolved as shift
WARNING: shift/reduce conflict for YARN in state 154 resolved as shift
WARNING: shift/reduce conflict for NUMBR in state 154 resolved as shift
WARNING: shift/reduce conflict for NUMBAR in state 154 resolved as shift
WARNING: shift/reduce conflict for NOOB in state 154 resolved as shift
WARNING: shift/reduce conflict for BUKKIT in state 154 resolved as shift
WARNING: reduce/reduce conflict in state 94 resolved using rule (args -> expr)
WARNING: rejected rule (sep_args -> expr) in state 94
