{"socket": {"vars": {"__doc__": "A subclass of _socket.socket adding the makefile() method.", "__module__": "socket"}, "funcs": {"__delattr__": {"parameters": 2}, "__dir__": {"parameters": 1}, "__enter__": {"parameters": 1}, "__eq__": {"parameters": 2}, "__exit__": {"parameters": 2}, "__format__": {"parameters": 2}, "__ge__": {"parameters": 2}, "__getattribute__": {"parameters": 2}, "__getstate__": {"parameters": 1}, "__gt__": {"parameters": 2}, "__hash__": {"parameters": 1}, "__init__": {"parameters": 5}, "__le__": {"parameters": 2}, "__lt__": {"parameters": 2}, "__ne__": {"parameters": 2}, "__new__": {"parameters": 2}, "__reduce__": {"parameters": 1}, "__reduce_ex__": {"parameters": 2}, "__repr__": {"parameters": 1}, "__setattr__": {"parameters": 3}, "__sizeof__": {"parameters": 1}, "__str__": {"parameters": 1}, "_check_sendfile_params": {"parameters": 4}, "_decref_socketios": {"parameters": 1}, "_real_close": {"parameters": 2}, "_sendfile_use_send": {"parameters": 4}, "_sendfile_use_sendfile": {"parameters": 4}, "accept": {"parameters": 1}, "close": {"parameters": 1}, "detach": {"parameters": 1}, "dup": {"parameters": 1}, "get_inheritable": {"parameters": 1}, "makefile": {"parameters": 6}, "sendfile": {"parameters": 4}, "set_inheritable": {"parameters": 2}}}, "AddressFamily": {"vars": {"AF_ALG": 38, "AF_APPLETALK": 5, "AF_ASH": 18, "AF_ATMPVC": 8, "AF_ATMSVC": 20, "AF_AX25": 3, "AF_BRIDGE": 7, "AF_CAN": 29, "AF_ECONET": 19, "AF_INET": 2, "AF_INET6": 10, "AF_IPX": 4, "AF_IRDA": 23, "AF_KEY": 15, "AF_LLC": 26, "AF_NETBEUI": 13, "AF_NETLINK": 16, "AF_NETROM": 6, "AF_PACKET": 17, "AF_PPPOX": 24, "AF_QIPCRTR": 42, "AF_RDS": 21, "AF_ROSE": 11, "AF_SECURITY": 14, "AF_SNA": 22, "AF_TIPC": 30, "AF_UNIX": 1, "AF_UNSPEC": 0, "AF_VSOCK": 40, "AF_WANPIPE": 25, "AF_X25": 9, "__doc__": "An enumeration.", "__module__": "socket"}, "funcs": {}}, "AddressInfo": {"vars": {"AI_ADDRCONFIG": 32, "AI_ALL": 16, "AI_CANONNAME": 2, "AI_NUMERICHOST": 4, "AI_NUMERICSERV": 1024, "AI_PASSIVE": 1, "AI_V4MAPPED": 8, "__doc__": "An enumeration.", "__module__": "socket"}, "funcs": {}}, "IntEnum": {"vars": {"__doc__": "Enum where members are also (and must be) ints", "__module__": "enum"}, "funcs": {}}, "IntFlag": {"vars": {"__doc__": "\n    Support for integer-based Flags\n    ", "__module__": "enum"}, "funcs": {}}, "MsgFlag": {"vars": {"MSG_CMSG_CLOEXEC": 1073741824, "MSG_CONFIRM": 2048, "MSG_CTRUNC": 8, "MSG_DONTROUTE": 4, "MSG_DONTWAIT": 64, "MSG_EOR": 128, "MSG_ERRQUEUE": 8192, "MSG_FASTOPEN": 536870912, "MSG_MORE": 32768, "MSG_NOSIGNAL": 16384, "MSG_OOB": 1, "MSG_PEEK": 2, "MSG_TRUNC": 32, "MSG_WAITALL": 256, "__doc__": "An enumeration.", "__module__": "socket"}, "funcs": {}}, "SocketIO": {"vars": {"__doc__": "Raw I/O implementation for stream sockets.\n\n    This class supports the makefile() method on sockets.  It provides\n    the raw I/O interface on top of a socket object.\n    ", "__module__": "socket"}, "funcs": {"__delattr__": {"parameters": 2}, "__dir__": {"parameters": 1}, "__eq__": {"parameters": 2}, "__format__": {"parameters": 2}, "__ge__": {"parameters": 2}, "__getattribute__": {"parameters": 2}, "__gt__": {"parameters": 2}, "__hash__": {"parameters": 1}, "__init__": {"parameters": 3}, "__iter__": {"parameters": 1}, "__le__": {"parameters": 2}, "__lt__": {"parameters": 2}, "__ne__": {"parameters": 2}, "__new__": {"parameters": 2}, "__next__": {"parameters": 1}, "__reduce__": {"parameters": 1}, "__reduce_ex__": {"parameters": 2}, "__repr__": {"parameters": 1}, "__setattr__": {"parameters": 3}, "__sizeof__": {"parameters": 1}, "__str__": {"parameters": 1}, "close": {"parameters": 1}, "fileno": {"parameters": 1}, "flush": {"parameters": 1}, "isatty": {"parameters": 1}, "read": {"parameters": 2}, "readable": {"parameters": 1}, "readall": {"parameters": 1}, "readinto": {"parameters": 2}, "readline": {"parameters": 2}, "readlines": {"parameters": 2}, "seekable": {"parameters": 1}, "tell": {"parameters": 1}, "writable": {"parameters": 1}, "write": {"parameters": 2}, "writelines": {"parameters": 2}}}, "SocketKind": {"vars": {"SOCK_CLOEXEC": 524288, "SOCK_DGRAM": 2, "SOCK_NONBLOCK": 2048, "SOCK_RAW": 3, "SOCK_RDM": 4, "SOCK_SEQPACKET": 5, "SOCK_STREAM": 1, "__doc__": "An enumeration.", "__module__": "socket"}, "funcs": {}}, "SocketType": {"vars": {"__doc__": "socket(family=AF_INET, type=SOCK_STREAM, proto=0) -> socket object\nsocket(family=-1, type=-1, proto=-1, fileno=None) -> socket object\n\nOpen a socket of the given type.  The family argument specifies the\naddress family; it defaults to AF_INET.  The type argument specifies\nwhether this is a stream (SOCK_STREAM, this is the default)\nor datagram (SOCK_DGRAM) socket.  The protocol argument defaults to 0,\nspecifying the default protocol.  Keyword arguments are accepted.\nThe socket is created as non-inheritable.\n\nWhen a fileno is passed in, family, type and proto are auto-detected,\nunless they are explicitly set.\n\nA socket object represents one endpoint of a network connection.\n\nMethods of socket objects (keyword arguments not allowed):\n\n_accept() -- accept connection, returning new socket fd and client address\nbind(addr) -- bind the socket to a local address\nclose() -- close the socket\nconnect(addr) -- connect the socket to a remote address\nconnect_ex(addr) -- connect, return an error code instead of an exception\ndup() -- return a new socket fd duplicated from fileno()\nfileno() -- return underlying file descriptor\ngetpeername() -- return remote address [*]\ngetsockname() -- return local address\ngetsockopt(level, optname[, buflen]) -- get socket options\ngettimeout() -- return timeout or None\nlisten([n]) -- start listening for incoming connections\nrecv(buflen[, flags]) -- receive data\nrecv_into(buffer[, nbytes[, flags]]) -- receive data (into a buffer)\nrecvfrom(buflen[, flags]) -- receive data and sender's address\nrecvfrom_into(buffer[, nbytes, [, flags])\n  -- receive data and sender's address (into a buffer)\nsendall(data[, flags]) -- send all data\nsend(data[, flags]) -- send data, may not send all of it\nsendto(data[, flags], addr) -- send data to a given address\nsetblocking(0 | 1) -- set or clear the blocking I/O flag\ngetblocking() -- return True if socket is blocking, False if non-blocking\nsetsockopt(level, optname, value[, optlen]) -- set socket options\nsettimeout(None | float) -- set or clear the timeout\nshutdown(how) -- shut down traffic in one or both directions\nif_nameindex() -- return all network interface indices and names\nif_nametoindex(name) -- return the corresponding interface index\nif_indextoname(index) -- return the corresponding interface name\n\n [*] not available on all platforms!"}, "funcs": {"__delattr__": {"parameters": 2}, "__dir__": {"parameters": 1}, "__eq__": {"parameters": 2}, "__format__": {"parameters": 2}, "__ge__": {"parameters": 2}, "__getattribute__": {"parameters": 2}, "__gt__": {"parameters": 2}, "__hash__": {"parameters": 1}, "__init__": {"parameters": 3}, "__le__": {"parameters": 2}, "__lt__": {"parameters": 2}, "__ne__": {"parameters": 2}, "__new__": {"parameters": 2}, "__reduce__": {"parameters": 1}, "__reduce_ex__": {"parameters": 2}, "__repr__": {"parameters": 1}, "__setattr__": {"parameters": 3}, "__sizeof__": {"parameters": 1}, "__str__": {"parameters": 1}}}, "_GiveupOnSendfile": {"vars": {"__module__": "socket"}, "funcs": {"__delattr__": {"parameters": 2}, "__dir__": {"parameters": 1}, "__eq__": {"parameters": 2}, "__format__": {"parameters": 2}, "__ge__": {"parameters": 2}, "__getattribute__": {"parameters": 2}, "__gt__": {"parameters": 2}, "__hash__": {"parameters": 1}, "__init__": {"parameters": 3}, "__le__": {"parameters": 2}, "__lt__": {"parameters": 2}, "__ne__": {"parameters": 2}, "__new__": {"parameters": 2}, "__reduce_ex__": {"parameters": 2}, "__repr__": {"parameters": 1}, "__setattr__": {"parameters": 3}, "__sizeof__": {"parameters": 1}, "__str__": {"parameters": 1}}}, "_realsocket": {"vars": {"__doc__": "socket(family=AF_INET, type=SOCK_STREAM, proto=0) -> socket object\nsocket(family=-1, type=-1, proto=-1, fileno=None) -> socket object\n\nOpen a socket of the given type.  The family argument specifies the\naddress family; it defaults to AF_INET.  The type argument specifies\nwhether this is a stream (SOCK_STREAM, this is the default)\nor datagram (SOCK_DGRAM) socket.  The protocol argument defaults to 0,\nspecifying the default protocol.  Keyword arguments are accepted.\nThe socket is created as non-inheritable.\n\nWhen a fileno is passed in, family, type and proto are auto-detected,\nunless they are explicitly set.\n\nA socket object represents one endpoint of a network connection.\n\nMethods of socket objects (keyword arguments not allowed):\n\n_accept() -- accept connection, returning new socket fd and client address\nbind(addr) -- bind the socket to a local address\nclose() -- close the socket\nconnect(addr) -- connect the socket to a remote address\nconnect_ex(addr) -- connect, return an error code instead of an exception\ndup() -- return a new socket fd duplicated from fileno()\nfileno() -- return underlying file descriptor\ngetpeername() -- return remote address [*]\ngetsockname() -- return local address\ngetsockopt(level, optname[, buflen]) -- get socket options\ngettimeout() -- return timeout or None\nlisten([n]) -- start listening for incoming connections\nrecv(buflen[, flags]) -- receive data\nrecv_into(buffer[, nbytes[, flags]]) -- receive data (into a buffer)\nrecvfrom(buflen[, flags]) -- receive data and sender's address\nrecvfrom_into(buffer[, nbytes, [, flags])\n  -- receive data and sender's address (into a buffer)\nsendall(data[, flags]) -- send all data\nsend(data[, flags]) -- send data, may not send all of it\nsendto(data[, flags], addr) -- send data to a given address\nsetblocking(0 | 1) -- set or clear the blocking I/O flag\ngetblocking() -- return True if socket is blocking, False if non-blocking\nsetsockopt(level, optname, value[, optlen]) -- set socket options\nsettimeout(None | float) -- set or clear the timeout\nshutdown(how) -- shut down traffic in one or both directions\nif_nameindex() -- return all network interface indices and names\nif_nametoindex(name) -- return the corresponding interface index\nif_indextoname(index) -- return the corresponding interface name\n\n [*] not available on all platforms!"}, "funcs": {"__delattr__": {"parameters": 2}, "__dir__": {"parameters": 1}, "__eq__": {"parameters": 2}, "__format__": {"parameters": 2}, "__ge__": {"parameters": 2}, "__getattribute__": {"parameters": 2}, "__gt__": {"parameters": 2}, "__hash__": {"parameters": 1}, "__init__": {"parameters": 3}, "__le__": {"parameters": 2}, "__lt__": {"parameters": 2}, "__ne__": {"parameters": 2}, "__new__": {"parameters": 2}, "__reduce__": {"parameters": 1}, "__reduce_ex__": {"parameters": 2}, "__repr__": {"parameters": 1}, "__setattr__": {"parameters": 3}, "__sizeof__": {"parameters": 1}, "__str__": {"parameters": 1}}}, "error": {"vars": {"__doc__": "Base class for I/O related errors."}, "funcs": {"__delattr__": {"parameters": 2}, "__dir__": {"parameters": 1}, "__eq__": {"parameters": 2}, "__format__": {"parameters": 2}, "__ge__": {"parameters": 2}, "__getattribute__": {"parameters": 2}, "__gt__": {"parameters": 2}, "__hash__": {"parameters": 1}, "__init__": {"parameters": 3}, "__le__": {"parameters": 2}, "__lt__": {"parameters": 2}, "__ne__": {"parameters": 2}, "__new__": {"parameters": 2}, "__reduce_ex__": {"parameters": 2}, "__repr__": {"parameters": 1}, "__setattr__": {"parameters": 3}, "__sizeof__": {"parameters": 1}, "__str__": {"parameters": 1}}}, "gaierror": {"vars": {"__module__": "socket"}, "funcs": {"__delattr__": {"parameters": 2}, "__dir__": {"parameters": 1}, "__eq__": {"parameters": 2}, "__format__": {"parameters": 2}, "__ge__": {"parameters": 2}, "__getattribute__": {"parameters": 2}, "__gt__": {"parameters": 2}, "__hash__": {"parameters": 1}, "__init__": {"parameters": 3}, "__le__": {"parameters": 2}, "__lt__": {"parameters": 2}, "__ne__": {"parameters": 2}, "__new__": {"parameters": 2}, "__reduce_ex__": {"parameters": 2}, "__repr__": {"parameters": 1}, "__setattr__": {"parameters": 3}, "__sizeof__": {"parameters": 1}, "__str__": {"parameters": 1}}}, "herror": {"vars": {"__module__": "socket"}, "funcs": {"__delattr__": {"parameters": 2}, "__dir__": {"parameters": 1}, "__eq__": {"parameters": 2}, "__format__": {"parameters": 2}, "__ge__": {"parameters": 2}, "__getattribute__": {"parameters": 2}, "__gt__": {"parameters": 2}, "__hash__": {"parameters": 1}, "__init__": {"parameters": 3}, "__le__": {"parameters": 2}, "__lt__": {"parameters": 2}, "__ne__": {"parameters": 2}, "__new__": {"parameters": 2}, "__reduce_ex__": {"parameters": 2}, "__repr__": {"parameters": 1}, "__setattr__": {"parameters": 3}, "__sizeof__": {"parameters": 1}, "__str__": {"parameters": 1}}}, "timeout": {"vars": {"__module__": "socket"}, "funcs": {"__delattr__": {"parameters": 2}, "__dir__": {"parameters": 1}, "__eq__": {"parameters": 2}, "__format__": {"parameters": 2}, "__ge__": {"parameters": 2}, "__getattribute__": {"parameters": 2}, "__gt__": {"parameters": 2}, "__hash__": {"parameters": 1}, "__init__": {"parameters": 3}, "__le__": {"parameters": 2}, "__lt__": {"parameters": 2}, "__ne__": {"parameters": 2}, "__new__": {"parameters": 2}, "__reduce_ex__": {"parameters": 2}, "__repr__": {"parameters": 1}, "__setattr__": {"parameters": 3}, "__sizeof__": {"parameters": 1}, "__str__": {"parameters": 1}}}}