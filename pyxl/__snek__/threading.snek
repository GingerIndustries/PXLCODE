{"threading": {"vars": {"TIMEOUT_MAX": 9223372036.0, "_HAVE_THREAD_NATIVE_ID": true, "__cached__": "/nix/store/wlhmpa2qk786ddp05ahv3jjlds6d44a5-python3-3.8.12/lib/python3.8/__pycache__/threading.cpython-38.pyc", "__doc__": "Thread module emulating a subset of Java's threading model.", "__file__": "/nix/store/wlhmpa2qk786ddp05ahv3jjlds6d44a5-python3-3.8.12/lib/python3.8/threading.py", "__name__": "threading", "__package__": ""}, "funcs": {"RLock": {"parameters": 2}, "_after_fork": {"parameters": 0}, "_enumerate": {"parameters": 0}, "_make_invoke_excepthook": {"parameters": 0}, "_newname": {"parameters": 1}, "_shutdown": {"parameters": 0}, "activeCount": {"parameters": 0}, "active_count": {"parameters": 0}, "currentThread": {"parameters": 0}, "current_thread": {"parameters": 0}, "enumerate": {"parameters": 0}, "main_thread": {"parameters": 0}, "setprofile": {"parameters": 1}, "settrace": {"parameters": 1}}}, "Barrier": {"vars": {"__doc__": "Implements a Barrier.\n\n    Useful for synchronizing a fixed number of threads at known synchronization\n    points.  Threads block on 'wait()' and are simultaneously awoken once they\n    have all made that call.\n\n    ", "__module__": "threading"}, "funcs": {"__delattr__": {"parameters": 2}, "__dir__": {"parameters": 1}, "__eq__": {"parameters": 2}, "__format__": {"parameters": 2}, "__ge__": {"parameters": 2}, "__getattribute__": {"parameters": 2}, "__gt__": {"parameters": 2}, "__hash__": {"parameters": 1}, "__init__": {"parameters": 4}, "__le__": {"parameters": 2}, "__lt__": {"parameters": 2}, "__ne__": {"parameters": 2}, "__new__": {"parameters": 2}, "__reduce__": {"parameters": 1}, "__reduce_ex__": {"parameters": 2}, "__repr__": {"parameters": 1}, "__setattr__": {"parameters": 3}, "__sizeof__": {"parameters": 1}, "__str__": {"parameters": 1}, "_break": {"parameters": 1}, "_enter": {"parameters": 1}, "_exit": {"parameters": 1}, "_release": {"parameters": 1}, "_wait": {"parameters": 2}, "abort": {"parameters": 1}, "reset": {"parameters": 1}, "wait": {"parameters": 2}}}, "BoundedSemaphore": {"vars": {"__doc__": "Implements a bounded semaphore.\n\n    A bounded semaphore checks to make sure its current value doesn't exceed its\n    initial value. If it does, ValueError is raised. In most situations\n    semaphores are used to guard resources with limited capacity.\n\n    If the semaphore is released too many times it's a sign of a bug. If not\n    given, value defaults to 1.\n\n    Like regular semaphores, bounded semaphores manage a counter representing\n    the number of release() calls minus the number of acquire() calls, plus an\n    initial value. The acquire() method blocks if necessary until it can return\n    without making the counter negative. If not given, value defaults to 1.\n\n    ", "__module__": "threading"}, "funcs": {"__delattr__": {"parameters": 2}, "__dir__": {"parameters": 1}, "__enter__": {"parameters": 3}, "__eq__": {"parameters": 2}, "__exit__": {"parameters": 4}, "__format__": {"parameters": 2}, "__ge__": {"parameters": 2}, "__getattribute__": {"parameters": 2}, "__gt__": {"parameters": 2}, "__hash__": {"parameters": 1}, "__init__": {"parameters": 2}, "__le__": {"parameters": 2}, "__lt__": {"parameters": 2}, "__ne__": {"parameters": 2}, "__new__": {"parameters": 2}, "__reduce__": {"parameters": 1}, "__reduce_ex__": {"parameters": 2}, "__repr__": {"parameters": 1}, "__setattr__": {"parameters": 3}, "__sizeof__": {"parameters": 1}, "__str__": {"parameters": 1}, "acquire": {"parameters": 3}, "release": {"parameters": 1}}}, "BrokenBarrierError": {"vars": {"__module__": "threading"}, "funcs": {"__delattr__": {"parameters": 2}, "__dir__": {"parameters": 1}, "__eq__": {"parameters": 2}, "__format__": {"parameters": 2}, "__ge__": {"parameters": 2}, "__getattribute__": {"parameters": 2}, "__gt__": {"parameters": 2}, "__hash__": {"parameters": 1}, "__init__": {"parameters": 3}, "__le__": {"parameters": 2}, "__lt__": {"parameters": 2}, "__ne__": {"parameters": 2}, "__new__": {"parameters": 2}, "__reduce_ex__": {"parameters": 2}, "__repr__": {"parameters": 1}, "__setattr__": {"parameters": 3}, "__sizeof__": {"parameters": 1}, "__str__": {"parameters": 1}}}, "Condition": {"vars": {"__doc__": "Class that implements a condition variable.\n\n    A condition variable allows one or more threads to wait until they are\n    notified by another thread.\n\n    If the lock argument is given and not None, it must be a Lock or RLock\n    object, and it is used as the underlying lock. Otherwise, a new RLock object\n    is created and used as the underlying lock.\n\n    ", "__module__": "threading"}, "funcs": {"__delattr__": {"parameters": 2}, "__dir__": {"parameters": 1}, "__enter__": {"parameters": 1}, "__eq__": {"parameters": 2}, "__exit__": {"parameters": 2}, "__format__": {"parameters": 2}, "__ge__": {"parameters": 2}, "__getattribute__": {"parameters": 2}, "__gt__": {"parameters": 2}, "__hash__": {"parameters": 1}, "__init__": {"parameters": 2}, "__le__": {"parameters": 2}, "__lt__": {"parameters": 2}, "__ne__": {"parameters": 2}, "__new__": {"parameters": 2}, "__reduce__": {"parameters": 1}, "__reduce_ex__": {"parameters": 2}, "__repr__": {"parameters": 1}, "__setattr__": {"parameters": 3}, "__sizeof__": {"parameters": 1}, "__str__": {"parameters": 1}, "_acquire_restore": {"parameters": 2}, "_is_owned": {"parameters": 1}, "_release_save": {"parameters": 1}, "notify": {"parameters": 2}, "notifyAll": {"parameters": 1}, "notify_all": {"parameters": 1}, "wait": {"parameters": 2}, "wait_for": {"parameters": 3}}}, "Event": {"vars": {"__doc__": "Class implementing event objects.\n\n    Events manage a flag that can be set to true with the set() method and reset\n    to false with the clear() method. The wait() method blocks until the flag is\n    true.  The flag is initially false.\n\n    ", "__module__": "threading"}, "funcs": {"__delattr__": {"parameters": 2}, "__dir__": {"parameters": 1}, "__eq__": {"parameters": 2}, "__format__": {"parameters": 2}, "__ge__": {"parameters": 2}, "__getattribute__": {"parameters": 2}, "__gt__": {"parameters": 2}, "__hash__": {"parameters": 1}, "__init__": {"parameters": 1}, "__le__": {"parameters": 2}, "__lt__": {"parameters": 2}, "__ne__": {"parameters": 2}, "__new__": {"parameters": 2}, "__reduce__": {"parameters": 1}, "__reduce_ex__": {"parameters": 2}, "__repr__": {"parameters": 1}, "__setattr__": {"parameters": 3}, "__sizeof__": {"parameters": 1}, "__str__": {"parameters": 1}, "_reset_internal_locks": {"parameters": 1}, "clear": {"parameters": 1}, "isSet": {"parameters": 1}, "is_set": {"parameters": 1}, "set": {"parameters": 1}, "wait": {"parameters": 2}}}, "ExceptHookArgs": {"vars": {"__doc__": "ExceptHookArgs\n\nType used to pass arguments to threading.excepthook.", "n_fields": 4, "n_sequence_fields": 4, "n_unnamed_fields": 0}, "funcs": {"__add__": {"parameters": 2}, "__contains__": {"parameters": 2}, "__delattr__": {"parameters": 2}, "__dir__": {"parameters": 1}, "__eq__": {"parameters": 2}, "__format__": {"parameters": 2}, "__ge__": {"parameters": 2}, "__getattribute__": {"parameters": 2}, "__getitem__": {"parameters": 2}, "__getnewargs__": {"parameters": 1}, "__gt__": {"parameters": 2}, "__hash__": {"parameters": 1}, "__init__": {"parameters": 3}, "__iter__": {"parameters": 1}, "__le__": {"parameters": 2}, "__len__": {"parameters": 1}, "__lt__": {"parameters": 2}, "__mul__": {"parameters": 2}, "__ne__": {"parameters": 2}, "__new__": {"parameters": 2}, "__reduce_ex__": {"parameters": 2}, "__repr__": {"parameters": 1}, "__rmul__": {"parameters": 2}, "__setattr__": {"parameters": 3}, "__sizeof__": {"parameters": 1}, "__str__": {"parameters": 1}, "count": {"parameters": 2}, "index": {"parameters": 4}}}, "Semaphore": {"vars": {"__doc__": "This class implements semaphore objects.\n\n    Semaphores manage a counter representing the number of release() calls minus\n    the number of acquire() calls, plus an initial value. The acquire() method\n    blocks if necessary until it can return without making the counter\n    negative. If not given, value defaults to 1.\n\n    ", "__module__": "threading"}, "funcs": {"__delattr__": {"parameters": 2}, "__dir__": {"parameters": 1}, "__enter__": {"parameters": 3}, "__eq__": {"parameters": 2}, "__exit__": {"parameters": 4}, "__format__": {"parameters": 2}, "__ge__": {"parameters": 2}, "__getattribute__": {"parameters": 2}, "__gt__": {"parameters": 2}, "__hash__": {"parameters": 1}, "__init__": {"parameters": 2}, "__le__": {"parameters": 2}, "__lt__": {"parameters": 2}, "__ne__": {"parameters": 2}, "__new__": {"parameters": 2}, "__reduce__": {"parameters": 1}, "__reduce_ex__": {"parameters": 2}, "__repr__": {"parameters": 1}, "__setattr__": {"parameters": 3}, "__sizeof__": {"parameters": 1}, "__str__": {"parameters": 1}, "acquire": {"parameters": 3}, "release": {"parameters": 1}}}, "Thread": {"vars": {"__doc__": "A class that represents a thread of control.\n\n    This class can be safely subclassed in a limited fashion. There are two ways\n    to specify the activity: by passing a callable object to the constructor, or\n    by overriding the run() method in a subclass.\n\n    ", "__module__": "threading", "_initialized": false}, "funcs": {"__delattr__": {"parameters": 2}, "__dir__": {"parameters": 1}, "__eq__": {"parameters": 2}, "__format__": {"parameters": 2}, "__ge__": {"parameters": 2}, "__getattribute__": {"parameters": 2}, "__gt__": {"parameters": 2}, "__hash__": {"parameters": 1}, "__init__": {"parameters": 7}, "__le__": {"parameters": 2}, "__lt__": {"parameters": 2}, "__ne__": {"parameters": 2}, "__new__": {"parameters": 2}, "__reduce__": {"parameters": 1}, "__reduce_ex__": {"parameters": 2}, "__repr__": {"parameters": 1}, "__setattr__": {"parameters": 3}, "__sizeof__": {"parameters": 1}, "__str__": {"parameters": 1}, "_bootstrap": {"parameters": 1}, "_bootstrap_inner": {"parameters": 1}, "_delete": {"parameters": 1}, "_reset_internal_locks": {"parameters": 2}, "_set_ident": {"parameters": 1}, "_set_native_id": {"parameters": 1}, "_set_tstate_lock": {"parameters": 1}, "_stop": {"parameters": 1}, "_wait_for_tstate_lock": {"parameters": 3}, "getName": {"parameters": 1}, "isAlive": {"parameters": 1}, "isDaemon": {"parameters": 1}, "is_alive": {"parameters": 1}, "join": {"parameters": 2}, "run": {"parameters": 1}, "setDaemon": {"parameters": 2}, "setName": {"parameters": 2}, "start": {"parameters": 1}}}, "ThreadError": {"vars": {"__doc__": "Unspecified run-time error."}, "funcs": {"__delattr__": {"parameters": 2}, "__dir__": {"parameters": 1}, "__eq__": {"parameters": 2}, "__format__": {"parameters": 2}, "__ge__": {"parameters": 2}, "__getattribute__": {"parameters": 2}, "__gt__": {"parameters": 2}, "__hash__": {"parameters": 1}, "__init__": {"parameters": 3}, "__le__": {"parameters": 2}, "__lt__": {"parameters": 2}, "__ne__": {"parameters": 2}, "__new__": {"parameters": 2}, "__reduce_ex__": {"parameters": 2}, "__repr__": {"parameters": 1}, "__setattr__": {"parameters": 3}, "__sizeof__": {"parameters": 1}, "__str__": {"parameters": 1}}}, "Timer": {"vars": {"__doc__": "Call a function after a specified number of seconds:\n\n            t = Timer(30.0, f, args=None, kwargs=None)\n            t.start()\n            t.cancel()     # stop the timer's action if it's still waiting\n\n    ", "__module__": "threading", "_initialized": false}, "funcs": {"__delattr__": {"parameters": 2}, "__dir__": {"parameters": 1}, "__eq__": {"parameters": 2}, "__format__": {"parameters": 2}, "__ge__": {"parameters": 2}, "__getattribute__": {"parameters": 2}, "__gt__": {"parameters": 2}, "__hash__": {"parameters": 1}, "__init__": {"parameters": 5}, "__le__": {"parameters": 2}, "__lt__": {"parameters": 2}, "__ne__": {"parameters": 2}, "__new__": {"parameters": 2}, "__reduce__": {"parameters": 1}, "__reduce_ex__": {"parameters": 2}, "__repr__": {"parameters": 1}, "__setattr__": {"parameters": 3}, "__sizeof__": {"parameters": 1}, "__str__": {"parameters": 1}, "_bootstrap": {"parameters": 1}, "_bootstrap_inner": {"parameters": 1}, "_delete": {"parameters": 1}, "_reset_internal_locks": {"parameters": 2}, "_set_ident": {"parameters": 1}, "_set_native_id": {"parameters": 1}, "_set_tstate_lock": {"parameters": 1}, "_stop": {"parameters": 1}, "_wait_for_tstate_lock": {"parameters": 3}, "cancel": {"parameters": 1}, "getName": {"parameters": 1}, "isAlive": {"parameters": 1}, "isDaemon": {"parameters": 1}, "is_alive": {"parameters": 1}, "join": {"parameters": 2}, "run": {"parameters": 1}, "setDaemon": {"parameters": 2}, "setName": {"parameters": 2}, "start": {"parameters": 1}}}, "WeakSet": {"vars": {"__module__": "_weakrefset"}, "funcs": {"__and__": {"parameters": 2}, "__contains__": {"parameters": 2}, "__delattr__": {"parameters": 2}, "__dir__": {"parameters": 1}, "__eq__": {"parameters": 2}, "__format__": {"parameters": 2}, "__ge__": {"parameters": 2}, "__getattribute__": {"parameters": 2}, "__gt__": {"parameters": 2}, "__iand__": {"parameters": 2}, "__init__": {"parameters": 2}, "__ior__": {"parameters": 2}, "__isub__": {"parameters": 2}, "__iter__": {"parameters": 1}, "__ixor__": {"parameters": 2}, "__le__": {"parameters": 2}, "__len__": {"parameters": 1}, "__lt__": {"parameters": 2}, "__ne__": {"parameters": 2}, "__new__": {"parameters": 2}, "__or__": {"parameters": 2}, "__reduce__": {"parameters": 1}, "__reduce_ex__": {"parameters": 2}, "__repr__": {"parameters": 1}, "__setattr__": {"parameters": 3}, "__sizeof__": {"parameters": 1}, "__str__": {"parameters": 1}, "__sub__": {"parameters": 2}, "__xor__": {"parameters": 2}, "_commit_removals": {"parameters": 1}, "add": {"parameters": 2}, "clear": {"parameters": 1}, "copy": {"parameters": 1}, "difference": {"parameters": 2}, "difference_update": {"parameters": 2}, "discard": {"parameters": 2}, "intersection": {"parameters": 2}, "intersection_update": {"parameters": 2}, "isdisjoint": {"parameters": 2}, "issubset": {"parameters": 2}, "issuperset": {"parameters": 2}, "pop": {"parameters": 1}, "remove": {"parameters": 2}, "symmetric_difference": {"parameters": 2}, "symmetric_difference_update": {"parameters": 2}, "union": {"parameters": 2}, "update": {"parameters": 2}}}, "_CRLock": {"vars": {}, "funcs": {"__delattr__": {"parameters": 2}, "__dir__": {"parameters": 1}, "__eq__": {"parameters": 2}, "__format__": {"parameters": 2}, "__ge__": {"parameters": 2}, "__getattribute__": {"parameters": 2}, "__gt__": {"parameters": 2}, "__hash__": {"parameters": 1}, "__init__": {"parameters": 3}, "__le__": {"parameters": 2}, "__lt__": {"parameters": 2}, "__ne__": {"parameters": 2}, "__new__": {"parameters": 2}, "__reduce__": {"parameters": 1}, "__reduce_ex__": {"parameters": 2}, "__repr__": {"parameters": 1}, "__setattr__": {"parameters": 3}, "__sizeof__": {"parameters": 1}, "__str__": {"parameters": 1}}}, "_DummyThread": {"vars": {"__module__": "threading", "_initialized": false}, "funcs": {"__delattr__": {"parameters": 2}, "__dir__": {"parameters": 1}, "__eq__": {"parameters": 2}, "__format__": {"parameters": 2}, "__ge__": {"parameters": 2}, "__getattribute__": {"parameters": 2}, "__gt__": {"parameters": 2}, "__hash__": {"parameters": 1}, "__init__": {"parameters": 1}, "__le__": {"parameters": 2}, "__lt__": {"parameters": 2}, "__ne__": {"parameters": 2}, "__new__": {"parameters": 2}, "__reduce__": {"parameters": 1}, "__reduce_ex__": {"parameters": 2}, "__repr__": {"parameters": 1}, "__setattr__": {"parameters": 3}, "__sizeof__": {"parameters": 1}, "__str__": {"parameters": 1}, "_bootstrap": {"parameters": 1}, "_bootstrap_inner": {"parameters": 1}, "_delete": {"parameters": 1}, "_reset_internal_locks": {"parameters": 2}, "_set_ident": {"parameters": 1}, "_set_native_id": {"parameters": 1}, "_set_tstate_lock": {"parameters": 1}, "_stop": {"parameters": 1}, "_wait_for_tstate_lock": {"parameters": 3}, "getName": {"parameters": 1}, "isAlive": {"parameters": 1}, "isDaemon": {"parameters": 1}, "is_alive": {"parameters": 1}, "join": {"parameters": 2}, "run": {"parameters": 1}, "setDaemon": {"parameters": 2}, "setName": {"parameters": 2}, "start": {"parameters": 1}}}, "_MainThread": {"vars": {"__module__": "threading", "_initialized": false}, "funcs": {"__delattr__": {"parameters": 2}, "__dir__": {"parameters": 1}, "__eq__": {"parameters": 2}, "__format__": {"parameters": 2}, "__ge__": {"parameters": 2}, "__getattribute__": {"parameters": 2}, "__gt__": {"parameters": 2}, "__hash__": {"parameters": 1}, "__init__": {"parameters": 1}, "__le__": {"parameters": 2}, "__lt__": {"parameters": 2}, "__ne__": {"parameters": 2}, "__new__": {"parameters": 2}, "__reduce__": {"parameters": 1}, "__reduce_ex__": {"parameters": 2}, "__repr__": {"parameters": 1}, "__setattr__": {"parameters": 3}, "__sizeof__": {"parameters": 1}, "__str__": {"parameters": 1}, "_bootstrap": {"parameters": 1}, "_bootstrap_inner": {"parameters": 1}, "_delete": {"parameters": 1}, "_reset_internal_locks": {"parameters": 2}, "_set_ident": {"parameters": 1}, "_set_native_id": {"parameters": 1}, "_set_tstate_lock": {"parameters": 1}, "_stop": {"parameters": 1}, "_wait_for_tstate_lock": {"parameters": 3}, "getName": {"parameters": 1}, "isAlive": {"parameters": 1}, "isDaemon": {"parameters": 1}, "is_alive": {"parameters": 1}, "join": {"parameters": 2}, "run": {"parameters": 1}, "setDaemon": {"parameters": 2}, "setName": {"parameters": 2}, "start": {"parameters": 1}}}, "_PyRLock": {"vars": {"__doc__": "This class implements reentrant lock objects.\n\n    A reentrant lock must be released by the thread that acquired it. Once a\n    thread has acquired a reentrant lock, the same thread may acquire it\n    again without blocking; the thread must release it once for each time it\n    has acquired it.\n\n    ", "__module__": "threading"}, "funcs": {"__delattr__": {"parameters": 2}, "__dir__": {"parameters": 1}, "__enter__": {"parameters": 3}, "__eq__": {"parameters": 2}, "__exit__": {"parameters": 4}, "__format__": {"parameters": 2}, "__ge__": {"parameters": 2}, "__getattribute__": {"parameters": 2}, "__gt__": {"parameters": 2}, "__hash__": {"parameters": 1}, "__init__": {"parameters": 1}, "__le__": {"parameters": 2}, "__lt__": {"parameters": 2}, "__ne__": {"parameters": 2}, "__new__": {"parameters": 2}, "__reduce__": {"parameters": 1}, "__reduce_ex__": {"parameters": 2}, "__repr__": {"parameters": 1}, "__setattr__": {"parameters": 3}, "__sizeof__": {"parameters": 1}, "__str__": {"parameters": 1}, "_acquire_restore": {"parameters": 2}, "_is_owned": {"parameters": 1}, "_release_save": {"parameters": 1}, "acquire": {"parameters": 3}, "release": {"parameters": 1}}}, "_RLock": {"vars": {"__doc__": "This class implements reentrant lock objects.\n\n    A reentrant lock must be released by the thread that acquired it. Once a\n    thread has acquired a reentrant lock, the same thread may acquire it\n    again without blocking; the thread must release it once for each time it\n    has acquired it.\n\n    ", "__module__": "threading"}, "funcs": {"__delattr__": {"parameters": 2}, "__dir__": {"parameters": 1}, "__enter__": {"parameters": 3}, "__eq__": {"parameters": 2}, "__exit__": {"parameters": 4}, "__format__": {"parameters": 2}, "__ge__": {"parameters": 2}, "__getattribute__": {"parameters": 2}, "__gt__": {"parameters": 2}, "__hash__": {"parameters": 1}, "__init__": {"parameters": 1}, "__le__": {"parameters": 2}, "__lt__": {"parameters": 2}, "__ne__": {"parameters": 2}, "__new__": {"parameters": 2}, "__reduce__": {"parameters": 1}, "__reduce_ex__": {"parameters": 2}, "__repr__": {"parameters": 1}, "__setattr__": {"parameters": 3}, "__sizeof__": {"parameters": 1}, "__str__": {"parameters": 1}, "_acquire_restore": {"parameters": 2}, "_is_owned": {"parameters": 1}, "_release_save": {"parameters": 1}, "acquire": {"parameters": 3}, "release": {"parameters": 1}}}, "_count": {"vars": {"__doc__": "Return a count object whose .__next__() method returns consecutive values.\n\nEquivalent to:\n    def count(firstval=0, step=1):\n        x = firstval\n        while 1:\n            yield x\n            x += step"}, "funcs": {"__delattr__": {"parameters": 2}, "__dir__": {"parameters": 1}, "__eq__": {"parameters": 2}, "__format__": {"parameters": 2}, "__ge__": {"parameters": 2}, "__getattribute__": {"parameters": 2}, "__gt__": {"parameters": 2}, "__hash__": {"parameters": 1}, "__init__": {"parameters": 3}, "__iter__": {"parameters": 1}, "__le__": {"parameters": 2}, "__lt__": {"parameters": 2}, "__ne__": {"parameters": 2}, "__new__": {"parameters": 2}, "__next__": {"parameters": 1}, "__reduce_ex__": {"parameters": 2}, "__repr__": {"parameters": 1}, "__setattr__": {"parameters": 3}, "__sizeof__": {"parameters": 1}, "__str__": {"parameters": 1}}}, "_deque": {"vars": {"__doc__": "deque([iterable[, maxlen]]) --> deque object\n\nA list-like sequence optimized for data accesses near its endpoints."}, "funcs": {"__add__": {"parameters": 2}, "__bool__": {"parameters": 1}, "__contains__": {"parameters": 2}, "__delattr__": {"parameters": 2}, "__delitem__": {"parameters": 2}, "__dir__": {"parameters": 1}, "__eq__": {"parameters": 2}, "__format__": {"parameters": 2}, "__ge__": {"parameters": 2}, "__getattribute__": {"parameters": 2}, "__getitem__": {"parameters": 2}, "__gt__": {"parameters": 2}, "__iadd__": {"parameters": 2}, "__imul__": {"parameters": 2}, "__init__": {"parameters": 3}, "__iter__": {"parameters": 1}, "__le__": {"parameters": 2}, "__len__": {"parameters": 1}, "__lt__": {"parameters": 2}, "__mul__": {"parameters": 2}, "__ne__": {"parameters": 2}, "__new__": {"parameters": 2}, "__reduce_ex__": {"parameters": 2}, "__repr__": {"parameters": 1}, "__rmul__": {"parameters": 2}, "__setattr__": {"parameters": 3}, "__setitem__": {"parameters": 3}, "__str__": {"parameters": 1}}}, "_islice": {"vars": {"__doc__": "islice(iterable, stop) --> islice object\nislice(iterable, start, stop[, step]) --> islice object\n\nReturn an iterator whose next() method returns selected values from an\niterable.  If start is specified, will skip all preceding elements;\notherwise, start defaults to zero.  Step defaults to one.  If\nspecified as another value, step determines how many values are\nskipped between successive calls.  Works like a slice() on a list\nbut returns an iterator."}, "funcs": {"__delattr__": {"parameters": 2}, "__dir__": {"parameters": 1}, "__eq__": {"parameters": 2}, "__format__": {"parameters": 2}, "__ge__": {"parameters": 2}, "__getattribute__": {"parameters": 2}, "__gt__": {"parameters": 2}, "__hash__": {"parameters": 1}, "__init__": {"parameters": 3}, "__iter__": {"parameters": 1}, "__le__": {"parameters": 2}, "__lt__": {"parameters": 2}, "__ne__": {"parameters": 2}, "__new__": {"parameters": 2}, "__next__": {"parameters": 1}, "__reduce_ex__": {"parameters": 2}, "__repr__": {"parameters": 1}, "__setattr__": {"parameters": 3}, "__sizeof__": {"parameters": 1}, "__str__": {"parameters": 1}}}, "local": {"vars": {"__doc__": "Thread-local data"}, "funcs": {"__delattr__": {"parameters": 2}, "__dir__": {"parameters": 1}, "__eq__": {"parameters": 2}, "__format__": {"parameters": 2}, "__ge__": {"parameters": 2}, "__getattribute__": {"parameters": 2}, "__gt__": {"parameters": 2}, "__hash__": {"parameters": 1}, "__init__": {"parameters": 3}, "__le__": {"parameters": 2}, "__lt__": {"parameters": 2}, "__ne__": {"parameters": 2}, "__new__": {"parameters": 2}, "__reduce__": {"parameters": 1}, "__reduce_ex__": {"parameters": 2}, "__repr__": {"parameters": 1}, "__setattr__": {"parameters": 3}, "__sizeof__": {"parameters": 1}, "__str__": {"parameters": 1}}}}